<%- include('../partials/header') %>

<div class="cart-page">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h1 class="cart-title">Shopping Cart</h1>
                <div class="cart-breadcrumb">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/users/home">Home</a></li>
                            <li class="breadcrumb-item active" aria-current="page">Cart</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-8">
                <div class="cart-items-container">
                    <% if (!hasItems) { %>
                        <div class="cart-empty text-center py-5">
                            <div class="empty-cart-icon">
                                <i class="fas fa-shopping-cart fa-4x text-muted"></i>
                            </div>
                            <h3 class="mt-4">Your cart is empty</h3>
                            <p class="text-muted">Looks like you haven't added anything to your cart yet.</p>
                            <a href="/shop/products" class="btn btn-primary mt-3">
                                <i class="fas fa-arrow-left me-2"></i>Continue Shopping
                            </a>
                        </div>
                    <% } else { %>
                        <div class="cart-header d-none d-md-flex">
                            <div class="row w-100">
                                <div class="col-md-6">Product</div>
                                <div class="col-md-2">Price</div>
                                <div class="col-md-2">Quantity</div>
                                <div class="col-md-2">Total</div>
                            </div>
                        </div>
                        
                        <% cart.items.forEach(item => { %>
                            <div class="cart-item" data-product-id="<%= item.product._id %>" data-variant="<%= item.variant %>">
                                <div class="row align-items-center">
                                    <div class="col-md-6 d-flex align-items-center">
                                        <div class="item-image">
                                            <% if (item.product && item.product.images) { %>
                                                <img src="<%= item.product.images.image1 || '/images/product-placeholder.jpg' %>" 
                                                     alt="<%= item.product.name %>">
                                            <% } else { %>
                                                <img src="/images/product-placeholder.jpg" alt="Product image not available">
                                            <% } %>
                                        </div>
                                        <div class="item-details">
                                            <h5 class="item-name"><%= item.product ? item.product.name : 'Product Unavailable' %></h5>
                                            <p class="item-variant text-muted">
                                                Size: <%= item.variant %> 
                                                <% if (item.product && item.product.brand) { %>
                                                    | Brand: <%= item.product.brand %>
                                                <% } %>
                                            </p>
                                        </div>
                                    </div>
                                    <div class="col-6 col-md-2">
                                        <div class="item-price">
                                            <% if (item.product && item.product.variants && item.product.variants[item.variant]) { %>
                                                <% const variantPrice = parseFloat(item.product.variants[item.variant].price); %>
                                                <% const offerInfo = calculateBestOffer(item.product); %>
                                                <% const discountedPrice = offerInfo.bestOffer ? 
                                                    variantPrice * (1 - offerInfo.discountPercentage / 100) : 
                                                    variantPrice; %>
                                                
                                                <% if (offerInfo.bestOffer) { %>
                                                    <div class="price-container">
                                                        <span class="original-price">₹<%= variantPrice.toFixed(2) %></span>
                                                        <span class="final-price">₹<%= discountedPrice.toFixed(2) %></span>
                                                        <span class="discount-badge"><%= offerInfo.discountPercentage %>% OFF</span>
                                                    </div>
                                                <% } else { %>
                                                    <span class="final-price">₹<%= variantPrice.toFixed(2) %></span>
                                                <% } %>
                                            <% } else { %>
                                                <span class="final-price">Price not available</span>
                                            <% } %>
                                        </div>
                                    </div>
                                    <div class="col-6 col-md-2">
                                        <div class="item-quantity">
                                            <div class="quantity-controls">
                                                <button type="button" 
                                                        class="qty-btn minus" 
                                                        onclick="updateQuantity('<%= item.product._id %>', '<%= item.variant %>', 'decrease')"
                                                        <%= item.quantity <= 1 ? 'disabled' : '' %>>
                                                    <i class="fas fa-minus"></i>
                                                </button>
                                                
                                                <input type="number" 
                                                       class="quantity-input"
                                                       value="<%= item.quantity %>"
                                                       data-stock="<%= item.product.variants[item.variant].stock %>"
                                                       min="1"
                                                       max="<%= item.product.variants[item.variant].stock %>"
                                                       readonly>
                                                
                                                <button type="button" 
                                                        class="qty-btn plus" 
                                                        onclick="updateQuantity('<%= item.product._id %>', '<%= item.variant %>', 'increase')"
                                                        <%= item.quantity >= item.product.variants[item.variant].stock ? 'disabled' : '' %>>
                                                    <i class="fas fa-plus"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-6 col-md-1">
                                        <div class="item-total">
                                            <% if (item.product && item.product.variants && item.product.variants[item.variant]) { %>
                                                <% const variantPrice = parseFloat(item.product.variants[item.variant].price); %>
                                                <% const offerInfo = calculateBestOffer(item.product); %>
                                                <% const discountedPrice = offerInfo.bestOffer ? 
                                                    variantPrice * (1 - offerInfo.discountPercentage / 100) : 
                                                    variantPrice; %>
                                                <% const totalPrice = (discountedPrice * item.quantity).toFixed(2); %>
                                                
                                                <span class="d-md-none">Total: </span>₹<%= totalPrice %>
                                            <% } else { %>
                                                <span class="d-md-none">Total: </span>₹<%= item.total %>
                                            <% } %>
                                        </div>
                                    </div>
                                    <div class="col-6 col-md-1">
                                        <button class="btn btn-link text-danger delete-item" 
                                                onclick="removeFromCart('<%= item.product._id %>', '<%= item.variant %>')" 
                                                title="Remove item">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
            </div>
            
            <div class="col-lg-4">
                <div class="cart-summary">
                    <h3 class="summary-title">Order Summary</h3>
                    <div class="summary-item d-flex justify-content-between">
                        <span>Subtotal (<%= cart.items.reduce((total, item) => total + item.quantity, 0) %> items)</span>
                        <span>₹<%= cart.items.reduce((total, item) => {
                            if (item.product && item.product.variants && item.product.variants[item.variant]) {
                                const variantPrice = parseFloat(item.product.variants[item.variant].price);
                                const offerInfo = calculateBestOffer(item.product);
                                const discountedPrice = offerInfo.bestOffer ? 
                                    variantPrice * (1 - offerInfo.discountPercentage / 100) : 
                                    variantPrice;
                                const subtotal = (discountedPrice * item.quantity).toFixed(2);
                                return total + parseFloat(totalPrice);
                            }
                            return total + parseFloat(item.total || 0);
                        }, 0).toFixed(2) %></span>
                    </div>
                    
                    <% 
                    // Calculate total offer discount
                    let totalOfferDiscount = 0;
                    let hasOfferDiscount = false;
                    
                    if (cart && cart.items) {
                        cart.items.forEach(item => {
                            if (item.product && item.product.variants && item.product.variants[item.variant]) {
                                const variantPrice = parseFloat(item.product.variants[item.variant].price);
                                const offerInfo = calculateBestOffer(item.product);
                                
                                if (offerInfo.bestOffer) {
                                    const regularTotal = variantPrice * item.quantity;
                                    const discountedTotal = regularTotal * (1 - offerInfo.discountPercentage / 100);
                                    totalOfferDiscount += (regularTotal - discountedTotal);
                                    hasOfferDiscount = true;
                                }
                            }
                        });
                    }
                    
                    totalOfferDiscount = Math.round(totalOfferDiscount);
                    %>
                    
                    <% if (hasOfferDiscount) { %>
                        <div class="summary-item d-flex justify-content-between text-success">
                            <span>Offer Discount</span>
                            <span>-₹<%= totalOfferDiscount %></span>
                        </div>
                    <% } else { %>
                        <div class="summary-item d-flex justify-content-between text-success">
                            <span>Discount (10%)</span>
                            <span>-₹<%= Math.round(cart.items.reduce((total, item) => {
                                if (item.product && item.product.variants && item.product.variants[item.variant]) {
                                    const variantPrice = parseFloat(item.product.variants[item.variant].price);
                                    return total + (variantPrice * item.quantity);
                                }
                                return total;
                            }, 0) * 0.1) %></span>
                        </div>
                    <% } %>
                    
                    <div class="summary-item d-flex justify-content-between">
                        <span>Shipping</span>
                        <span>₹<%= shipping %></span>
                    </div>
                    <div class="summary-item d-flex justify-content-between">
                        <span>GST (18%)</span>
                        <span>₹<%= Math.round(cart.items.reduce((total, item) => {
                            if (item.product && item.product.variants && item.product.variants[item.variant]) {
                                const variantPrice = parseFloat(item.product.variants[item.variant].price);
                                const offerInfo = calculateBestOffer(item.product);
                                const discountedPrice = offerInfo.bestOffer ? 
                                    variantPrice * (1 - offerInfo.discountPercentage / 100) : 
                                    variantPrice;
                                return total + (discountedPrice * item.quantity);
                            }
                            return total;
                        }, 0) * 0.18) %></span>
                    </div>
                    <div class="summary-total d-flex justify-content-between">
                        <span>Total</span>
                        <% const subtotal = cart.items.reduce((total, item) => {
                            if (item.product && item.product.variants && item.product.variants[item.variant]) {
                                const variantPrice = parseFloat(item.product.variants[item.variant].price);
                                const offerInfo = calculateBestOffer(item.product);
                                const discountedPrice = offerInfo.bestOffer ? 
                                    variantPrice * (1 - offerInfo.discountPercentage / 100) : 
                                    variantPrice;
                                return total + (discountedPrice * item.quantity);
                            }
                            return total;
                        }, 0);
                        
                        const gst = Math.round(subtotal * 0.18);
                        const finalTotal = hasOfferDiscount ? 
                            (subtotal - totalOfferDiscount + shipping + gst) : 
                            (subtotal - Math.round(subtotal * 0.1) + shipping + gst); %>
                        <span>₹<%= Math.round(finalTotal) %></span>
                    </div>
                    <button onclick="window.location.href='/cart/checkout'" 
                            class="btn btn-primary btn-block checkout-btn" 
                            <%= !hasItems ? 'disabled' : '' %>>
                        Proceed to Checkout
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
async function updateQuantity(productId, variant, action) {
    const cartItem = document.querySelector(
        `.cart-item[data-product-id="${productId}"][data-variant="${variant}"]`
    );
    
    const quantityInput = cartItem.querySelector('.quantity-input');
    const minusBtn = cartItem.querySelector('.qty-btn.minus');
    const plusBtn = cartItem.querySelector('.qty-btn.plus');
    const itemTotalElement = cartItem.querySelector('.item-total');
    
    const currentQty = parseInt(quantityInput.value);
    const stock = parseInt(quantityInput.dataset.stock);
    
    let newQty;
    if (action === 'increase') {
        if (currentQty >= stock) {
            Swal.fire({
                title: 'Stock Limit',
                text: `Only ${stock} items available in stock`,
                icon: 'warning',
                confirmButtonColor: '#3085d6'
            });
            return;
        }
        newQty = currentQty + 1;
    } else {
        if (currentQty <= 1) {
            return;
        }
        newQty = currentQty - 1;
    }

    // Show loading spinner on the quantity input
    const loadingSpinner = document.createElement('div');
    loadingSpinner.className = 'spinner-border spinner-border-sm text-primary';
    loadingSpinner.setAttribute('role', 'status');
    quantityInput.style.opacity = '0.5';
    
    try {
        const response = await fetch('/cart/update', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                productId,
                variant,
                quantity: newQty
            })
        });

        if (!response.ok) {
            throw new Error('Failed to update quantity');
        }

        const result = await response.json();
        
        // Update the quantity input value
        quantityInput.value = newQty;
        
        // Update button states
        minusBtn.disabled = newQty <= 1;
        plusBtn.disabled = newQty >= stock;
        
        // Update the item total price
        const itemPrice = parseFloat(cartItem.querySelector('.item-price .final-price').innerText.replace('₹', ''));
        const newTotal = (itemPrice * newQty).toFixed(2);
        itemTotalElement.innerHTML = `<span class="d-md-none">Total: </span>₹${newTotal}`;
        
        // Update cart summary
        updateCartSummary(result.cartData);
        
        // Show success feedback
        const originalBackground = cartItem.style.backgroundColor;
        cartItem.style.transition = 'background-color 0.5s';
        cartItem.style.backgroundColor = '#e8f5e9';
        setTimeout(() => {
            cartItem.style.backgroundColor = originalBackground;
        }, 1000);

    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'Failed to update quantity',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
        // Restore the original quantity
        quantityInput.value = currentQty;
    } finally {
        // Remove loading state
        quantityInput.style.opacity = '1';
    }
}

// Function to update cart summary
function updateCartSummary(cartData) {
    const summaryContainer = document.querySelector('.cart-summary');
    
    if (summaryContainer && cartData) {
        // Update item count
        const itemCountElement = summaryContainer.querySelector('.summary-item:first-child span:first-child');
        if (itemCountElement) {
            const itemCount = cartData.items.reduce((total, item) => total + item.quantity, 0);
            itemCountElement.textContent = `Subtotal (${itemCount} items)`;
        }
        
        // Update subtotal
        const subtotalElement = summaryContainer.querySelector('.summary-item:first-child span:last-child');
        if (subtotalElement) {
            const subtotal = cartData.items.reduce((total, item) => {
                const itemPrice = parseFloat(item.product.variants[item.variant].price);
                const offerInfo = calculateBestOfferClientSide(item.product);
                const discountedPrice = offerInfo.bestOffer ? 
                    itemPrice * (1 - offerInfo.discountPercentage / 100) : 
                    itemPrice;
                return total + (discountedPrice * item.quantity);
            }, 0);
            subtotalElement.textContent = `₹${subtotal.toFixed(2)}`;
        }
        
        // Calculate and update offer discount
        let totalOfferDiscount = 0;
        let hasOfferDiscount = false;
        
        if (cartData.items) {
            cartData.items.forEach(item => {
                if (item.product && item.product.variants && item.product.variants[item.variant]) {
                    const variantPrice = parseFloat(item.product.variants[item.variant].price);
                    const offerInfo = calculateBestOfferClientSide(item.product);
                    
                    if (offerInfo.bestOffer) {
                        const regularTotal = variantPrice * item.quantity;
                        const discountedTotal = regularTotal * (1 - offerInfo.discountPercentage / 100);
                        totalOfferDiscount += (regularTotal - discountedTotal);
                        hasOfferDiscount = true;
                    }
                }
            });
        }
        
        totalOfferDiscount = Math.round(totalOfferDiscount);
        
        // Update offer discount or regular discount
        const discountElement = summaryContainer.querySelector('.summary-item.text-success span:last-child');
        if (discountElement) {
            if (hasOfferDiscount) {
                discountElement.textContent = `-₹${totalOfferDiscount}`;
            } else {
                discountElement.textContent = `-₹${Math.round(cartData.subtotal * 0.1)}`;
            }
        }
        
        // Update GST
        const gstElement = summaryContainer.querySelector('.summary-item:nth-last-child(2) span:last-child');
        if (gstElement) {
            const gst = Math.round(cartData.subtotal * 0.18);
            gstElement.textContent = `₹${gst}`;
        }
        
        // Update final total
        const totalElement = summaryContainer.querySelector('.summary-total span:last-child');
        if (totalElement) {
            let finalTotal;
            const gst = Math.round(cartData.subtotal * 0.18);
            const shipping = parseFloat(summaryContainer.querySelector('.summary-item:nth-last-child(3) span:last-child').textContent.replace('₹', ''));
            
            if (hasOfferDiscount) {
                finalTotal = cartData.subtotal - totalOfferDiscount + shipping + gst;
            } else {
                finalTotal = cartData.subtotal - Math.round(cartData.subtotal * 0.1) + shipping + gst;
            }
            
            totalElement.textContent = `₹${finalTotal}`;
        }
    }
}

// Helper function for client-side offer calculation
function calculateBestOfferClientSide(product) {
    let bestOffer = null;
    let discountPercentage = 0;
    
    if (product.offer && product.offer.discountPercentage) {
        bestOffer = 'product';
        discountPercentage = product.offer.discountPercentage;
    }
    
    if (product.categoryOffer && product.categoryOffer.discountPercentage && 
        product.categoryOffer.discountPercentage > discountPercentage) {
        bestOffer = 'category';
        discountPercentage = product.categoryOffer.discountPercentage;
    }
    
    return {
        bestOffer,
        discountPercentage
    };
}

async function removeFromCart(productId, variant) {
    try {
        // Show confirmation dialog
        const result = await Swal.fire({
            title: 'Remove Item?',
            text: 'Are you sure you want to remove this item from your cart?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, remove it',
            cancelButtonText: 'Cancel'
        });

        if (!result.isConfirmed) {
            return;
        }

        // Show loading state
        Swal.fire({
            title: 'Removing...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const response = await fetch(`/cart/remove/${productId}/${variant}`, {
            method: 'DELETE'
        });

        if (!response.ok) {
            throw new Error('Failed to remove item');
        }

        // Show success message and reload
        await Swal.fire({
            title: 'Removed!',
            text: 'Item has been removed from your cart',
            icon: 'success',
            timer: 1500,
            showConfirmButton: false
        });

        location.reload();

    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'Failed to remove item from cart',
            icon: 'error',
            confirmButtonColor: '#d33'
        });
    }
}
</script>

<style>
.cart-page {
    padding: 40px 0;
    background-color: #fafafa;
    min-height: 100vh;
}

.cart-title {
    font-size: 32px;
    font-weight: 600;
    color: #333;
    margin-bottom: 30px;
}

.cart-breadcrumb {
    margin-bottom: 30px;
}

.cart-items-container {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
}

.cart-header {
    padding: 20px;
    font-weight: 500;
    color: #666;
    border-bottom: 1px solid #eee;
}

.cart-item {
    padding: 24px;
    border-bottom: 1px solid #eee;
    transition: background-color 0.2s ease;
}

.cart-item:hover {
    background-color: #f8f8f8;
}

.item-image {
    width: 100px;
    height: 100px;
    margin-right: 20px;
    border-radius: 8px;
    overflow: hidden;
}

.item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.item-name {
    font-size: 16px;
    font-weight: 500;
    color: #333;
    margin-bottom: 8px;
}

.item-variant {
    color: #666;
    font-size: 14px;
}

.item-variant .badge {
    background: #f5f5f5;
    color: #666;
    font-weight: 500;
    padding: 6px 12px;
    margin-right: 8px;
    border-radius: 6px;
}

.quantity-controls {
    display: inline-flex;
    align-items: center;
    border: 1px solid #eee;
    border-radius: 8px;
    padding: 4px;
}

.qty-btn {
    background: transparent;
    border: none;
    color: #FF9800;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
    border-radius: 6px;
}

.qty-btn:hover:not(:disabled) {
    background: #fff3e0;
}

.qty-btn:disabled {
    color: #ccc;
    cursor: not-allowed;
}

.quantity-input {
    width: 40px;
    border: none;
    text-align: center;
    font-weight: 500;
    color: #333;
    font-size: 15px;
}

.cart-summary {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    padding: 24px;
    position: sticky;
    top: 20px;
}

.summary-title {
    font-size: 20px;
    font-weight: 600;
    color: #333;
    margin-bottom: 20px;
}

.summary-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 16px;
    color: #666;
    font-size: 15px;
}

.summary-item.discount {
    color: #4CAF50;
}

.summary-total {
    display: flex;
    justify-content: space-between;
    padding-top: 16px;
    margin-top: 16px;
    border-top: 1px solid #eee;
    font-weight: 600;
    font-size: 18px;
    color: #333;
}

.checkout-btn {
    background: #FF9800;
    border: none;
    padding: 14px;
    font-weight: 500;
    font-size: 16px;
    border-radius: 8px;
    width: 100%;
    color: white;
    margin-top: 20px;
    transition: background-color 0.2s ease;
}

.checkout-btn:hover:not(:disabled) {
    background: #F57C00;
}

.checkout-btn:disabled {
    background: #ccc;
}

.btn-outline-secondary {
    color: #666;
    border-color: #ddd;
    background: white;
    font-weight: 500;
    border-radius: 8px;
    margin-top: 12px;
}

.btn-outline-secondary:hover {
    background: #f5f5f5;
    border-color: #ccc;
    color: #333;
}

.delete-item {
    color: #ff5252;
    background: transparent;
    border: none;
    padding: 8px;
    transition: color 0.2s ease;
}

.delete-item:hover {
    color: #ff1744;
}

.empty-cart {
    text-align: center;
    padding: 48px 24px;
    background: white;
    border-radius: 12px;
}

.empty-cart-icon {
    color: #ccc;
    margin-bottom: 24px;
}

.empty-cart h3 {
    color: #333;
    font-weight: 600;
    margin-bottom: 8px;
}

.empty-cart p {
    color: #666;
    margin-bottom: 24px;
}

@media (max-width: 767px) {
    .cart-page {
        padding: 20px 0;
    }
    
    .cart-title {
        font-size: 24px;
    }
    
    .cart-item {
        padding: 16px;
    }
    
    .item-image {
        width: 80px;
        height: 80px;
    }
}

.price-container {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.original-price {
    text-decoration: line-through;
    color: #999;
    font-size: 14px;
}

.final-price {
    font-weight: 600;
    color: #333;
    font-size: 16px;
}

.discount-badge {
    display: inline-block;
    background: #4CAF50;
    color: white;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
}
</style>

<%- include('../partials/footer') %> 