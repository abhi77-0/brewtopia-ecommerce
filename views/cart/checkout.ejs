<%- include('../partials/header') %>

<div class="container my-5">
    <!-- Progress Bar -->
    <div class="checkout-steps mb-4">
        <div class="step completed">
            <div class="step-circle">
                <i class="fas fa-shopping-cart"></i>
            </div>
            <span>Cart</span>
        </div>
        <div class="step-line"></div>
        <div class="step active">
            <div class="step-circle">
                <i class="fas fa-clipboard-list"></i>
            </div>
            <span>Checkout</span>
        </div>
        <div class="step-line"></div>
        <div class="step">
            <div class="step-circle">
                <i class="fas fa-credit-card"></i>
            </div>
            <span>Payment</span>
        </div>
    </div>

    <div class="row g-4">
        <!-- Left Column -->
        <div class="col-lg-8">
            <!-- Products Section -->
            <div class="checkout-card">
                <div class="card-header">
                    <h5><i class="fas fa-box me-2"></i>Order Items (<%= itemCount %>)</h5>
                </div>
                <div class="card-body">
                    <% cart.items.forEach(item => { %>
                        <div class="product-item">
                            <div class="d-flex gap-3">
                                <div class="product-img">
                                    <img src="<%= item.product.images.image1 || '/images/product-placeholder.jpg' %>" 
                                         alt="<%= item.product.name %>">
                                </div>
                                <div class="product-details flex-grow-1">
                                    <h6 class="mb-1"><%= item.product.name %></h6>
                                    <div class="product-meta mb-2">
                                        <span class="size">Size: <%= item.variant %></span>
                                        <% if (item.product.brand) { %>
                                            <span class="dot">•</span>
                                            <span class="brand"><%= item.product.brand %></span>
                                        <% } %>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="quantity text-muted">Qty: <%= item.quantity %></span>
                                        <span class="price">₹<%= item.product.variants[item.variant].price * item.quantity %></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>

            <!-- Address Section -->
            <div class="checkout-card mt-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="fas fa-map-marker-alt me-2"></i>Delivery Address</h5>
                    <button type="button" class="btn btn-outline-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                        <i class="fas fa-plus me-1"></i>Add New
                    </button>
                </div>
                <div class="card-body">
                    <div class="address-grid">
                        <% if (user.addresses && user.addresses.length > 0) { %>
                            <% user.addresses.forEach((address, index) => { %>
                                <div class="address-option">
                                    <input type="radio" 
                                           name="selectedAddress" 
                                           id="address<%= index %>" 
                                           value="<%= address._id %>"
                                           <%= index === 0 ? 'checked' : '' %>>
                                    <label for="address<%= index %>">
                                        <span class="address-type"><%= address.type || 'Home' %></span>
                                        <h6 class="mb-1"><%= address.name %></h6>
                                        <p class="mb-1"><%= address.street %></p>
                                        <p class="mb-1"><%= address.city %>, <%= address.state %> <%= address.pinCode %></p>
                                        <p class="mb-0"><i class="fas fa-phone-alt me-1"></i><%= address.phone %></p>
                                    </label>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="text-center py-4">
                                <i class="fas fa-home fa-3x text-muted mb-3"></i>
                                <h6>No addresses found</h6>
                                <p class="text-muted">Add a delivery address to continue</p>
                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addAddressModal">Add Address</button>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Payment Section -->
            <div class="checkout-card mt-4">
                <div class="card-header">
                    <h5><i class="fas fa-wallet me-2"></i>Payment Method</h5>
                </div>
                <div class="card-body">
                    <div class="payment-options">
                        <div class="payment-option">
                            <input type="radio" name="paymentMethod" id="cod" value="cod" checked>
                            <label for="cod">
                                <div class="icon-wrapper">
                                    <i class="fas fa-money-bill-wave"></i>
                                </div>
                                <div class="payment-details">
                                    <h6>Cash on Delivery</h6>
                                    <small>Pay when you receive</small>
                                </div>
                            </label>
                        </div>
                        <div class="payment-option">
                            <input type="radio" name="paymentMethod" id="razorpay" value="razorpay">
                            <label for="razorpay">
                                <div class="icon-wrapper">
                                    <i class="fas fa-credit-card"></i>
                                </div>
                                <div class="payment-details">
                                    <h6>Online Payment</h6>
                                    <small>Cards, UPI, Netbanking</small>
                                </div>
                            </label>
                        </div>
                        <div class="payment-option">
                            <input type="radio" name="paymentMethod" id="wallet" value="wallet" 
                                   <%= (walletBalance < total) ? 'disabled' : '' %>>
                            <label for="wallet">
                                <div class="icon-wrapper">
                                    <i class="fas fa-wallet"></i>
                                </div>
                                <div class="payment-details">
                                    <h6>Wallet</h6>
                                    <small>Available balance: ₹<%= walletBalance ? walletBalance.toFixed(2) : '0.00' %></small>
                                    <% if (walletBalance < total) { %>
                                        <small class="text-danger d-block">Insufficient balance</small>
                                    <% } %>
                                </div>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column - Order Summary -->
        <div class="col-lg-4">
            <div class="cart-summary">
                <h3 class="summary-title">Order Summary</h3>
                
                <div class="summary-item d-flex justify-content-between">
                    <span>Subtotal (<%= itemCount %> items)</span>
                    <span id="subtotal">₹<%= subtotal %></span>
                </div>
                
                <div class="summary-item d-flex justify-content-between">
                    <span>Shipping</span>
                    <span id="shipping">₹<%= shipping %></span>
                </div>

                <% 
                // Calculate total offer discount
                let totalOfferDiscount = 0;
                let hasOfferDiscount = false;

                if (cart && cart.items && typeof calculateBestOffer === 'function') {
                    cart.items.forEach(item => {
                        if (item.product && item.product.variants && item.product.variants[item.variant]) {
                            const variantPrice = parseFloat(item.product.variants[item.variant].price);
                            const offerInfo = calculateBestOffer(item.product);
                            
                            if (offerInfo.bestOffer) {
                                const regularTotal = variantPrice * item.quantity;
                                const discountedTotal = regularTotal * (1 - offerInfo.discountPercentage / 100);
                                totalOfferDiscount += (regularTotal - discountedTotal);
                                hasOfferDiscount = true;
                            }
                        }
                    });
                }

                totalOfferDiscount = Math.round(totalOfferDiscount);
                %>

                <% if (hasOfferDiscount) { %>
                    <div class="summary-item d-flex justify-content-between text-success">
                        <span>Offer Discount</span>
                        <span id="offerDiscount">-₹<%= totalOfferDiscount %></span>
                    </div>
                <% } %>

                <div class="summary-item d-flex justify-content-between">
                    <span>GST (18%)</span>
                    <span id="gst">₹<%= gst %></span>
                </div>
                
                
                <div id="couponDiscountContainer"></div>
                
                <div class="summary-total d-flex justify-content-between">
                    <span>Total</span>
                    <% 
                    // Calculate final total with offer discounts and coupon
                    let finalTotal = subtotal + shipping + gst;
                    
                    // If there are offer discounts, adjust the total
                    if (typeof totalOfferDiscount !== 'undefined' && totalOfferDiscount > 0) {
                        finalTotal = finalTotal - totalOfferDiscount;
                    }
                    
                    // Ensure the total is never negative
                    finalTotal = Math.max(0, Math.round(finalTotal));
                    %>
                    <span id="total">₹<%= finalTotal %></span>
                </div>

                <!-- Coupon Section -->
                <div class="coupon-section mt-3 mb-3">
                    <div id="appliedCouponSection" style="display: none;">
                        <div class="applied-coupon">
                            <span class="text-success">
                                <i class="fas fa-check-circle me-1"></i>
                                <span id="appliedCouponMessage"></span>
                            </span>
                            <button class="btn btn-sm text-danger" onclick="removeCoupon()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <button class="btn btn-outline-primary w-100" type="button" data-bs-toggle="modal" data-bs-target="#couponsModal">
                        <i class="fas fa-tag me-2"></i>Apply Coupon
                    </button>
                </div>

                <!-- Place Order Button -->
                <button onclick="proceedToPayment()" class="btn btn-primary btn-block checkout-btn mt-3">
                    <i class="fas fa-check-circle me-2"></i>Place Order
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Add Address Modal -->
<div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="newAddressForm">
          <div class="mb-3">
            <label for="name" class="form-label">Full Name</label>
            <input type="text" class="form-control" id="name" name="name" required>
          </div>
          <div class="mb-3">
            <label for="phone" class="form-label">Phone Number</label>
            <input type="tel" class="form-control" id="phone" name="phone" required>
          </div>
          <div class="mb-3">
            <label for="street" class="form-label">Street Address</label>
            <textarea class="form-control" id="street" name="street" required></textarea>
          </div>
          <div class="row mb-3">
            <div class="col">
              <label for="city" class="form-label">City</label>
              <input type="text" class="form-control" id="city" name="city" required>
            </div>
            <div class="col">
              <label for="state" class="form-label">State</label>
              <input type="text" class="form-control" id="state" name="state" required>
            </div>
          </div>
          <div class="mb-3">
            <label for="pincode" class="form-label">PIN Code</label>
            <input type="text" class="form-control" id="pincode" name="pincode" required>
          </div>
          <div class="mb-3">
            <label for="type" class="form-label">Address Type</label>
            <select class="form-select" id="type" name="type">
              <option value="Home">Home</option>
              <option value="Work">Work</option>
              <option value="Other">Other</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveAddressBtn">Save Address</button>
      </div>
    </div>
  </div>
</div>

<!-- Add this at the end of your body, before the closing </body> tag -->
<div class="modal fade" id="couponsModal" tabindex="-1" aria-labelledby="couponsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="couponsModalLabel">Available Coupons</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="coupon-list">
          <div id="availableCoupons" class="d-flex flex-column gap-3">
            <!-- Coupons will be loaded here -->
            <div class="spinner-border text-primary mx-auto" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<style>
:root {
    --primary-color: #FF9800;
    --primary-light: #FFB74D;
    --primary-dark: #F57C00;
    --text-color: #333333;
    --border-color: #E0E0E0;
    --background-light: #FFF3E0;
}

/* Progress Steps */
.checkout-steps {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 15px;
    margin: 2rem 0;
}

.step {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    z-index: 1;
}

.step-circle {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: #fff;
    border: 2px solid var(--border-color);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 8px;
    color: #666;
    transition: all 0.3s ease;
}

.step.completed .step-circle {
    background: var(--primary-color);
    border-color: var(--primary-color);
    color: white;
}

.step.active .step-circle {
    border-color: var(--primary-color);
    color: var(--primary-color);
}

.step-line {
    flex: 1;
    height: 2px;
    background: var(--border-color);
    min-width: 60px;
}

/* Cards */
.checkout-card {
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    overflow: hidden;
}

.card-header {
    background: #fff;
    padding: 1.25rem;
    border-bottom: 1px solid var(--border-color);
}

.card-header h5 {
    margin: 0;
    color: var(--text-color);
}

.card-body {
    padding: 1.25rem;
}

/* Product Items */
.product-item {
    padding: 1rem 0;
    border-bottom: 1px solid var(--border-color);
}

.product-item:last-child {
    border-bottom: none;
}

.product-img {
    width: 80px;
    height: 80px;
    border-radius: 8px;
    overflow: hidden;
}

.product-img img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.product-meta {
    font-size: 0.9rem;
    color: #666;
}

.dot {
    margin: 0 8px;
}

/* Address Options */
.address-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
}

.address-option {
    position: relative;
}

.address-option input {
    position: absolute;
    opacity: 0;
}

.address-option label {
    display: block;
    padding: 1rem;
    border: 2px solid var(--border-color);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.address-option input:checked + label {
    border-color: var(--primary-color);
    background: var(--background-light);
}

.address-type {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    font-size: 0.8rem;
    color: var(--primary-color);
}

/* Payment Options */
.payment-options {
    display: grid;
    gap: 1rem;
}

.payment-option {
    position: relative;
}

.payment-option input {
    position: absolute;
    opacity: 0;
}

.payment-option label {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border: 2px solid var(--border-color);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.payment-option input:checked + label {
    border-color: var(--primary-color);
    background: var(--background-light);
}

.icon-wrapper {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: var(--background-light);
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--primary-color);
}

/* Order Summary */
.order-summary {
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 2px 12px rgba(0,0,0,0.08);
    position: sticky;
    top: 2rem;
}

.summary-header {
    padding: 1.25rem;
    border-bottom: 1px solid var(--border-color);
}

.summary-body {
    padding: 1.25rem;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
    color: var(--text-color);
}

.summary-row.discount {
    color: #4CAF50;
}

.summary-total {
    display: flex;
    justify-content: space-between;
    padding-top: 1rem;
    border-top: 1px solid var(--border-color);
    margin-bottom: 1.5rem;
    font-weight: 600;
    font-size: 1.1rem;
}

/* Buttons */
.btn-primary {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

.btn-primary:hover {
    background-color: var(--primary-dark);
    border-color: var(--primary-dark);
}

.btn-outline-primary {
    color: var(--primary-color);
    border-color: var(--primary-color);
}

.btn-outline-primary:hover {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

@media (max-width: 768px) {
    .checkout-steps {
        gap: 10px;
    }
    
    .step-circle {
        width: 40px;
        height: 40px;
        font-size: 0.9rem;
    }
    
    .step span {
        font-size: 0.8rem;
    }
    
    .address-grid {
        grid-template-columns: 1fr;
    }
}

.coupon-section {
    border: 1px solid #dee2e6;
    padding: 1rem;
    border-radius: 8px;
}

.discount-row {
    color: #28a745;
    align-items: center;
}

.discount-row button {
    padding: 0;
    margin-left: 8px;
}

#couponMessage {
    margin-top: 0.5rem;
    font-size: 0.875rem;
}

/* Copy the cart summary styles from cart.ejs */
.cart-summary {
    background: white;
// ... existing code ...

<script>
async function retryPayment(orderId) {
    try {
        // Show loading state
        Swal.fire({
            title: 'Processing',
            text: 'Initializing payment...',
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const response = await fetch(`/checkout/razorpay/retry-payment/${orderId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'same-origin'
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to initiate payment');
        }

        const data = await response.json();
        
        if (!data.success || !data.order) {
            throw new Error(data.message || 'Invalid server response');
        }

        // Close loading dialog
        Swal.close();

        // Initialize Razorpay payment
        const options = {
            key: '<%= process.env.RAZORPAY_KEY_ID %>',
            amount: data.order.amount,
            currency: "INR",
            name: "Brewtopia",
            description: "Order Payment Retry",
            order_id: data.order.id,
            handler: async function(response) {
                await handlePaymentSuccess(response, orderId);
            },
            prefill: {
                name: "<%= user.name %>",
                email: "<%= user.email %>",
                contact: "<%= user.phone %>"
            },
            theme: {
                color: "#FF9800"
            },
            modal: {
                ondismiss: function() {
                    handlePaymentFailure({ message: 'Payment was cancelled by you', orderId });
                }
            }
        };

        const rzp = new Razorpay(options);
        rzp.open();

    } catch (error) {
        console.error('Payment retry error:', error);
        Swal.close();
        Swal.fire({
            title: 'Error',
            text: error.message || 'Failed to initiate payment',
            icon: 'error',
            confirmButtonColor: '#FF9800'
        });
    }
}

async function handlePaymentSuccess(response, orderId) {
    try {
        Swal.fire({
            title: 'Verifying Payment',
            text: 'Please wait...',
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const verifyResponse = await fetch('/checkout/razorpay/verify', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_order_id: response.razorpay_order_id,
                razorpay_signature: response.razorpay_signature,
                orderId: orderId
            })
        });

        const result = await verifyResponse.json();

        if (result.success) {
            window.location.href = `/checkout/razorpay/success/${orderId}`;
        } else {
            Swal.fire({
                title: 'Payment Failed',
                text: result.message || 'Payment verification failed',
                icon: 'error',
                confirmButtonText: 'Try Again'
            });
        }
    } catch (error) {
        console.error('Payment verification error:', error);
        Swal.fire({
            title: 'Error',
            text: 'Payment verification failed',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
}

function handlePaymentFailure(error) {
    Swal.fire({
        title: 'Payment Failed',
        text: error.message || 'Payment was not completed',
        icon: 'error',
        confirmButtonText: 'OK'
    });
}
</script>

// ... rest of the code ...    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    padding: 24px;
    position: sticky;
    top: 20px;
}

.summary-title {
    font-size: 20px;
    font-weight: 600;
    color: #333;
    margin-bottom: 20px;
}

.summary-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 16px;
    color: #666;
    font-size: 15px;
}

.summary-item.discount {
    color: #4CAF50;
}

.summary-total {
    display: flex;
    justify-content: space-between;
    padding-top: 16px;
    margin-top: 16px;
    border-top: 1px solid #eee;
    font-weight: 600;
    font-size: 18px;
    color: #333;
}

.checkout-btn {
    background: #FF9800;
    border: none;
    padding: 14px;
    font-weight: 500;
    font-size: 16px;
    border-radius: 8px;
    width: 100%;
    color: white;
    margin-top: 20px;
    transition: background-color 0.2s ease;
}

.checkout-btn:hover:not(:disabled) {
    background: #F57C00;
}

.checkout-btn:disabled {
    background: #ccc;
}

/* Coupon section styles */
.coupon-section {
    margin-top: 1rem;
}

#couponMessage {
    margin-top: 0.5rem;
    font-size: 0.85rem;
}

.coupon-card {
    border: 1px dashed var(--primary-color);
    border-radius: 8px;
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #FFF9E6;
    position: relative;
    overflow: hidden;
    margin-bottom: 15px;
    transition: all 0.3s ease;
}

.coupon-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.coupon-card::before, .coupon-card::after {
    content: '';
    position: absolute;
    top: 50%;
    width: 20px;
    height: 20px;
    background: white;
    border-radius: 50%;
    transform: translateY(-50%);
}

.coupon-card::before {
    left: -10px;
}

.coupon-card::after {
    right: -10px;
}

.coupon-content {
    flex: 1;
}

.coupon-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
}

.coupon-code {
    font-weight: 600;
    color: var(--primary-dark);
    margin: 0;
}

.coupon-discount {
    background: var(--primary-color);
    color: white;
    padding: 2px 8px;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 600;
}

.coupon-description {
    font-size: 0.85rem;
    color: #666;
    margin-bottom: 8px;
}

.coupon-meta {
    display: flex;
    gap: 12px;
    font-size: 0.75rem;
    color: #888;
}

.applied-coupon {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #e8f5e9;
    padding: 8px 12px;
    border-radius: 4px;
    margin-bottom: 10px;
}

#couponsModal .modal-body {
    max-height: 400px;
    overflow-y: auto;
}

.inactive-coupon {
    opacity: 0.8;
    background-color: #f8f9fa;
    border: 1px dashed #dee2e6;
}

.invalid-coupon-message {
    font-size: 0.75rem;
    color: #dc3545;
}

.coupon-min {
    font-weight: 500;
}

.coupon-min.text-danger {
    color: #dc3545;
}

.btn-secondary:disabled {
    cursor: not-allowed;
    opacity: 0.7;
}
</style>

<script>
function proceedToPayment() {
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
    
    if (!selectedAddress) {
        Swal.fire({
            title: 'Select Address',
            text: 'Please select a delivery address',
            icon: 'warning',
            confirmButtonColor: '#FF9800'
        });
        return;
    }

    if (!selectedPayment) {
        Swal.fire({
            title: 'Select Payment Method',
            text: 'Please select a payment method',
            icon: 'warning',
            confirmButtonColor: '#FF9800'
        });
        return;
    }
    
    if (selectedPayment.value === 'razorpay') {
        initiateRazorpayPayment();
    } else {
        placeOrder(selectedAddress.value, selectedPayment.value);
    }
}

function placeOrder(addressId, paymentMethod) {
    // Get the total amount
    const totalElement = document.getElementById('total');
    const totalAmount = parseFloat(totalElement.textContent.replace('₹', '').trim());
    
    // Validate COD restriction
    if (paymentMethod === 'cod' && totalAmount >= 1000) {
        Swal.fire({
            title: 'Payment Method Not Available',
            text: 'Cash on Delivery is not available for orders ₹1000 or above. Please choose another payment method.',
            icon: 'warning',
            confirmButtonColor: '#FF9800'
        });
        return;
    }
    
    // Show loading state
    Swal.fire({
        title: 'Processing Order',
        text: 'Please wait...',
        allowOutsideClick: false,
        showConfirmButton: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });

    // Get offer discount if it exists
    let offerDiscount = 0;
    const offerDiscountElement = document.getElementById('offerDiscount');
    if (offerDiscountElement) {
        offerDiscount = parseFloat(offerDiscountElement.textContent.replace('-₹', '').trim()) || 0;
    }
    
    // Get coupon discount if it exists
    let couponDiscount = 0;
    const couponDiscountElement = document.getElementById('couponDiscount');
    if (couponDiscountElement) {
        couponDiscount = parseFloat(couponDiscountElement.textContent.replace('-₹', '').trim()) || 0;
    }

    // Make API call to place order
    fetch('/orders/place-order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            addressId: addressId,
            paymentMethod: paymentMethod
        })
    })
    .then(async response => {
        const data = await response.json();
        
        if (data.success) {
            // Show success message with options
            Swal.fire({
                title: 'Order Placed Successfully!',
                text: 'Thank you for your purchase',
                icon: 'success',
                showCancelButton: true,
                confirmButtonText: 'View Order',
                cancelButtonText: 'Continue Shopping'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = `/orders`;
                } else {
                    window.location.href = '/shop/products';
                }
            });
        } else {
            Swal.fire({
                title: 'Error',
                text: data.message || 'Failed to place order',
                icon: 'error',
                confirmButtonColor: '#FF9800'
            });
        }
    })
    .catch(error => {
        console.error('Error placing order:', error);
        Swal.fire({
            title: 'Error',
            text: 'An unexpected error occurred',
            icon: 'error',
            confirmButtonColor: '#FF9800'
        });
    });
}

async function initiateRazorpayPayment() {
    try {
        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
        
        if (!selectedAddress) {
            throw new Error('Please select a delivery address');
        }

        // Show loading state
        Swal.fire({
            title: 'Processing',
            text: 'Initializing payment...',
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const totalElement = document.getElementById('total');
        const totalText = totalElement.textContent;
        const finalTotal = parseInt(totalText.replace(/[^0-9]/g, '')) || 0;

        const payload = {
            amount: finalTotal,
            addressId: selectedAddress.value
        };

        const response = await fetch('/checkout/razorpay/create-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(payload),
            credentials: 'same-origin'
        });


        // Handle non-OK responses
        if (!response.ok) {
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Server error occurred');
            } else {
                const textError = await response.text();
                console.error('Non-JSON error response:', textError);
                throw new Error('Server error occurred');
            }
        }

        const data = await response.json();
        console.log('Server response:', data);

        if (!data.success || !data.order) {
            throw new Error(data.message || 'Invalid server response');
        }

        // Close loading dialog
        Swal.close();

        // Initialize Razorpay payment
        const options = {
            key: '<%= process.env.RAZORPAY_KEY_ID %>',
            amount: data.order.amount,
            currency: "INR",
            name: "Brewtopia",
            description: "Coffee Order Payment",
            order_id: data.order.id,
            handler: async function(response) {
                await handlePaymentSuccess(response);
            },
            prefill: {
                name: "<%= user.name %>",
                email: "<%= user.email %>",
                contact: "<%= user.phone %>"
            },
            theme: {
                color: "#4A90E2"
            },
            modal: {
                ondismiss: function() {
                    handlePaymentFailure({ message: 'Payment was cancelled by you' });
                }
            }
        };

        console.log('Initializing Razorpay with options:', { ...options, key: 'HIDDEN' });
        const rzp = new Razorpay(options);
        rzp.open();

    } catch (error) {
        console.error('Payment initialization error:', error);
        Swal.close();
        Swal.fire({
            title: 'Error',
            text: error.message || 'Failed to initiate payment',
            icon: 'error',
            confirmButtonColor: '#FF9800'
        });
    }
}

async function handlePaymentSuccess(response) {
    try {
        // Show loading state
        Swal.fire({
            title: 'Verifying Payment',
            text: 'Please wait while we verify your payment...',
            allowOutsideClick: false,
            allowEscapeKey: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            }
        });

        // Get the selected address
        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
        if (!selectedAddress) {
            throw new Error('Please select a delivery address');
        }

        // Verify payment with Razorpay
        const verifyResponse = await fetch('/checkout/razorpay/verify', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_order_id: response.razorpay_order_id,
                razorpay_signature: response.razorpay_signature,
                addressId: selectedAddress.value
            })
        });

        const result = await verifyResponse.json();

        if (result.success) {
            // Payment successful
            window.location.href = `/checkout/razorpay/success/${result.orderId}`;
        } else {
            // Payment failed but order was created
            if (result.orderId) {
                Swal.fire({
                    title: 'Payment Failed',
                    text: result.message || 'Your payment could not be processed',
                    icon: 'error',
                    showCancelButton: true,
                    confirmButtonText: 'View Order',
                    cancelButtonText: 'Try Again',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = `/orders/${result.orderId}`;
                    } else {
                        window.location.reload();
                    }
                });
            } else {
                // Payment failed and no order was created
                Swal.fire({
                    title: 'Payment Failed',
                    text: result.message || 'Your payment could not be processed',
                    icon: 'error',
                    confirmButtonText: 'Try Again'
                }).then(() => {
                    window.location.reload();
                });
            }
        }
    } catch (error) {
        console.error('Payment verification error:', error);
        Swal.fire({
            title: 'Error',
            text: 'An error occurred while verifying your payment. Please try again.',
            icon: 'error',
            confirmButtonText: 'Try Again'
        }).then(() => {
            window.location.reload();
        });
    }
}

function handlePaymentFailure(error) {
    console.log('Payment failure:', error);
    
    // Get the selected address
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    if (!selectedAddress) {
        Swal.fire({
            title: 'Error',
            text: 'Please select a delivery address',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        return;
    }
    
    // Create a failed order
    fetch('/checkout/razorpay/create-failed-order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            addressId: selectedAddress.value,
            failureReason: error.message || 'Payment was cancelled by user'
        })
    })
    .then(response => response.json())
    .then(result => {
        if (result.success && result.orderId) {
            Swal.fire({
                title: 'Payment Failed',
                text: error.message || 'Your payment could not be processed',
                icon: 'error',
                showCancelButton: true,
                confirmButtonText: 'View Order',
                cancelButtonText: 'Try Again',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = `/orders/${result.orderId}`;
                } else {
                    window.location.reload();
                }
            });
        } else {
            Swal.fire({
                title: 'Payment Failed',
                text: error.message || 'Your payment could not be processed',
                icon: 'error',
                confirmButtonText: 'Try Again'
            }).then(() => {
                window.location.reload();
            });
        }
    })
    .catch(err => {
        console.error('Error creating failed order:', err);
        Swal.fire({
            title: 'Payment Failed',
            text: error.message || 'Your payment could not be processed',
            icon: 'error',
            showCancelButton: true,
            confirmButtonText: 'View Orders',
            cancelButtonText: 'Try Again',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/orders';
            } else {
                window.location.reload();
            }
        });
    });
}

document.addEventListener('DOMContentLoaded', function() {
    // Handle address form submission
    const saveAddressBtn = document.getElementById('saveAddressBtn');
    
    saveAddressBtn.addEventListener('click', function() {
        const form = document.getElementById('newAddressForm');
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        // Create form data object
        const formData = {};
        const inputs = form.querySelectorAll('input, textarea, select');
        inputs.forEach(input => {
            formData[input.name] = input.value;
        });
        
        // Show loading state
        saveAddressBtn.disabled = true;
        saveAddressBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
        
        // Log the data being sent (for debugging)
        console.log('Sending address data:', formData);
        
        // Send the data to the server
        fetch('/users/address', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
        .then(response => {
            console.log('Response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('Response data:', data);
            
            if (data.success) {
                // Close modal
                const modal = document.getElementById('addAddressModal');
                const modalInstance = bootstrap.Modal.getInstance(modal);
                modalInstance.hide();
                
                // Show success message
                Swal.fire({
                    title: 'Success!',
                    text: 'Address added successfully',
                    icon: 'success',
                    confirmButtonColor: '#FF9800'
                }).then(() => {
                    // Reload page to show new address
                    window.location.reload();
                });
            } else {
                throw new Error(data.message || 'Failed to add address');
            }
        })
        .catch(error => {
            console.error('Error saving address:', error);
            
            Swal.fire({
                title: 'Error',
                text: error.message || 'Failed to add address',
                icon: 'error',
                confirmButtonColor: '#FF9800'
            });
        })
        .finally(() => {
            // Reset button state
            saveAddressBtn.disabled = false;
            saveAddressBtn.innerHTML = 'Save Address';
        });
    });
});

function applyCoupon(couponCode) {
    fetch('/checkout/apply-coupon', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ couponCode })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Create and show coupon discount row
            const couponContainer = document.getElementById('couponDiscountContainer');
            couponContainer.innerHTML = `
                <div id="couponDiscountRow" class="summary-item d-flex justify-content-between text-success">
                    <span>Coupon Discount</span>
                    <span id="couponDiscount">-₹${data.data.discount}</span>
                </div>
            `;
            
            // Get current values
            const subtotalValue = parseFloat(document.getElementById('subtotal').textContent.replace('₹', '').trim());
            const shippingValue = parseFloat(document.getElementById('shipping').textContent.replace('₹', '').trim());
            const gstValue = parseFloat(document.getElementById('gst').textContent.replace('₹', '').trim());
            
            // Get offer discount if it exists
            let offerDiscountValue = 0;
            const offerDiscountElement = document.getElementById('offerDiscount');
            if (offerDiscountElement) {
                offerDiscountValue = parseFloat(offerDiscountElement.textContent.replace('-₹', '').trim()) || 0;
            }
            
            const couponDiscountValue = data.data.discount;
            
            // Calculate new total
            const newTotal = subtotalValue - offerDiscountValue + shippingValue + gstValue - couponDiscountValue;
            const finalTotal = Math.max(0, Math.round(newTotal));
            
            // Update total
            document.getElementById('total').textContent = `₹${finalTotal}`;
            
            // Show applied coupon message
            document.getElementById('appliedCouponSection').style.display = 'block';
            document.getElementById('appliedCouponMessage').textContent = 
                `${couponCode.toUpperCase()} applied: ₹${data.data.discount} off`;
            
            // Hide coupon modal
            const couponModal = bootstrap.Modal.getInstance(document.getElementById('couponsModal'));
            if (couponModal) couponModal.hide();
        } else {
            alert(data.message);
        }
    })
    .catch(error => {
        console.error('Error applying coupon:', error);
        alert('Failed to apply coupon');
    });
}

function removeCoupon() {
    fetch('/checkout/remove-coupon', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Remove coupon discount row
            document.getElementById('couponDiscountContainer').innerHTML = '';
            
            // Get current values
            const subtotalValue = parseFloat(document.getElementById('subtotal').textContent.replace('₹', '').trim());
            const shippingValue = parseFloat(document.getElementById('shipping').textContent.replace('₹', '').trim());
            const gstValue = parseFloat(document.getElementById('gst').textContent.replace('₹', '').trim());
            
            // Get offer discount if it exists
            let offerDiscountValue = 0;
            const offerDiscountElement = document.getElementById('offerDiscount');
            if (offerDiscountElement) {
                offerDiscountValue = parseFloat(offerDiscountElement.textContent.replace('-₹', '').trim()) || 0;
            }
            
            // Calculate new total without coupon
            const newTotal = subtotalValue - offerDiscountValue + shippingValue + gstValue;
            const finalTotal = Math.max(0, Math.round(newTotal));
            
            // Update total
            document.getElementById('total').textContent = `₹${finalTotal}`;
            
            // Hide applied coupon message
            document.getElementById('appliedCouponSection').style.display = 'none';
        } else {
            alert(data.message);
        }
    })
    .catch(error => {
        console.error('Error removing coupon:', error);
        alert('Failed to remove coupon');
    });
}

// Add event listener for modal show event
document.addEventListener('DOMContentLoaded', function() {
    const couponsModal = document.getElementById('couponsModal');
    if (couponsModal) {
        couponsModal.addEventListener('show.bs.modal', function() {
            console.log('Coupons modal is opening, fetching coupons...');
            fetchAvailableCoupons();
        });
    }
});

// Function to fetch available coupons
async function fetchAvailableCoupons() {
    const couponsContainer = document.getElementById('availableCoupons');
    const loadingSpinner = document.getElementById('couponLoadingSpinner');
    
    try {
        const response = await fetch('/checkout/available-coupons');
        const data = await response.json();
        
        if (data.coupons && data.coupons.length > 0) {
            let couponsHTML = '';
            const cartSubtotal = parseFloat(document.getElementById('subtotal').textContent.replace('₹', '').trim());
            
            data.coupons.forEach(coupon => {
                const isApplicable = !coupon.minimumPurchase || cartSubtotal >= coupon.minimumPurchase;
                const hasReachedLimit = coupon.usedCount >= coupon.usageLimit;
                const userUsageCount = coupon.usedBy.filter(usage => 
                    usage.userId.toString() === '<%= user._id.toString() %>'
                ).length;
                const hasReachedUserLimit = userUsageCount >= coupon.perUserLimit;
                
                const discountText = coupon.discountType === 'percentage' 
                    ? `${coupon.discountAmount}% OFF` 
                    : `₹${coupon.discountAmount} OFF`;

                const isDisabled = !isApplicable || hasReachedLimit || hasReachedUserLimit;
                const disabledReason = !isApplicable ? 'Minimum purchase not met' :
                                     hasReachedLimit ? 'Coupon fully redeemed' :
                                     hasReachedUserLimit ? 'Usage limit reached' : '';
                
                couponsHTML += `
                    <div class="coupon-card mb-3 ${isDisabled ? 'inactive-coupon' : ''}">
                        <div class="coupon-content">
                            <div class="coupon-header">
                                <h6 class="coupon-code">${coupon.code}</h6>
                                <span class="coupon-discount">${discountText}</span>
                            </div>
                            <p class="coupon-description mb-2">${coupon.description || 'Discount on your order'}</p>
                            <div class="coupon-meta">
                                <span class="coupon-validity">Valid till: ${new Date(coupon.endDate).toLocaleDateString()}</span>
                                ${coupon.minimumPurchase ? 
                                    `<span class="coupon-min ${!isApplicable ? 'text-danger' : ''}">
                                        Min purchase: ₹${coupon.minimumPurchase}
                                    </span>` : 
                                    ''}
                                ${hasReachedUserLimit ? 
                                    `<span class="text-danger">
                                        <i class="fas fa-info-circle"></i> You've used this coupon ${userUsageCount}/${coupon.perUserLimit} times
                                    </span>` : 
                                    ''}
                            </div>
                            ${isDisabled ? 
                                `<div class="invalid-coupon-message text-danger mt-2">
                                    <i class="fas fa-exclamation-circle"></i> ${disabledReason}
                                </div>` : 
                                ''}
                        </div>
                        <button class="btn btn-sm ${!isDisabled ? 'btn-primary' : 'btn-secondary'} apply-coupon-btn" 
                                onclick="applyCoupon('${coupon.code}')"
                                ${isDisabled ? 'disabled' : ''}>
                            ${!isDisabled ? 'Apply' : 'Not Available'}
                        </button>
                    </div>
                `;
            });
            
            couponsContainer.innerHTML = couponsHTML;
        } else {
            couponsContainer.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-ticket-alt fa-3x text-muted mb-3"></i>
                    <p class="text-muted">No coupons available at the moment</p>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error fetching coupons:', error);
        couponsContainer.innerHTML = `
            <div class="text-center py-4 text-danger">
                <i class="fas fa-exclamation-circle fa-3x mb-3"></i>
                <p>Failed to load coupons. Please try again.</p>
            </div>
        `;
    } finally {
        if (loadingSpinner) {
            loadingSpinner.style.display = 'none';
        }
    }
}
</script>

<%- include('../partials/footer') %>
