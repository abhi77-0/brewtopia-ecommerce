<%- include('../partials/header') %>

<div class="container-fluid orders-page py-5">
    <!-- Modern Header with Stats -->
    <div class="container">
        <div class="orders-header-card mb-5">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h2 class="display-6 mb-0">My Orders</h2>
                    <p class="text-muted mt-2">Manage and track your orders</p>
                </div>
                <div class="col-md-6">
                    <div class="row g-3">
                        <div class="col-6">
                            <div class="stat-card">
                                <div class="stat-icon">
                                    <i class="fas fa-box"></i>
                                </div>
                                <div class="stat-info">
                                    <h3><%= totalOrders %></h3>
                                    <p>Total Orders</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="stat-card">
                                <div class="stat-icon">
                                    <i class="fas fa-truck"></i>
                                </div>
                                <div class="stat-info">
                                    <h3><%= activeOrders %></h3>
                                    <p>Active Orders</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search Form -->
        <div class="search-section mb-4" data-aos="fade-up">
            <form action="/orders" method="GET" class="search-form">
                <div class="row g-3">
                    <div class="col-md-3">
                        <div class="form-group">
                            <label class="form-label">Order ID</label>
                            <input type="text" name="orderId" class="form-control" placeholder="Search by Order ID" value="<%= query.orderId || '' %>">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label class="form-label">Status</label>
                            <select name="status" class="form-select">
                                <option value="all" <%= !query.status || query.status === 'all' ? 'selected' : '' %>>All Status</option>
                                <option value="Pending" <%= query.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                <option value="Processing" <%= query.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                <option value="Shipped" <%= query.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                <option value="Delivered" <%= query.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                <option value="Cancelled" <%= query.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label class="form-label">Start Date</label>
                            <input type="date" name="startDate" class="form-control" value="<%= query.startDate || '' %>">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label class="form-label">End Date</label>
                            <input type="date" name="endDate" class="form-control" value="<%= query.endDate || '' %>">
                        </div>
                    </div>
                    <div class="col-12 d-flex gap-2">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search me-1"></i>Search
                        </button>
                        <a href="/orders" class="btn btn-secondary">
                            <i class="fas fa-redo me-1"></i>Reset
                        </a>
                    </div>
                </div>
            </form>
        </div>

        <% if (orders && orders.length > 0) { %>
            <!-- Search Results Summary -->
            <div class="search-results-summary mb-3" data-aos="fade-up">
                <p class="text-muted">
                    Showing <%= orders.length %> of <%= filteredCount %> orders
                    <% if (Object.keys(query).length > 0 && query.page === undefined) { %>
                        <span class="ms-2">
                            <a href="/orders" class="text-primary">
                                <i class="fas fa-times me-1"></i>Clear filters
                            </a>
                        </span>
                    <% } %>
                </p>
            </div>

            <!-- Orders List -->
            <div class="orders-container">
                <% orders.forEach(function(order) { %>
                    <div class="order-card" data-aos="fade-up">
                        <div class="status-timeline mb-4">
                            <% 
                            var statuses = ['Pending', 'Processing', 'Shipped', 'Delivered'];
                            
                            if (order.status === 'Cancelled') {
                                // Special handling for cancelled orders
                                if (order.paymentStatus === 'Failed') {
                            %>
                                <div class="alert alert-danger" role="alert">
                                    <i class="fas fa-times-circle me-2"></i> Payment Failed
                                    <div class="mt-2">
                                        <button onclick="retryPayment('<%= order._id %>')" class="btn btn-sm btn-primary">
                                            <i class="fas fa-redo me-1"></i> Retry Payment
                                        </button>
                                    </div>
                                </div>
                            <% } else { %>
                                <div class="alert alert-danger" role="alert">
                                    <i class="fas fa-times-circle me-2"></i> Order Cancelled
                                </div>
                            <% } %>
                            <% } else if (order.status === 'Returned') { %>
                                <div class="alert alert-info" role="alert">
                                    <i class="fas fa-undo-alt me-2"></i> Order Returned
                                </div>
                            <% } else if (order.status === 'Return Requested' || order.status === 'ReturnRequested') { %>
                                <div class="alert alert-warning" role="alert">
                                    <i class="fas fa-hourglass-half me-2"></i> Return Requested
                                </div>
                            <% } else if (order.status === 'Return Accepted' || order.status === 'ReturnAccepted') { %>
                                <div class="alert alert-success" role="alert">
                                    <i class="fas fa-check-circle me-2"></i> Return Accepted
                                </div>
                            <% } else { %>
                                <% var currentIndex = statuses.indexOf(order.status); %>
                                <div class="timeline-track">
                                    <% statuses.forEach(function(status, index) { %>
                                        <div class="timeline-point <%= index <= currentIndex ? 'active' : '' %>">
                                            <div class="point"></div>
                                            <span class="status-text"><%= status %></span>
                                        </div>
                                        <% if (index < statuses.length - 1) { %>
                                            <div class="timeline-line <%= index < currentIndex ? 'active' : '' %>"></div>
                                        <% } %>
                                    <% }); %>
                                </div>
                            <% } %>
                        </div>

                        <!-- Order Info -->
                        <div class="order-info">
                            <div class="order-header mb-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="order-id-container">
                                        <span class="order-label">Order ID</span>
                                        <h5 class="order-id">#<%= order._id.toString().slice(-8).toUpperCase() %></h5>
                                    </div>
                                    <div class="order-status-badge <%= order.status.toLowerCase().replace(' ', '-') %>">
                                        <i class="status-icon fas <%= 
                                            order.status === 'Pending' ? 'fa-clock' : 
                                            order.status === 'Processing' ? 'fa-cog fa-spin' : 
                                            order.status === 'Shipped' ? 'fa-truck' : 
                                            order.status === 'Delivered' ? 'fa-check-circle' : 
                                            'fa-times-circle' 
                                        %>"></i>
                                        <%= order.status %>
                                    </div>
                                </div>
                                <div class="order-date mt-1">
                                    <i class="far fa-calendar-alt me-1"></i>
                                    Ordered on <%= new Date(order.createdAt).toLocaleDateString('en-US', { 
                                        day: 'numeric', 
                                        month: 'short', 
                                        year: 'numeric' 
                                    }) %>
                                </div>
                            </div>

                            <!-- Order Items -->
                            <div class="order-items-container">
                                <% order.items.forEach((item, index) => { %>
                                    <div class="order-item <%= index < order.items.length - 1 ? 'mb-3 pb-3 border-bottom' : '' %>">
                                        <div class="d-flex align-items-center">
                                            <div class="item-image-wrapper me-3">
                                                <img src="<%= item.product.images.image1 %>" 
                                                     alt="<%= item.product.name %>"
                                                     class="item-image">
                                            </div>
                                            <div class="item-details flex-grow-1">
                                                <h6 class="item-name mb-1"><%= item.product.name %></h6>
                                                <div class="item-meta d-flex flex-wrap gap-2 mb-2">
                                                    <span class="variant-badge">
                                                        <i class="fas fa-wine-bottle fa-sm me-1"></i><%= item.variant %>
                                                    </span>
                                                    <% if (item.product.brand) { %>
                                                        <span class="brand-badge">
                                                            <i class="fas fa-tag fa-sm me-1"></i><%= item.product.brand %>
                                                        </span>
                                                    <% } %>
                                                </div>
                                                <div class="item-price-info d-flex justify-content-between align-items-center">
                                                    <span class="quantity text-muted">
                                                        <i class="fas fa-times fa-sm me-1"></i><%= item.quantity %>
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="item-actions ms-2">
                                                <% if ((order.status === 'Pending' || order.status === 'Processing') && order.items.length > 1) { %>
                                                    <button class="btn btn-outline-danger btn-sm delete-product-btn" 
                                                            onclick="deleteOrderProduct('<%= order._id %>', '<%= item.product._id %>')">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                <% } %>
                                                
                                                <% if (order.status === 'Delivered') { %>
                                                    <% if (item.returnStatus === 'pending') { %>
                                                        <span class="badge bg-warning text-dark ms-2">
                                                            <i class="fas fa-hourglass-half me-1"></i>Return Pending
                                                        </span>
                                                    <% } else if (item.returnStatus === 'accepted') { %>
                                                        <span class="badge bg-success ms-2">
                                                            <i class="fas fa-check me-1"></i>Return Accepted
                                                        </span>
                                                    <% } else if (item.returnStatus === 'rejected') { %>
                                                        <span class="badge bg-danger ms-2">
                                                            <i class="fas fa-times me-1"></i>Return Rejected
                                                        </span>
                                                    <% } else { %>
                                                        <button class="btn btn-outline-warning btn-sm ms-2" 
                                                                onclick="initiateReturn('<%= order._id %>', '<%= item.product._id %>', '<%= item._id %>')">
                                                            <i class="fas fa-undo me-1"></i>Return
                                                        </button>
                                                    <% } %>
                                                <% } %>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>

                            <!-- Order Footer with Return Request -->
                            <div class="order-footer mt-3 pt-3 border-top">
                                <div class="d-flex flex-wrap justify-content-between align-items-center">
                                    <div class="delivery-info">
                                        <% if(order.status !== 'Cancelled'){ %>
                                            <% if (order.status === 'Delivered') { %>
                                                <div class="delivered-badge">
                                                    <i class="fas fa-check-circle me-2 text-success"></i>
                                                    <span>
                                                        Delivered on <%= new Date(order.deliveredAt || order.updatedAt || order.createdAt).toLocaleDateString('en-US', { 
                                                            day: 'numeric', 
                                                            month: 'short'
                                                        }) %>
                                                    </span>
                                                </div>
                                            <% } else { %>
                                                <div class="expected-delivery">
                                                    <i class="fas fa-truck me-2"></i>
                                                    <span>Expected by <%= new Date(order.expectedDeliveryDate).toLocaleDateString('en-US', { 
                                                        day: 'numeric', 
                                                        month: 'short'
                                                    }) %></span>
                                                </div>
                                            <% } %>
                                        <% } %>
                                    </div>
                                    <div class="order-actions d-flex flex-wrap gap-2 mt-2 mt-md-0">
                                        <% if (order.status !== 'Cancelled') { %>
                                            <button onclick="viewOrderDetails('<%= order._id %>')" 
                                                    class="btn btn-primary btn-sm">
                                                <i class="fas fa-eye me-1"></i>View Details
                                            </button>
                                        <% } else { %>
                                            <button class="btn btn-secondary btn-sm" disabled>
                                                <i class="fas fa-eye me-1"></i>View Details
                                            </button>
                                        <% } %>
                                        <% if (order.status === 'Processing' || order.status === 'Pending') { %>
                                            <button onclick="cancelOrder('<%= order._id %>')" 
                                                    class="btn btn-danger btn-sm">
                                                <i class="fas fa-times me-1"></i>Cancel Order
                                            </button>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
            
            <!-- Pagination -->
            <% if (totalPages > 1) { %>
                <div class="pagination-container" data-aos="fade-up">
                    <div class="pagination">
                        <% if (hasPrevPage) { %>
                            <a href="/orders?page=<%= prevPage %>" class="page-btn">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        <% } %>

                        <% for(let i = 1; i <= totalPages; i++) { %>
                            <a href="/orders?page=<%= i %>" 
                               class="page-btn <%= currentPage === i ? 'active' : '' %>">
                                <%= i %>
                            </a>
                        <% } %>

                        <% if (hasNextPage) { %>
                            <a href="/orders?page=<%= nextPage %>" class="page-btn">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        <% } %>
                    </div>
                </div>
            <% } %>
        <% } else { %>
            <!-- Empty State -->
            <div class="empty-state" data-aos="fade-up">
                <div class="empty-illustration">
                    <i class="fas fa-shopping-bag"></i>
                </div>
                <h3>No Orders Yet</h3>
                <p>Time to treat yourself! Start shopping and your orders will appear here.</p>
                <a href="/shop/products" class="btn btn-primary btn-lg mt-3">
                    Explore Products
                </a>
            </div>
        <% } %>
    </div>
</div>

<!-- Return Request Modal -->
<div class="modal fade" id="returnModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Return Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="returnForm">
                    <div class="mb-3">
                        <label for="returnReason" class="form-label">Reason for Return</label>
                        <textarea class="form-control" id="returnReason" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitReturn()">Submit Request</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Cancel Order Modal -->
<div class="modal fade" id="cancelOrderModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cancel Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="cancelOrderForm">
                    <div class="mb-3">
                        <label class="form-label">Select Reason for Cancellation</label>
                        <select class="form-select" id="cancelReason" required>
                            <option value="">Choose a reason...</option>
                            <option value="Changed my mind">Changed my mind</option>
                            <option value="Found better price elsewhere">Found better price elsewhere</option>
                            <option value="Ordered by mistake">Ordered by mistake</option>
                            <option value="Shipping time is too long">Shipping time is too long</option>
                            <option value="Payment issues">Payment issues</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3" id="otherReasonDiv" style="display: none;">
                        <label class="form-label">Specify Other Reason</label>
                        <textarea class="form-control" id="otherCancelReason" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" onclick="submitCancelOrder()">Cancel Order</button>
            </div>
        </div>
    </div>
</div>

<style>
:root {
    --primary: #FF9800;
    --primary-light: #FFB74D;
    --primary-dark: #F57C00;
    --primary-bg: #FFF3E0;
    --success: #00C853;
    --warning: #FFB300;
    --danger: #FF3D00;
    --white: #FFFFFF;
    --gray-50: #FAFAFA;
    --gray-100: #F5F5F5;
    --gray-200: #EEEEEE;
    --gray-300: #E0E0E0;
    --gray-600: #757575;
    --gray-700: #616161;
    --gray-800: #424242;
    --gray-900: #212121;
}

.orders-page {
    background: linear-gradient(135deg, var(--gray-50) 0%, var(--white) 100%);
    min-height: 100vh;
}

.orders-header-card {
    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
    border-radius: 20px;
    padding: 2.5rem;
    box-shadow: 0 8px 25px rgba(255, 152, 0, 0.15);
    color: white;
}

.orders-header-card h2 {
    font-weight: 600;
}

.orders-header-card p {
    opacity: 0.9;
}

.stat-card {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 15px;
    padding: 1.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.stat-card:hover {
    transform: translateY(-5px);
    background: rgba(255, 255, 255, 0.15);
}

.stat-icon {
    width: 50px;
    height: 50px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.5rem;
}

.stat-info h3 {
    font-size: 1.75rem;
    margin: 0;
    color: white;
    font-weight: 600;
}

.stat-info p {
    margin: 0;
    color: rgba(255, 255, 255, 0.9);
    font-size: 0.9rem;
}

.order-card {
    background: var(--white);
    border-radius: 20px;
    padding: 2rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 5px 20px rgba(0,0,0,0.05);
    transition: all 0.3s ease;
    border: 1px solid var(--gray-200);
}

.order-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(255, 152, 0, 0.1);
}

.timeline-track {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 1rem;
}

.timeline-point {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    z-index: 1;
}

.point {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: var(--gray-200);
    border: 3px solid var(--white);
    box-shadow: 0 0 0 2px var(--gray-200);
    transition: all 0.3s ease;
}

.timeline-point.active .point {
    background: var(--primary);
    box-shadow: 0 0 0 2px var(--primary-light);
}

.timeline-line {
    flex: 1;
    height: 3px;
    background: var(--gray-200);
    margin: 0 10px;
    transition: all 0.3s ease;
}

.timeline-line.active {
    background: var(--primary);
}

.status-text {
    font-size: 0.85rem;
    color: var(--gray-600);
    font-weight: 500;
}

.timeline-point.active .status-text {
    color: var(--primary);
    font-weight: 600;
}

.order-items {
    background: var(--gray-50);
    border-radius: 15px;
    padding: 1.5rem;
    margin: 1.5rem 0;
}

.order-item {
    background: var(--white);
    border-radius: 12px;
    padding: 1.25rem;
    margin-bottom: 1rem;
    border: 1px solid var(--gray-200);
    transition: all 0.3s ease;
}

.order-item:hover {
    transform: translateX(5px);
    box-shadow: 0 3px 15px rgba(0,0,0,0.05);
}

.item-image-container {
    width: 90px;
    height: 90px;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.item-image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.item-name {
    margin: 0;
    color: var(--gray-800);
}

.item-meta {
    margin-top: 0.5rem;
    display: flex;
    gap: 0.5rem;
}

.variant-badge, .brand-badge {
    padding: 0.35rem 1rem;
    border-radius: 20px;
    font-size: 0.85rem;
    background: var(--primary-bg);
    color: var(--primary-dark);
    font-weight: 500;
}

.brand-badge {
    background: var(--gray-100);
    color: var(--gray-700);
}

.item-price {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0.75rem;
}

.quantity {
    color: var(--gray-600);
    font-size: 0.9rem;
}

.price {
    color: var(--primary);
    font-weight: 600;
    font-size: 1.1rem;
}

.order-footer {
    padding-top: 1.5rem;
    border-top: 1px solid var(--gray-200);
}

.delivery-info {
    color: var(--gray-700);
}

.btn-view-details {
    color: var(--white);
    background: var(--primary);
    border: none;
    border-radius: 25px;
    padding: 0.75rem 1.5rem;
    transition: all 0.3s ease;
    font-weight: 500;
}

.btn-view-details:hover {
    background: var(--primary-dark);
    transform: translateX(5px);
    box-shadow: 0 5px 15px rgba(255, 152, 0, 0.2);
}

.empty-state {
    text-align: center;
    padding: 5rem 2rem;
    background: var(--white);
    border-radius: 20px;
    box-shadow: 0 5px 20px rgba(0,0,0,0.05);
}

.empty-illustration {
    font-size: 5rem;
    color: var(--primary-light);
    margin-bottom: 2rem;
}

.empty-state .btn-primary {
    background: var(--primary);
    border: none;
    padding: 1rem 2rem;
    font-weight: 500;
    transition: all 0.3s ease;
}

.empty-state .btn-primary:hover {
    background: var(--primary-dark);
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(255, 152, 0, 0.2);
}

.pagination-container {
    margin-top: 2rem;
    margin-bottom: 1rem;
    display: flex;
    justify-content: center;
}

.pagination {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    background: var(--white);
    padding: 0.75rem;
    border-radius: 50px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.05);
}

.page-btn {
    min-width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    color: var(--gray-700);
    font-weight: 500;
    transition: all 0.3s ease;
    text-decoration: none;
    background: transparent;
}

.page-btn:hover {
    background: var(--primary-bg);
    color: var(--primary);
}

.page-btn.active {
    background: var(--primary);
    color: white;
}

.page-btn i {
    font-size: 0.9rem;
}

@media (max-width: 768px) {
    .orders-header-card {
        padding: 1.5rem;
    }
    
    .stat-card {
        padding: 1rem;
    }
    
    .stat-icon {
        width: 40px;
        height: 40px;
        font-size: 1.2rem;
    }
    
    .order-card {
        padding: 1.5rem;
    }
    
    .item-image-container {
        width: 70px;
        height: 70px;
    }

    .pagination {
        padding: 0.5rem;
    }

    .page-btn {
        min-width: 35px;
        height: 35px;
        font-size: 0.9rem;
    }
}

.return-status {
    display: inline-block;
}

.return-status .badge {
    font-size: 0.9rem;
    padding: 0.5em 1em;
}

.btn-outline-warning {
    color: #ffc107;
    border-color: #ffc107;
}

.btn-outline-warning:hover {
    color: #000;
    background-color: #ffc107;
    border-color: #ffc107;
}

.modal-content {
    border-radius: 12px;
}

.modal-header {
    border-bottom: 1px solid #dee2e6;
    background-color: #f8f9fa;
    border-radius: 12px 12px 0 0;
}

.modal-footer {
    border-top: 1px solid #dee2e6;
    background-color: #f8f9fa;
    border-radius: 0 0 12px 12px;
}

/* Modern Order Card Styling */
.order-info {
    background-color: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    padding: 1.5rem;
    transition: transform 0.2s, box-shadow 0.2s;
    margin-bottom: 1.5rem;
}

.order-info:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
}

.order-header {
    position: relative;
}

.order-label {
    font-size: 0.8rem;
    color: #6c757d;
    display: block;
}

.order-id {
    font-weight: 600;
    margin: 0;
    color: #343a40;
}

.order-date {
    font-size: 0.85rem;
    color: #6c757d;
}

.order-status-badge {
    padding: 0.35rem 0.75rem;
    border-radius: 50px;
    font-size: 0.85rem;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
}

.order-status-badge.pending {
    background-color: #fff8e1;
    color: #f57c00;
}

.order-status-badge.processing {
    background-color: #e3f2fd;
    color: #1976d2;
}

.order-status-badge.shipped {
    background-color: #e8f5e9;
    color: #388e3c;
}

.order-status-badge.delivered {
    background-color: #e8f5e9;
    color: #388e3c;
}

.order-status-badge.cancelled {
    background-color: #ffebee;
    color: #d32f2f;
}

.status-icon {
    margin-right: 0.5rem;
}

.item-image-wrapper {
    width: 70px;
    height: 70px;
    border-radius: 8px;
    overflow: hidden;
    background-color: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
}

.item-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.item-name {
    font-weight: 600;
    margin-bottom: 0.25rem;
    color: #212529;
}

.variant-badge, .brand-badge {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
}

.variant-badge {
    background-color: #e3f2fd;
    color: #1976d2;
}

.brand-badge {
    background-color: #f3e5f5;
    color: #7b1fa2;
}

.item-price-info {
    margin-top: 0.5rem;
}

.quantity {
    font-size: 0.85rem;
}

.price {
    color: #212529;
}

.order-footer {
    margin-top: 1rem;
}

.delivered-badge {
    display: inline-flex;
    align-items: center;
    font-weight: 500;
}

.expected-delivery {
    display: inline-flex;
    align-items: center;
    color: #6c757d;
    font-size: 0.9rem;
}

.delete-product-btn {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    border-radius: 50%;
}

.order-actions .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.375rem 0.75rem;
    border-radius: 6px;
    font-weight: 500;
}

@media (max-width: 576px) {
    .order-info {
        padding: 1rem;
    }
    
    .order-header {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .order-status-badge {
        margin-top: 0.5rem;
    }
    
    .item-image-wrapper {
        width: 60px;
        height: 60px;
    }
}

/* Add these new styles */
#cancelOrderModal .form-select {
    border-radius: 8px;
    padding: 0.75rem;
    border-color: #dee2e6;
}

#cancelOrderModal .form-select:focus {
    border-color: #FF9800;
    box-shadow: 0 0 0 0.2rem rgba(255, 152, 0, 0.25);
}

#cancelOrderModal textarea {
    border-radius: 8px;
    padding: 0.75rem;
    border-color: #dee2e6;
}

#cancelOrderModal textarea:focus {
    border-color: #FF9800;
    box-shadow: 0 0 0 0.2rem rgba(255, 152, 0, 0.25);
}

/* Add these new styles */
.search-section {
    background: var(--white);
    border-radius: 15px;
    padding: 1.5rem;
    box-shadow: 0 4px 15px rgba(0,0,0,0.05);
}

.search-form .form-control,
.search-form .form-select {
    border-radius: 8px;
    border: 1px solid var(--gray-200);
    padding: 0.6rem 1rem;
    transition: all 0.3s ease;
}

.search-form .form-control:focus,
.search-form .form-select:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 0.2rem rgba(255, 152, 0, 0.25);
}

.search-form .form-label {
    color: var(--gray-700);
    font-weight: 500;
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
}

.search-form .btn {
    padding: 0.6rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

.search-form .btn-primary {
    background: var(--primary);
    border: none;
}

.search-form .btn-primary:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
}

.search-form .btn-secondary {
    background: var(--gray-100);
    border: none;
    color: var(--gray-700);
}

.search-form .btn-secondary:hover {
    background: var(--gray-200);
    transform: translateY(-2px);
}

.search-results-summary {
    font-size: 0.9rem;
}

.search-results-summary a {
    text-decoration: none;
}

.search-results-summary a:hover {
    text-decoration: underline;
}
</style>




<!-- Add this at the bottom of your orders.ejs file, before the closing body tag -->
<script>
function viewOrderDetails(orderId) {
    window.location.href = `/orders/${orderId}`;
}

let currentOrderId = null;

function cancelOrder(orderId) {
    currentOrderId = orderId;
    const cancelModal = new bootstrap.Modal(document.getElementById('cancelOrderModal'));
    cancelModal.show();
}

// Add event listener for the cancel reason select
document.getElementById('cancelReason').addEventListener('change', function() {
    const otherReasonDiv = document.getElementById('otherReasonDiv');
    if (this.value === 'Other') {
        otherReasonDiv.style.display = 'block';
    } else {
        otherReasonDiv.style.display = 'none';
    }
});

function submitCancelOrder() {
    const cancelReason = document.getElementById('cancelReason').value;
    const otherReason = document.getElementById('otherCancelReason').value;
    
    if (!cancelReason) {
        Swal.fire({
            title: 'Error!',
            text: 'Please select a reason for cancellation',
            icon: 'error',
            confirmButtonColor: '#FF9800'
        });
        return;
    }

    if (cancelReason === 'Other' && !otherReason.trim()) {
        Swal.fire({
            title: 'Error!',
            text: 'Please specify the other reason',
            icon: 'error',
            confirmButtonColor: '#FF9800'
        });
        return;
    }

    const finalReason = cancelReason === 'Other' ? otherReason : cancelReason;

    // Hide the modal
    const cancelModal = bootstrap.Modal.getInstance(document.getElementById('cancelOrderModal'));
    cancelModal.hide();

    // Show loading state
    Swal.fire({
        title: 'Processing...',
        text: 'Cancelling your order',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });

    fetch(`/orders/${currentOrderId}/cancel`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ cancelReason: finalReason }),
        credentials: 'same-origin'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                title: 'Cancelled!',
                text: 'Your order has been cancelled.',
                icon: 'success',
                confirmButtonColor: '#FF9800'
            }).then(() => {
                location.reload();
            });
        } else {
            Swal.fire({
                title: 'Error!',
                text: data.message || 'Failed to cancel order',
                icon: 'error',
                confirmButtonColor: '#FF9800'
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'Failed to cancel order',
            icon: 'error',
            confirmButtonColor: '#FF9800'
        });
    });
}

function deleteOrderProduct(orderId, productId) {
    Swal.fire({
        title: 'Remove Product',
        text: "Are you sure you want to remove this product from your order?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#FF9800',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, remove it!'
    }).then((result) => {
        if (result.isConfirmed) {
            // Show loading state
            Swal.fire({
                title: 'Processing...',
                text: 'Removing product from your order',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });
            
            fetch(`/orders/${orderId}/products/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'same-origin'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Removed!',
                        text: 'Product has been removed from your order.',
                        icon: 'success',
                        confirmButtonColor: '#FF9800'
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Error removing product',
                        icon: 'error',
                        confirmButtonColor: '#FF9800'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to remove product',
                    icon: 'error',
                    confirmButtonColor: '#FF9800'
                });
            });
        }
    });
}

function initiateReturn(orderId, productId) {
    console.log(`Initiating return for order ${orderId}, product ${productId}`);
    
    // Store the IDs for submission
    const returnModal = document.getElementById('returnModal');
    returnModal.dataset.orderId = orderId;
    returnModal.dataset.productId = productId;
    
    // Show the modal
    const bsModal = new bootstrap.Modal(returnModal);
    bsModal.show();
}

function submitReturn() {
    // Get the modal element
    const returnModal = document.getElementById('returnModal');
    
    // Get the order ID and product ID from the modal's data attributes
    const orderId = returnModal.dataset.orderId;
    const productId = returnModal.dataset.productId;
    const returnReason = document.getElementById('returnReason').value;
    
    console.log(`Submitting return for order ${orderId}, product ${productId}, reason: ${returnReason}`);
    
    if (!returnReason.trim()) {
        Swal.fire({
            title: 'Error!',
            text: 'Please provide a reason for return',
            icon: 'error',
            confirmButtonColor: '#FF9800'
        });
        return;
    }
    
    // Hide the modal
    const bsModal = bootstrap.Modal.getInstance(returnModal);
    bsModal.hide();
    
    // Show loading state
    Swal.fire({
        title: 'Processing...',
        text: 'Submitting your return request',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });
    
    // Use the correct URL format
    fetch(`/orders/${orderId}/products/${productId}/return`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ returnReason }),
        credentials: 'same-origin'
    })
    .then(response => {
        console.log('Response status:', response.status);
        return response.json();
    })
    .then(data => {
        console.log('Return response:', data);
        if (data.success) {
            Swal.fire({
                title: 'Return Requested!',
                text: 'Your return request has been submitted successfully.',
                icon: 'success',
                confirmButtonColor: '#FF9800'
            }).then(() => {
                location.reload();
            });
        } else {
            Swal.fire({
                title: 'Error!',
                text: data.message || 'Failed to submit return request',
                icon: 'error',
                confirmButtonColor: '#FF9800'
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'Failed to submit return request',
            icon: 'error',
            confirmButtonColor: '#FF9800'
        });
    });
}

function retryPayment(orderId) {
    // Show loading state
    Swal.fire({
        title: 'Processing...',
        text: 'Preparing payment options',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });

    // Fetch order details and initiate payment
    fetch(`/checkout/razorpay/retry/${orderId}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        credentials: 'same-origin'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if (data.success && data.order) {
            // Initialize Razorpay payment
            const options = {
                key: '<%= process.env.RAZORPAY_KEY_ID %>',
                amount: data.order.amount,
                currency: "INR",
                name: "Brewtopia",
                description: "Order Payment Retry",
                order_id: data.order.id,
                handler: function(response) {
                    // Update the order status when payment is successful
                    updateOrderPaymentStatus(orderId, response);
                },
                prefill: {
                    name: "<%= user.name %>",
                    email: "<%= user.email %>",
                    contact: "<%= user.phone %>"
                },
                theme: {
                    color: "#FF9800"
                },
                modal: {
                    ondismiss: function() {
                        Swal.fire({
                            icon: 'error', 
                            title: '<strong style="color: #f44336;">Payment Failed</strong>', 
                            html: `
                                <p style="color: #333; font-size: 16px; font-weight: 400;">
                                    We were unable to process your payment. Please try again or 
                                    <a href="#" style="color: #007bff; text-decoration: underline;">contact support</a> for assistance.
                                </p>
                            `,
                            confirmButtonText: 'Close',
                            confirmButtonColor: '#151D20', 
                            background: '#f9f9f9', 
                            footer: '<a href="#" style="color: #007bff;">Need help? Visit our Help Center</a>', 
                            customClass: {
                                popup: 'swal-custom-popup',
                                confirmButton: 'swal-custom-confirm-button'
                            }
                        });
                    }
                }
            };

            const rzp = new Razorpay(options);
            rzp.open();
        } else {
            throw new Error(data.message || 'Failed to initiate payment');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error',
            text: error.message || 'Failed to initiate payment',
            icon: 'error',
            confirmButtonColor: '#FF9800'
        });
    });
}

// New function to update order payment status
function updateOrderPaymentStatus(orderId, razorpayResponse) {
    // Show loading while updating order status
    Swal.fire({
        title: 'Processing Payment',
        text: 'Please wait while we update your order...',
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false,
        willOpen: () => {
            Swal.showLoading();
        }
    });

    // Send request to update the order status
    fetch(`/orders/${orderId}/update-payment`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            razorpay_payment_id: razorpayResponse.razorpay_payment_id,
            razorpay_order_id: razorpayResponse.razorpay_order_id,
            razorpay_signature: razorpayResponse.razorpay_signature
        })
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            // Redirect to payment success page instead of showing alert
            window.location.href = `/checkout/razorpay/success/${orderId}`;
        } else {
            Swal.fire({
                title: 'Error',
                text: result.message || 'There was an error updating your order.',
                icon: 'error',
                confirmButtonColor: '#FF9800'
            });
        }
    })
    .catch(error => {
        console.error('Error updating order:', error);
        Swal.fire({
            title: 'Error',
            text: 'There was an error updating your order. Please contact support.',
            icon: 'error',
            confirmButtonColor: '#FF9800'
        });
    });
}

function handleRetryPaymentSuccess(response, orderId) {
    // This function is kept for backward compatibility
    updateOrderPaymentStatus(orderId, response);
}

function handleRetryPaymentFailure(orderId, message) {
    Swal.fire({
        title: 'Payment Failed',
        text: message || 'Payment was not completed',
        icon: 'error',
        confirmButtonColor: '#FF9800'
    });
}
</script>

<%- include('../partials/footer') %>