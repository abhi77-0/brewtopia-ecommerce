<%- include('../partials/header') %>

<div class="container py-5">
    <div class="row">
        <!-- Wallet Balance Card -->
        <div class="col-md-4 mb-4">
            <div class="card wallet-balance-card">
                <div class="card-body">
                    <h5 class="card-title">Wallet Balance</h5>
                    <h2 class="balance">₹<%= wallet.balance.toFixed(2) %></h2>
                    <button class="btn btn-primary mt-3" data-bs-toggle="modal" data-bs-target="#addMoneyModal">
                        Add Money
                    </button>
                </div>
            </div>
        </div>

        <!-- Transaction History -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Transaction History</h5>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Description</th>
                                    <th>Type</th>
                                    <th>Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% wallet.transactions.reverse().forEach(transaction => { %>
                                    <tr>
                                        <td><%= new Date(transaction.date).toLocaleDateString() %></td>
                                        <td><%= transaction.description %></td>
                                        <td>
                                            <span class="badge <%= transaction.type === 'credit' ? 'bg-success' : 'bg-danger' %>">
                                                <%= transaction.type.toUpperCase() %>
                                            </span>
                                        </td>
                                        <td class="<%= transaction.type === 'credit' ? 'text-success' : 'text-danger' %>">
                                            <%= transaction.type === 'credit' ? '+' : '-' %>₹<%= transaction.amount.toFixed(2) %>
                                        </td>
                                    </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Money Modal -->
<div class="modal fade" id="addMoneyModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Money to Wallet</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addMoneyForm">
                    <div class="mb-3">
                        <label class="form-label">Amount (₹)</label>
                        <input type="number" class="form-control" name="amount" min="1" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Proceed to Pay</button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
.wallet-balance-card {
    background: linear-gradient(45deg, #FF9800, #F57C00);
    color: white;
}

.balance {
    font-size: 2.5rem;
    margin: 0;
}

.table td, .table th {
    vertical-align: middle;
}
</style>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
document.getElementById('addMoneyForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const amount = e.target.amount.value;

    try {
        // Create Razorpay order
        const orderResponse = await fetch('/wallet/create-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ amount })
        });

        const orderData = await orderResponse.json();

        if (!orderData.success) {
            throw new Error(orderData.message);
        }

        // Initialize Razorpay payment
        const options = {
            key: orderData.key_id,
            amount: orderData.order.amount,
            currency: orderData.order.currency,
            order_id: orderData.order.id,
            name: 'Brewtopia Wallet',
            description: 'Add Money to Wallet',
            handler: async function (response) {
                try {
                    // Verify payment and update wallet
                    const verifyResponse = await fetch('/wallet/verify-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature,
                            amount: amount
                        })
                    });

                    const verifyData = await verifyResponse.json();

                    if (verifyData.success) {
                        // Close modal and show success message
                        bootstrap.Modal.getInstance(document.getElementById('addMoneyModal')).hide();
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Money added to wallet successfully',
                            confirmButtonColor: '#FF9800'
                        }).then(() => {
                            location.reload(); // Refresh to show updated balance
                        });
                    } else {
                        throw new Error(verifyData.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: error.message || 'Failed to verify payment',
                        confirmButtonColor: '#FF9800'
                    });
                }
            },
            prefill: {
                name: '<%= user.name %>',
                email: '<%= user.email %>',
                contact: '<%= user.phone %>'
            },
            theme: {
                color: '#FF9800'
            }
        };

        const rzp = new Razorpay(options);
        rzp.open();

    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message || 'Failed to create payment',
            confirmButtonColor: '#FF9800'
        });
    }
});
</script>

<%- include('../partials/footer') %> 