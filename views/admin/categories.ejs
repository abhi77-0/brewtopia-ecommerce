<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Brewtopia Admin</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #FF9800;
            --primary-dark: #F57C00;
            --secondary: #5D4037;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --border: #dee2e6;
            --card-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --sidebar-width: 260px;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            color: var(--dark);
        }
        
        /* Admin layout */
        .admin-layout {
            display: flex;
            min-height: 100vh;
        }
        
        /* Main Content Styles */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            padding: 2rem;
            transition: all 0.3s;
        }
        
        /* Page Header */
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding: 1rem 0;
        }
        
        .page-title {
            font-size: 1.75rem;
            font-weight: 600;
            color: var(--secondary);
            margin: 0;
        }
        
        /* Category Card */
        .category-card {
            background: white;
            border-radius: 12px;
            box-shadow: var(--card-shadow);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            height: 100%;
            border: none;
        }
        
        .category-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }
        
        .category-card .card-body {
            padding: 1.5rem;
        }
        
        .category-card .card-title {
            color: var(--secondary);
            margin-bottom: 1rem;
            font-size: 1.25rem;
            font-weight: 600;
        }
        
        .category-card .badge {
            font-size: 0.85rem;
            padding: 0.5rem 0.75rem;
            border-radius: 6px;
            font-weight: 500;
        }
        
        .category-card .action-buttons {
            margin-top: 1.5rem;
            display: flex;
            gap: 0.75rem;
        }
        
        .category-card .btn-action {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            flex: 1;
            justify-content: center;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        
        .category-card .btn-action:hover {
            transform: translateY(-2px);
        }
        
        .category-card .btn-action i {
            font-size: 1rem;
        }
        
        /* Grid Layout */
        .categories-row {
            --bs-gutter-x: 2rem;
            --bs-gutter-y: 2rem;
        }
        
        /* Modal Styles */
        .modal-content {
            border-radius: 12px;
            border: none;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }
        
        .modal-header {
            background: var(--secondary);
            color: white;
            border-bottom: none;
            padding: 1.5rem;
        }
        
        .modal-title {
            font-weight: 600;
        }
        
        .btn-close {
            filter: brightness(0) invert(1);
        }
        
        .modal-body {
            padding: 2rem;
        }
        
        .form-label {
            font-weight: 500;
            color: var(--secondary);
            margin-bottom: 0.5rem;
        }
        
        .form-control {
            border-radius: 8px;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border);
            font-size: 0.95rem;
        }
        
        .form-control:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(255, 152, 0, 0.1);
        }
        
        .modal-footer {
            border-top: 1px solid var(--border);
            padding: 1.5rem;
        }
        
        /* Button Styles */
        .btn-primary {
            background-color: var(--primary);
            border-color: var(--primary);
        }
        
        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
        }
        
        .btn-outline-primary {
            color: var(--primary);
            border-color: var(--primary);
        }
        
        .btn-outline-primary:hover {
            background-color: var(--primary);
            border-color: var(--primary);
            color: white;
        }
        
        .btn-outline-warning {
            color: #FF9800;
            border-color: #FF9800;
        }
        
        .btn-outline-warning:hover {
            background-color: #FF9800;
            border-color: #FF9800;
            color: white;
        }
        
        .btn-outline-success {
            color: #4CAF50;
            border-color: #4CAF50;
        }
        
        .btn-outline-success:hover {
            background-color: #4CAF50;
            border-color: #4CAF50;
            color: white;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 1rem;
            }
            
            .page-header {
                flex-direction: column;
                gap: 1rem;
            }
            
            .categories-row {
                --bs-gutter-x: 1rem;
                --bs-gutter-y: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="admin-layout">
        <!-- Include the sidebar partial -->
        <%- include('./partials/sidebar') %>
        
        <!-- Main Content -->
        <div class="main-content">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h4 class="page-title">Categories Management</h4>
            </div>
            
            <div class="container-fluid p-0">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h5>Manage Categories</h5>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCategoryModal">
                        <i class="fas fa-plus me-2"></i>Add New Category
                    </button>
                </div>

                <div class="row categories-row g-4">
                    <!-- Add debug information -->
                    <% console.log('Categories passed to view:', categories); %>
                    <% console.log('Categories length:', categories ? categories.length : 0); %>
                    
                    <% if (categories && categories.length > 0) { %>
                        <% categories.forEach(category => { %>
                            <!-- Add debug for each category -->
                            <% console.log('Processing category:', category); %>
                            <div class="col-md-6 col-lg-4">
                                <div class="category-card card" data-category-id="<%= category._id %>">
                                    <div class="card-body">
                                        <h5 class="card-title mb-0"><%= category.name %></h5>
                                        <span class="badge bg-primary">
                                            <%= category.productCount || 0 %> Products
                                        </span>
                                        <div class="action-buttons">
                                            <button class="btn btn-outline-primary btn-action" onclick="editCategory('<%= category._id %>')">
                                                <i class="fas fa-edit"></i> Edit
                                            </button>
                                            <button class="btn <%= category.isVisible ? 'btn-outline-warning' : 'btn-outline-success' %> btn-action" 
                                                    onclick="toggleVisibility('<%= category._id %>', <%= category.isVisible %>)">
                                                <i class="fas <%= category.isVisible ? 'fa-eye-slash' : 'fa-eye' %>"></i>
                                                <%= category.isVisible ? 'Hide' : 'Show' %>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="col-12 text-center py-5">
                            <i class="fas fa-list fa-3x mb-3 text-muted"></i>
                            <p class="text-muted">No categories found. Add your first category!</p>
                            <!-- Add debug information -->
                            <p class="text-muted">Debug: Categories array is <%= categories ? 'defined' : 'undefined' %></p>
                            <p class="text-muted">Debug: Categories length is <%= categories ? categories.length : 'N/A' %></p>
                        </div>
                    <% } %>
                    
                    <!-- Pagination Controls -->
                    <% if (pagination && pagination.totalPages > 1) { %>
                        <div class="col-12 mt-4">
                            <nav aria-label="Category pagination">
                                <ul class="pagination justify-content-center">
                                    <!-- Previous button -->
                                    <li class="page-item <%= pagination.page === 1 ? 'disabled' : '' %>">
                                        <a class="page-link" href="?page=<%= pagination.page - 1 %>" aria-label="Previous">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>
                                    
                                    <!-- Page numbers -->
                                    <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                                        <li class="page-item <%= pagination.page === i ? 'active' : '' %>">
                                            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                                        </li>
                                    <% } %>
                                    
                                    <!-- Next button -->
                                    <li class="page-item <%= pagination.page === pagination.totalPages ? 'disabled' : '' %>">
                                        <a class="page-link" href="?page=<%= pagination.page + 1 %>" aria-label="Next">
                                            <span aria-hidden="true">&raquo;</span>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Category Modal -->
    <div class="modal fade" id="addCategoryModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Category</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addCategoryForm">
                        <div class="mb-3">
                            <label class="form-label">Category Name</label>
                            <input type="text" name="name" class="form-control" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" form="addCategoryForm" class="btn btn-primary">Add Category</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Category Modal -->
    <div class="modal fade" id="editCategoryModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Category</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editCategoryForm">
                        <input type="hidden" name="categoryId">
                        <div class="mb-3">
                            <label class="form-label">Category Name</label>
                            <input type="text" name="name" class="form-control" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" form="editCategoryForm" class="btn btn-primary">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Make sure SweetAlert2 is included -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // Add Category Form Submit
        document.getElementById('addCategoryForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            try {
                const formData = new FormData(e.target);
                const response = await fetch('/admin/categories/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name: formData.get('name')
                    })
                });

                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || 'Failed to add category');
                }

                // Show success message
                await Swal.fire({
                    title: 'Success!',
                    text: 'Category added successfully',
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false
                });

                // Create and append new category card
                const newCategory = data.category;
                const categoriesRow = document.querySelector('.categories-row');
                const noCategories = document.querySelector('.categories-row .col-12.text-center');
                
                if (noCategories) {
                    noCategories.remove();
                }

                const categoryCard = `
                    <div class="col-md-6 col-lg-4">
                        <div class="category-card card" data-category-id="${newCategory._id}">
                            <div class="card-body">
                                <h5 class="card-title mb-0">${newCategory.name}</h5>
                                <span class="badge bg-primary">
                                    0 Products
                                </span>
                                <div class="action-buttons">
                                    <button class="btn btn-outline-primary btn-action" onclick="editCategory('${newCategory._id}')">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="btn btn-outline-warning btn-action" 
                                            onclick="toggleVisibility('${newCategory._id}', true)">
                                        <i class="fas fa-eye-slash"></i> Hide
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                categoriesRow.insertAdjacentHTML('afterbegin', categoryCard);

                // Reset form and close modal
                e.target.reset();
                bootstrap.Modal.getInstance(document.getElementById('addCategoryModal')).hide();
            } catch (error) {
                Swal.fire({
                    title: 'Error!',
                    text: error.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        });

        // Edit Category
        async function editCategory(id) {
            try {
                // Show loading
                Swal.fire({
                    title: 'Loading...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch(`/admin/categories/${id}`);
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to fetch category');
                }
                
                const category = await response.json();
                Swal.close();
                
                // Fill the edit form
                const form = document.getElementById('editCategoryForm');
                form.categoryId.value = category._id;
                form.name.value = category.name;

                // Show modal
                const modal = new bootstrap.Modal(document.getElementById('editCategoryModal'));
                modal.show();
            } catch (error) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Error loading category details: ' + error.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }

        // Edit Category Form Submit
        document.getElementById('editCategoryForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const form = e.target;
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalBtnText = submitBtn.innerHTML;
            
            try {
                // Show loading state
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                
                const formData = new FormData(form);
                const categoryId = formData.get('categoryId');
                
                const response = await fetch('/admin/categories/edit', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        categoryId: categoryId,
                        name: formData.get('name')
                    })
                });

                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || 'Failed to update category');
                }

                // Update the category card in the UI
                const updatedCategory = data.category;
                const categoryCard = document.querySelector(`[data-category-id="${categoryId}"]`);
                
                if (categoryCard) {
                    // Update the category name
                    categoryCard.querySelector('.card-title').textContent = updatedCategory.name;
                }

                // Show success message
                await Swal.fire({
                    title: 'Success!',
                    text: 'Category updated successfully',
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false
                });

                // Close modal
                bootstrap.Modal.getInstance(document.getElementById('editCategoryModal')).hide();
            } catch (error) {
                Swal.fire({
                    title: 'Error!',
                    text: error.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            } finally {
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalBtnText;
            }
        });

        // Toggle visibility function
        async function toggleVisibility(id, currentVisibility) {
            const categoryCard = document.querySelector(`[data-category-id="${id}"]`);
            const visibilityButton = categoryCard.querySelector('.btn-outline-warning, .btn-outline-success');
            const originalButtonHtml = visibilityButton.innerHTML;
            
            try {
                const action = currentVisibility ? 'hide' : 'show';

                // Show confirmation dialog
                const result = await Swal.fire({
                    title: `${action.charAt(0).toUpperCase() + action.slice(1)} Category?`,
                    text: `Are you sure you want to ${action} this category?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: `Yes, ${action} it!`,
                    cancelButtonText: 'Cancel',
                    confirmButtonColor: currentVisibility ? '#ffc107' : '#28a745',
                    cancelButtonColor: '#6c757d'
                });

                if (result.isConfirmed) {
                    // Show loading state
                    visibilityButton.disabled = true;
                    visibilityButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';

                    const response = await fetch(`/admin/categories/${id}/toggle-visibility`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ isVisible: !currentVisibility })
                    });
                    
                    const data = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(data.error || `Failed to ${action} category`);
                    }

                    // Update the UI
                    const newVisibility = !currentVisibility;
                    
                    // Update button class and onclick
                    visibilityButton.className = `btn ${newVisibility ? 'btn-outline-warning' : 'btn-outline-success'} btn-action`;
                    visibilityButton.setAttribute('onclick', `toggleVisibility('${id}', ${newVisibility})`);
                    
                    // Update icon and text and re-enable button
                    visibilityButton.disabled = false;
                    visibilityButton.innerHTML = `
                        <i class="fas ${newVisibility ? 'fa-eye-slash' : 'fa-eye'}"></i>
                        ${newVisibility ? 'Hide' : 'Show'}
                    `;
                    
                    // Show success message
                    await Swal.fire({
                        title: 'Success!',
                        text: `Category ${currentVisibility ? 'hidden' : 'shown'} successfully`,
                        icon: 'success',
                        timer: 1500,
                        showConfirmButton: false
                    });
                }
            } catch (error) {
                // Restore original button state
                visibilityButton.disabled = false;
                visibilityButton.innerHTML = originalButtonHtml;
                
                Swal.fire({
                    title: 'Error!',
                    text: error.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }
    </script>
</body>
</html> 