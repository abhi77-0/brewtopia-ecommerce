<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Brewtopia Admin</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        :root {
            --primary: #FF9800;
            --primary-dark: #F57C00;
            --secondary: #5D4037;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --border: #dee2e6;
            --card-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --sidebar-width: 260px;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            color: var(--dark);
        }
        
        /* Admin layout */
        .admin-layout {
            display: flex;
            min-height: 100vh;
        }
        
        /* Main Content Styles */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            padding: 2rem;
            transition: all 0.3s;
        }
        
        /* Page Header */
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding: 1rem 0;
        }
        
        .page-title {
            font-size: 1.75rem;
            font-weight: 600;
            color: var(--secondary);
            margin: 0;
        }
        
        /* Product Card */
        .product-card {
            background: white;
            border-radius: 12px;
            box-shadow: var(--card-shadow);
            margin-bottom: 2rem;
            overflow: hidden;
        }
        
        .product-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 8px;
            border: 1px solid var(--border);
        }
        
        .variant-badge {
            display: inline-block;
            padding: 0.35rem 0.75rem;
            border-radius: 6px;
            margin-bottom: 0.25rem;
            font-size: 0.85rem;
            font-weight: 500;
        }
        
        .btn-action {
            width: 36px;
            height: 36px;
            padding: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin-right: 0.25rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        
        .btn-action:hover {
            transform: translateY(-2px);
        }
        
        .image-preview {
            width: 100%;
            height: 120px;
            border: 2px dashed var(--border);
            border-radius: 8px;
            margin-top: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            background-size: cover;
            background-position: center;
            color: var(--gray);
            transition: all 0.3s ease;
        }
        
        .image-preview.has-image {
            border: none;
            color: transparent;
        }
        
        /* Table Styles */
        .table {
            margin-bottom: 0;
        }
        
        .table thead th {
            background: var(--light);
            color: var(--secondary);
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
            padding: 1rem;
            border: none;
        }
        
        .table tbody tr {
            transition: all 0.3s ease;
        }
        
        .table tbody tr:hover {
            background-color: rgba(255, 152, 0, 0.05);
        }
        
        .table td {
            padding: 1rem;
            vertical-align: middle;
            border-bottom: 1px solid var(--border);
        }
        
        /* Modal Styles */
        .modal-content {
            border-radius: 12px;
            border: none;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }
        
        .modal-header {
            background: var(--secondary);
            color: white;
            border-bottom: none;
            padding: 1.5rem;
        }
        
        .modal-title {
            font-weight: 600;
        }
        
        .btn-close {
            filter: brightness(0) invert(1);
        }
        
        .modal-body {
            padding: 2rem;
        }
        
        .form-label {
            font-weight: 500;
            color: var(--secondary);
            margin-bottom: 0.5rem;
        }
        
        .form-control, .form-select {
            border-radius: 8px;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border);
            font-size: 0.95rem;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(255, 152, 0, 0.1);
        }
        
        .modal-footer {
            border-top: 1px solid var(--border);
            padding: 1.5rem;
        }
        
        /* Button Styles */
        .btn-primary {
            background-color: var(--primary);
            border-color: var(--primary);
        }
        
        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 1rem;
            }
            
            .page-header {
                flex-direction: column;
                gap: 1rem;
            }
            
            .table-responsive {
                border-radius: 8px;
            }
        }
    </style>
</head>
<body>
    <div class="admin-layout">
        <%- include('./partials/sidebar') %>

        <!-- Main Content -->
        <div class="main-content">
            <div class="container-fluid">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1>Products Management</h1>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProductModal">
                        <i class="fas fa-plus me-2"></i>Add New Product
                    </button>
                </div>

                <div class="product-card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Image</th>
                                        <th>Name</th>
                                        <th>Category</th>
                                        <th>Variants</th>
                                        <th>Status</th>
                                        <th>Visibility</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% if (products && products.length > 0) { %>
                                        <% products.forEach(product => { %>
                                            <tr class="<%= !product.isVisible ? 'table-secondary' : '' %>">
                                                <td>
                                                    <img src="<%= product.images.image1 || 'https://res.cloudinary.com/dr0bl807r/image/upload/v1/brewtopia/placeholder.jpg' %>" 
                                                         alt="<%= product.name %>" 
                                                         class="product-image">
                                                </td>
                                                <td>
                                                    <% if (!product.isVisible) { %>
                                                        <span class="badge bg-secondary">Hidden</span>
                                                    <% } %>
                                                    <%= product.name %>
                                                </td>

                                                <td><%= product.category ? product.category.name : 'Uncategorized' %></td>
                                                <td>
                                                    <% if (product.variants && product.variants['500ml']) { %>
                                                        <div class="variant-badge bg-info text-white">
                                                            500ml - ₹<%= product.variants['500ml'].price || 0 %>
                                                            <small>(Stock: <%= product.variants['500ml'].stock || 0 %>)</small>
                                                        </div>
                                                    <% } %>
                                                    <% if (product.variants && product.variants['650ml']) { %>
                                                        <div class="variant-badge bg-primary text-white">
                                                            650ml - ₹<%= product.variants['650ml'].price || 0 %>
                                                            <small>(Stock: <%= product.variants['650ml'].stock || 0 %>)</small>
                                                        </div>
                                                    <% } %>
                                                </td>
                                                <td>
                                                    <span class="badge <%= product.isVisible ? 'bg-success' : 'bg-danger' %>">
                                                        <%= product.isVisible ? 'Active' : 'Inactive' %>
                                                    </span>
                                                </td>
                                                <td>
                                                    <form action="/admin/products/toggle-visibility/<%= product._id %>" method="POST" class="d-inline visibility-toggle-form">
                                                        <button type="submit" class="btn btn-sm <%= product.isVisible ? 'btn-outline-danger' : 'btn-outline-success' %>">
                                                            <i class="fas <%= product.isVisible ? 'fa-eye-slash' : 'fa-eye' %>"></i>
                                                            <%= product.isVisible ? 'Hide' : 'Show' %>
                                                        </button>
                                                    </form>
                                                </td>
                                                <td>
                                                    <button class="btn btn-info btn-action" onclick="editProduct('<%= product._id %>')">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        <% }); %>
                                    <% } else { %>
                                        <tr>
                                            <td colspan="6" class="text-center py-4">
                                                <i class="fas fa-beer fa-3x mb-3 text-muted d-block"></i>
                                                <p class="text-muted">No products found. Add your first product!</p>
                                            </td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                            
                            <!-- Pagination Controls -->
                            <% if (pagination && pagination.totalPages > 1) { %>
                                <nav aria-label="Product pagination" class="mt-4">
                                    <ul class="pagination justify-content-center">
                                        <!-- Previous button -->
                                        <li class="page-item <%= pagination.page === 1 ? 'disabled' : '' %>">
                                            <a class="page-link" href="?page=<%= pagination.page - 1 %>" aria-label="Previous">
                                                <span aria-hidden="true">&laquo;</span>
                                            </a>
                                        </li>
                                        
                                        <!-- Page numbers -->
                                        <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                                            <li class="page-item <%= pagination.page === i ? 'active' : '' %>">
                                                <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                                            </li>
                                        <% } %>
                                        
                                        <!-- Next button -->
                                        <li class="page-item <%= pagination.page === pagination.totalPages ? 'disabled' : '' %>">
                                            <a class="page-link" href="?page=<%= pagination.page + 1 %>" aria-label="Next">
                                                <span aria-hidden="true">&raquo;</span>
                                            </a>
                                        </li>
                                    </ul>
                                </nav>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Product Modal -->
    <div class="modal fade" id="addProductModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addProductForm" enctype="multipart/form-data">
                        <div class="row mb-4">
                            <!-- Product Name -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Product Name</label>
                                <input type="text" name="name" class="form-control">
                                <div class="invalid-feedback">Product name must be at least 3 characters long</div>
                            </div>
                            
                            <!-- Category -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Category</label>
                                <select name="category" class="form-control">
                                    <option value="">Select Category</option>
                                    <% categories.forEach(function(category) { %>
                                        <option value="<%= category._id %>"><%= category.name %></option>
                                    <% }); %>
                                </select>
                                <div class="invalid-feedback">Please select a category</div>
                            </div>

                            <!-- Brand -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Brand</label>
                                <select name="brand" class="form-control">
                                    <option value="">Select Brand</option>
                                    <option value="kingfisher">Kingfisher</option>
                                    <option value="heineken">Heineken</option>
                                    <option value="budweiser">Budweiser</option>
                                    <option value="corona">Corona</option>
                                    <option value="carlsberg">Carlsberg</option>
                                </select>
                                <div class="invalid-feedback">Please select a brand</div>
                            </div>

                            <!-- Description -->
                            <div class="col-12 mb-3">
                                <label class="form-label">Description</label>
                                <textarea name="description" class="form-control" rows="3"></textarea>
                                <div class="invalid-feedback">Description must be at least 10 characters long</div>
                            </div>
                        </div>

                        <!-- Product Images -->
                        <div class="row mb-4">
                            <h6 class="mb-3">Product Images</h6>
                            <div class="col-md-4">
                                <label class="form-label">Image 1</label>
                                <input type="file" name="image1" class="form-control" accept="image/*">
                                <div class="invalid-feedback">Main product image is required</div>
                                <div class="image-preview mt-2"></div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Image 2</label>
                                <input type="file" name="image2" class="form-control" accept="image/*">
                                <div class="image-preview mt-2"></div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Image 3</label>
                                <input type="file" name="image3" class="form-control" accept="image/*">
                                <div class="image-preview mt-2"></div>
                            </div>
                        </div>

                        <!-- Variants -->
                        <div class="row mb-4">
                            <h6 class="mb-3">Product Variants</h6>
                            <!-- 500ml Variant -->
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-body">
                                        <h6>500ml Variant</h6>
                                        <div class="mb-3">
                                            <label class="form-label">Price (₹)</label>
                                            <input type="number" name="price500ml" class="form-control">
                                            <div class="invalid-feedback">Price must be greater than 0</div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Stock</label>
                                            <input type="number" name="stock500ml" class="form-control">
                                            <div class="invalid-feedback">Stock cannot be negative</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- 650ml Variant -->
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-body">
                                        <h6>650ml Variant</h6>
                                        <div class="mb-3">
                                            <label class="form-label">Price (₹)</label>
                                            <input type="number" name="price650ml" class="form-control">
                                            <div class="invalid-feedback">Price must be greater than 0</div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Stock</label>
                                            <input type="number" name="stock650ml" class="form-control">
                                            <div class="invalid-feedback">Stock cannot be negative</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Add Product</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Product Modal -->
    <div class="modal fade" id="editProductModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editProductForm" enctype="multipart/form-data">
                        <input type="hidden" name="productId">
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Product Name</label>
                                    <input type="text" name="name" class="form-control">
                                    <div class="invalid-feedback">Product name must be at least 3 characters long</div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Category</label>
                                    <select name="category" class="form-control">
                                        <option value="">Select Category</option>
                                        <% if (categories && categories.length > 0) { %>
                                            <% categories.forEach(function(category) { %>
                                                <option value="<%= category._id %>"><%= category.name %></option>
                                            <% }); %>
                                        <% } else { %>
                                            <option value="" disabled>No categories available</option>
                                        <% } %>
                                    </select>
                                    <div class="invalid-feedback">Please select a category</div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Brand</label>
                                    <select name="brand" class="form-control">
                                        <option value="">Select Brand</option>
                                        <option value="kingfisher">Kingfisher</option>
                                        <option value="heineken">Heineken</option>
                                        <option value="budweiser">Budweiser</option>
                                        <option value="corona">Corona</option>
                                        <option value="carlsberg">Carlsberg</option>
                                    </select>
                                    <div class="invalid-feedback">Please select a brand</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea name="description" class="form-control" rows="5"></textarea>
                                    <div class="invalid-feedback">Description must be at least 10 characters long</div>
                                </div>
                            </div>
                        </div>

                        <!-- Product Images -->
                        <div class="row mb-4">
                            <h6>Product Images</h6>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Main Image</label>
                                    <input type="file" name="image1" class="form-control" accept="image/*">
                                    <div class="invalid-feedback">Please select a main image</div>
                                    <div class="image-preview" id="preview1Edit">
                                        <i class="fas fa-image"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Second Image</label>
                                    <input type="file" name="image2" class="form-control" accept="image/*">
                                    <div class="image-preview" id="preview2Edit">
                                        <i class="fas fa-image"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Third Image</label>
                                    <input type="file" name="image3" class="form-control" accept="image/*">
                                    <div class="image-preview" id="preview3Edit">
                                        <i class="fas fa-image"></i>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Variants -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="variant-section">
                                    <h6>500ml Variant</h6>
                                    <div class="mb-3">
                                        <label class="form-label">Price (₹)</label>
                                        <input type="number" name="price500ml" step="0.01" class="form-control">
                                        <div class="invalid-feedback">Price must be greater than 0</div>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Stock</label>
                                        <input type="number" name="stock500ml" class="form-control">
                                        <div class="invalid-feedback">Stock cannot be negative</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="variant-section">
                                    <h6>650ml Variant</h6>
                                    <div class="mb-3">
                                        <label class="form-label">Price (₹)</label>
                                        <input type="number" name="price650ml" step="0.01" class="form-control">
                                        <div class="invalid-feedback">Price must be greater than 0</div>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Stock</label>
                                        <input type="number" name="stock650ml" class="form-control">
                                        <div class="invalid-feedback">Stock cannot be negative</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Edit Product function
        async function editProduct(id) {
            try {
                const response = await fetch(`/admin/products/${id}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to fetch product details');
                }

                const product = await response.json();
                
                // Fill the edit form
                const form = document.getElementById('editProductForm');
                
                // Set the product ID
                form.querySelector('input[name="productId"]').value = product._id;
                
                // Set basic fields
                form.querySelector('input[name="name"]').value = product.name || '';
                form.querySelector('select[name="category"]').value = product.category?._id || '';
                form.querySelector('select[name="brand"]').value = product.brand || '';
                form.querySelector('textarea[name="description"]').value = product.description || '';
                
                // Set variant details
                if (product.variants) {
                    if (product.variants['500ml']) {
                        form.querySelector('input[name="price500ml"]').value = product.variants['500ml'].price || '';
                        form.querySelector('input[name="stock500ml"]').value = product.variants['500ml'].stock || '';
                    }
                    
                    if (product.variants['650ml']) {
                        form.querySelector('input[name="price650ml"]').value = product.variants['650ml'].price || '';
                        form.querySelector('input[name="stock650ml"]').value = product.variants['650ml'].stock || '';
                    }
                }
                
                // Show image previews
                if (product.images) {
                    if (product.images.image1) {
                        const preview1 = document.getElementById('preview1Edit');
                        preview1.style.backgroundImage = `url(${product.images.image1})`;
                        preview1.classList.add('has-image');
                    }
                    
                    if (product.images.image2) {
                        const preview2 = document.getElementById('preview2Edit');
                        preview2.style.backgroundImage = `url(${product.images.image2})`;
                        preview2.classList.add('has-image');
                    }
                    
                    if (product.images.image3) {
                        const preview3 = document.getElementById('preview3Edit');
                        preview3.style.backgroundImage = `url(${product.images.image3})`;
                        preview3.classList.add('has-image');
                    }
                }
                
                // Update modal title
                document.querySelector('#editProductModal .modal-title').textContent = 'Edit Product';
                
                // Show the modal
                const modal = new bootstrap.Modal(document.getElementById('editProductModal'));
                modal.show();
            } catch (error) {
                console.error('Error fetching product details:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to fetch product details'
                });
            }
        }
        
        // Validation functions
        function validateProductForm(formData, form) {
            const errors = [];
            let isValid = true;
            
            // Reset all invalid states
            form.querySelectorAll('.is-invalid').forEach(element => {
                element.classList.remove('is-invalid');
            });

            // Product Name validation
            const nameInput = form.querySelector('input[name="name"]');
            if (!formData.get('name') || formData.get('name').trim().length < 3) {
                nameInput.classList.add('is-invalid');
                errors.push('Product name must be at least 3 characters long');
                isValid = false;
            }
            
            // Category validation
            const categorySelect = form.querySelector('select[name="category"]');
            if (!formData.get('category')) {
                categorySelect.classList.add('is-invalid');
                errors.push('Please select a category');
                isValid = false;
            }
            
            // Brand validation
            const brandSelect = form.querySelector('select[name="brand"]');
            if (!formData.get('brand')) {
                brandSelect.classList.add('is-invalid');
                errors.push('Please select a brand');
                isValid = false;
            }
            
            // Description validation
            const descriptionInput = form.querySelector('textarea[name="description"]');
            if (!formData.get('description') || formData.get('description').trim().length < 10) {
                descriptionInput.classList.add('is-invalid');
                errors.push('Description must be at least 10 characters long');
                isValid = false;
            }
            
            // Image validation for new product
            const image1Input = form.querySelector('input[name="image1"]');
            if (form.id === 'addProductForm' && (!image1Input.files || !image1Input.files[0])) {
                image1Input.classList.add('is-invalid');
                errors.push('Main product image is required');
                isValid = false;
            }
            
            return { isValid, errors };
        }

        // Edit Product Form Submit
        document.getElementById('editProductForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const form = this;
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            const formData = new FormData(form);
            const productId = formData.get('productId');

            // Validate form
            const { isValid } = validateProductForm(formData, form);
            if (!isValid) {
                return;
            }

            try {
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                submitBtn.disabled = true;
                
                // Prepare variants data
                const variants = {};
                const price500ml = formData.get('price500ml');
                const stock500ml = formData.get('stock500ml');
                const price650ml = formData.get('price650ml');
                const stock650ml = formData.get('stock650ml');

                if (price500ml && price500ml.trim() !== '') {
                    variants['500ml'] = {
                        price: parseFloat(price500ml) || 0,
                        stock: parseInt(stock500ml) || 0
                    };
                }

                if (price650ml && price650ml.trim() !== '') {
                    variants['650ml'] = {
                        price: parseFloat(price650ml) || 0,
                        stock: parseInt(stock650ml) || 0
                    };
                }

                formData.set('variants', JSON.stringify(variants));
                
                const response = await fetch(`/admin/products/edit/${productId}`, {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (response.ok && data.success) {
                    // Show success message
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: data.message || 'Product updated successfully',
                        showConfirmButton: false,
                        timer: 1500
                    });

                    // Update the table row
                    const product = data.product;
                    const tbody = document.querySelector('table tbody');
                    const rows = tbody.querySelectorAll('tr');
                    
                    for (const row of rows) {
                        if (row.querySelector(`button[onclick*="${productId}"]`)) {
                            // Get the selected category name from the form
                            const categorySelect = document.querySelector('#editProductForm select[name="category"]');
                            const selectedOption = categorySelect.options[categorySelect.selectedIndex];
                            const categoryName = selectedOption.text || 'Uncategorized';

                            row.innerHTML = `
                                <td>
                                    <img src="${product.images.image1 || 'https://res.cloudinary.com/dr0bl807r/image/upload/v1/brewtopia/placeholder.jpg'}" 
                                         alt="${product.name}" 
                                         class="product-image">
                                </td>
                                <td>
                                    ${!product.isVisible ? '<span class="badge bg-secondary">Hidden</span>' : ''}
                                    ${product.name}
                                </td>
                                <td>${categoryName}</td>
                                <td>
                                    ${product.variants && product.variants['500ml'] ? `
                                        <div class="variant-badge bg-info text-white">
                                            500ml - ₹${product.variants['500ml'].price || 0}
                                            <small>(Stock: ${product.variants['500ml'].stock || 0})</small>
                                        </div>
                                    ` : ''}
                                    ${product.variants && product.variants['650ml'] ? `
                                        <div class="variant-badge bg-primary text-white">
                                            650ml - ₹${product.variants['650ml'].price || 0}
                                            <small>(Stock: ${product.variants['650ml'].stock || 0})</small>
                                        </div>
                                    ` : ''}
                                </td>
                                <td>
                                    <span class="badge ${product.isVisible ? 'bg-success' : 'bg-danger'}">
                                        ${product.isVisible ? 'Active' : 'Inactive'}
                                    </span>
                                </td>
                                <td>
                                    <form action="/admin/products/toggle-visibility/${product._id}" method="POST" class="d-inline visibility-toggle-form">
                                        <button type="submit" class="btn btn-sm ${product.isVisible ? 'btn-outline-danger' : 'btn-outline-success'}">
                                            <i class="fas ${product.isVisible ? 'fa-eye-slash' : 'fa-eye'}"></i>
                                            ${product.isVisible ? 'Hide' : 'Show'}
                                        </button>
                                    </form>
                                </td>
                                <td>
                                    <button class="btn btn-info btn-action" onclick="editProduct('${product._id}')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                </td>
                            `;
                            break;
                        }
                    }

                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editProductModal'));
                    modal.hide();
                } else {
                    throw new Error(data.error || 'Failed to update product');
                }
            } catch (error) {
                console.error('Error updating product:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: error.message || 'Failed to update product'
                });
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });

        // Image preview functionality
        function setupImagePreviews() {
            document.querySelectorAll('input[type="file"]').forEach(input => {
                input.addEventListener('change', function(e) {
                    const preview = this.parentElement.querySelector('.image-preview');
                    if (preview && this.files && this.files[0]) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            preview.style.backgroundImage = `url(${e.target.result})`;
                            preview.classList.add('has-image');
                        }
                        reader.readAsDataURL(this.files[0]);
                    }
                });
            });
        }

        // Initialize image previews
        setupImagePreviews();

        // Add Product Form Submit
        document.getElementById('addProductForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const form = this;
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            const formData = new FormData(form);

            // Validate form
            const { isValid } = validateProductForm(formData, form);
            if (!isValid) {
                return; // Stop form submission if validation fails
            }

            try {
                // Show loading state
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
                submitBtn.disabled = true;

                // Validate and prepare variants data
                const variants = {};
                const price500ml = formData.get('price500ml');
                const stock500ml = formData.get('stock500ml');
                const price650ml = formData.get('price650ml');
                const stock650ml = formData.get('stock650ml');

                // Only add variants if they have valid prices
                if (price500ml && price500ml.trim() !== '') {
                    variants['500ml'] = {
                        price: parseFloat(price500ml) || 0,
                        stock: parseInt(stock500ml) || 0
                    };
                }

                if (price650ml && price650ml.trim() !== '') {
                    variants['650ml'] = {
                        price: parseFloat(price650ml) || 0,
                        stock: parseInt(stock650ml) || 0
                    };
                }

                // Add variants to formData
                formData.set('variants', JSON.stringify(variants));

                const response = await fetch('/admin/products/add', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (response.ok && data.success) {
                    // Show success message
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: data.message || 'Product added successfully',
                        showConfirmButton: false,
                        timer: 1500
                    });

                    // Update the UI
                    const product = data.product;
                    const tbody = document.querySelector('table tbody');
                    const noProductsRow = tbody.querySelector('tr td[colspan="7"]');
                    
                    if (noProductsRow) {
                        tbody.innerHTML = ''; // Remove the "No products found" message
                    }

                    // Create new row
                    const newRow = document.createElement('tr');
                    newRow.setAttribute('data-product-id', product._id);
                    newRow.className = product.isVisible ? '' : 'table-secondary';

                    // Get the selected category name from the form
                    const categorySelect = document.querySelector('#addProductForm select[name="category"]');
                    const selectedOption = categorySelect.options[categorySelect.selectedIndex];
                    const categoryName = selectedOption.text || 'Uncategorized';

                    newRow.innerHTML = `
                        <td>
                            <img src="${product.images.image1 || 'https://res.cloudinary.com/dr0bl807r/image/upload/v1/brewtopia/placeholder.jpg'}" 
                                 alt="${product.name}" 
                                 class="product-image">
                        </td>
                        <td>
                            ${!product.isVisible ? '<span class="badge bg-secondary">Hidden</span>' : ''}
                            ${product.name}
                        </td>
                        <td>${categoryName}</td>
                        <td>
                            ${product.variants && product.variants['500ml'] ? `
                                <div class="variant-badge bg-info text-white">
                                    500ml - ₹${product.variants['500ml'].price || 0}
                                    <small>(Stock: ${product.variants['500ml'].stock || 0})</small>
                                </div>
                            ` : ''}
                            ${product.variants && product.variants['650ml'] ? `
                                <div class="variant-badge bg-primary text-white">
                                    650ml - ₹${product.variants['650ml'].price || 0}
                                    <small>(Stock: ${product.variants['650ml'].stock || 0})</small>
                                </div>
                            ` : ''}
                        </td>
                        <td>
                            <span class="badge ${product.isVisible ? 'bg-success' : 'bg-danger'}">
                                ${product.isVisible ? 'Active' : 'Inactive'}
                            </span>
                        </td>
                        <td>
                            <form action="/admin/products/toggle-visibility/${product._id}" method="POST" class="d-inline visibility-toggle-form">
                                <button type="submit" class="btn btn-sm ${product.isVisible ? 'btn-outline-danger' : 'btn-outline-success'}">
                                    <i class="fas ${product.isVisible ? 'fa-eye-slash' : 'fa-eye'}"></i>
                                    ${product.isVisible ? 'Hide' : 'Show'}
                                </button>
                            </form>
                        </td>
                        <td>
                            <button class="btn btn-info btn-action" onclick="editProduct('${product._id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                        </td>
                    `;
                    
                    // Insert the new row at the beginning of the table
                    tbody.insertBefore(newRow, tbody.firstChild);

                    // Close modal and reset form
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addProductModal'));
                    modal.hide();
                    this.reset();
                } else {
                    throw new Error(data.error || 'Failed to add product');
                }

            } catch (error) {
                console.error('Error adding product:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: error.message || 'Failed to add product'
                });
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });

        // Add event listener for visibility toggle forms
        document.addEventListener('DOMContentLoaded', function() {
            const visibilityForms = document.querySelectorAll('.visibility-toggle-form');
            
            visibilityForms.forEach(form => {
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const formAction = this.getAttribute('action');
                    const row = this.closest('tr');
                    const button = this.querySelector('button');
                    const statusBadge = row.querySelector('td:nth-child(5) .badge');
                    const nameCell = row.querySelector('td:nth-child(2)');
                    
                    try {
                        // Show loading state
                        button.disabled = true;
                        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                        
                        const response = await fetch(formAction, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                        
                        const data = await response.json();
                        
                        if (response.ok && data.success) {
                            // Get current visibility state from the row's class
                            const currentlyVisible = !row.classList.contains('table-secondary');
                            // Toggle the visibility state
                            const isVisible = !currentlyVisible;
                            
                            // Update row class
                            row.className = isVisible ? '' : 'table-secondary';
                            
                            // Update status badge
                            statusBadge.className = `badge ${isVisible ? 'bg-success' : 'bg-danger'}`;
                            statusBadge.textContent = isVisible ? 'Active' : 'Inactive';
                            
                            // Update visibility toggle button
                            button.className = `btn btn-sm ${isVisible ? 'btn-outline-danger' : 'btn-outline-success'}`;
                            button.innerHTML = `
                                <i class="fas ${isVisible ? 'fa-eye-slash' : 'fa-eye'}"></i>
                                ${isVisible ? 'Hide' : 'Show'}
                            `;
                            
                            // Update hidden badge in name cell
                            const hiddenBadgeHtml = !isVisible ? '<span class="badge bg-secondary">Hidden</span> ' : '';
                            const productName = nameCell.textContent.trim().replace(/Hidden/g, '').trim();
                            nameCell.innerHTML = hiddenBadgeHtml + productName;

                            // Show success message
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: data.message || 'Product visibility updated',
                                showConfirmButton: false,
                                timer: 1500
                            });
                        } else {
                            throw new Error(data.error || 'Failed to update product visibility');
                        }
                    } catch (error) {
                        console.error('Error updating product visibility:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: error.message || 'Failed to update product visibility'
                        });
                        
                        // Restore button state on error
                        button.innerHTML = `
                            <i class="fas ${row.classList.contains('table-secondary') ? 'fa-eye' : 'fa-eye-slash'}"></i>
                            ${row.classList.contains('table-secondary') ? 'Show' : 'Hide'}
                        `;
                    } finally {
                        button.disabled = false;
                    }
                });
            });
        });

        // Real-time validation
        function setupRealTimeValidation() {
            const forms = ['addProductForm', 'editProductForm'];
            
            forms.forEach(formId => {
                const form = document.getElementById(formId);
                if (!form) return;

                // Name validation
                const nameInput = form.querySelector('input[name="name"]');
                if (nameInput) {
                    nameInput.addEventListener('input', function() {
                        if (this.value.trim().length < 3) {
                            this.classList.add('is-invalid');
                            this.nextElementSibling.style.display = 'block';
                        } else {
                            this.classList.remove('is-invalid');
                            this.nextElementSibling.style.display = 'none';
                        }
                    });
                }

                // Category and Brand validation
                const selects = form.querySelectorAll('select[name="category"], select[name="brand"]');
                selects.forEach(select => {
                    select.addEventListener('change', function() {
                        if (!this.value) {
                            this.classList.add('is-invalid');
                            this.nextElementSibling.style.display = 'block';
                        } else {
                            this.classList.remove('is-invalid');
                            this.nextElementSibling.style.display = 'none';
                        }
                    });
                });

                // Description validation
                const descriptionInput = form.querySelector('textarea[name="description"]');
                if (descriptionInput) {
                    descriptionInput.addEventListener('input', function() {
                        if (this.value.trim().length < 10) {
                            this.classList.add('is-invalid');
                            this.nextElementSibling.style.display = 'block';
                        } else {
                            this.classList.remove('is-invalid');
                            this.nextElementSibling.style.display = 'none';
                        }
                    });
                }

                // Image validation
                if (formId === 'addProductForm') {
                    const imageInput = form.querySelector('input[name="image1"]');
                    if (imageInput) {
                        imageInput.addEventListener('change', function() {
                            if (!this.files || !this.files[0]) {
                                this.classList.add('is-invalid');
                                this.nextElementSibling.style.display = 'block';
                            } else {
                                this.classList.remove('is-invalid');
                                this.nextElementSibling.style.display = 'none';
                            }
                        });
                    }
                }
            });
        }

        // Initialize real-time validation
        document.addEventListener('DOMContentLoaded', function() {
            setupRealTimeValidation();
        });
    </script>
</body>
</html> 