<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Brewtopia Admin</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        :root {
            --primary-color: #5D4037;
            --secondary-color: #8D6E63;
            --accent-color: #FF9800;
            --light-bg: #f8f9fa;
            --dark-text: #343a40;
            --card-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --sidebar-width: 260px;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            color: var(--dark-text);
        }
        
        /* Admin layout */
        .admin-layout {
            display: flex;
            min-height: 100vh;
        }
        
        /* Main Content Styles */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            padding: 2rem;
            transition: all 0.3s;
        }
        
        /* Product specific styles */
        .product-card {
            background: white;
            border-radius: 10px;
            box-shadow: var(--card-shadow);
            margin-bottom: 2rem;
        }
        
        .product-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 5px;
        }
        
        .variant-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            margin-bottom: 0.25rem;
            font-size: 0.8rem;
        }
        
        .btn-action {
            width: 36px;
            height: 36px;
            padding: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin-right: 0.25rem;
        }
        
        .image-preview {
            width: 100%;
            height: 120px;
            border: 1px dashed #ccc;
            border-radius: 5px;
            margin-top: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            background-size: cover;
            background-position: center;
            color: #aaa;
        }
        
        .image-preview.has-image {
            border: none;
            color: transparent;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
            }
        }
    </style>
</head>
<body>
    <div class="admin-layout">
        <%- include('./partials/sidebar') %>

        <!-- Main Content -->
        <div class="main-content">
            <div class="container-fluid">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1>Products Management</h1>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProductModal">
                        <i class="fas fa-plus me-2"></i>Add New Product
                    </button>
                </div>

                <div class="product-card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light">
                                    <tr>
                                        <th>Image</th>
                                        <th>Name</th>
                                        <th>Category</th>
                                        <th>Variants</th>
                                        <th>Status</th>
                                        <th>Visibility</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% products.forEach(product => { %>
                                        <tr>
                                            <td>
                                                <img src="<%= product.images?.image1 || '/images/placeholder.png' %>" alt="<%= product.name %>" class="img-thumbnail" style="width: 60px; height: 60px; object-fit: cover;">
                                            </td>
                                            <td><%= product.name %></td>
                                            <td>
                                                <% if (product.category) { %>
                                                    <% if (typeof product.category === 'object' && product.category.name) { %>
                                                        <%= product.category.name %>
                                                    <% } else { %>
                                                        <% const foundCategory = categories.find(cat => cat._id.toString() === product.category.toString()) %>
                                                        <%= foundCategory ? foundCategory.name : 'Unknown Category' %>
                                                    <% } %>
                                                <% } else { %>
                                                    No Category
                                                <% } %>
                                            </td>
                                            <td>
                                                <% if (product.variants) { %>
                                                    <% if (product.variants['500ml']) { %>
                                                        <span class="badge bg-info text-dark">
                                                            500ml - ₹<%= product.variants['500ml'].price %> (Stock: <%= product.variants['500ml'].stock %>)
                                                        </span>
                                                    <% } %>
                                                    <% if (product.variants['650ml']) { %>
                                                        <span class="badge bg-primary">
                                                            650ml - ₹<%= product.variants['650ml'].price %> (Stock: <%= product.variants['650ml'].stock %>)
                                                        </span>
                                                    <% } %>
                                                <% } else { %>
                                                    No variants
                                                <% } %>
                                            </td>
                                            <td>
                                                <% if (product.isDeleted) { %>
                                                    <span class="badge bg-danger">Deleted</span>
                                                <% } else if (!product.isVisible) { %>
                                                    <span class="badge bg-warning text-dark">Inactive</span>
                                                <% } else { %>
                                                    <span class="badge bg-success">Active</span>
                                                <% } %>
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-sm <%= product.isVisible ? 'btn-danger' : 'btn-success' %>" 
                                                        onclick="confirmToggleVisibility('<%= product._id %>', '<%= product.name %>', <%= product.isVisible %>)">
                                                    <i class="fas <%= product.isVisible ? 'fa-eye-slash' : 'fa-eye' %>"></i>
                                                    <%= product.isVisible ? 'Hide' : 'Show' %>
                                                </button>
                                            </td>
                                            <td>
                                                <button class="btn btn-info btn-sm" onclick="editProduct('<%= product._id %>')">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-danger btn-sm" onclick="deleteProduct('<%= product._id %>', '<%= product.name %>')">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    <% }) %>
                                    <% if (products.length === 0) { %>
                                        <tr>
                                            <td colspan="7" class="text-center py-4">
                                                <div class="alert alert-info mb-0">
                                                    <i class="fas fa-info-circle me-2"></i> No products found
                                                </div>
                                            </td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Product Modal -->
    <div class="modal fade" id="addProductModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addProductForm" enctype="multipart/form-data">
                        <div class="row mb-4">
                            <!-- Product Name -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Product Name</label>
                                <input type="text" name="name" class="form-control" required>
                            </div>
                            
                            <!-- Category -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Category</label>
                                <select name="category" class="form-control" required>
                                    <option value="">Select Category</option>
                                    <% categories.forEach(function(category) { %>
                                        <option value="<%= category._id %>"><%= category.name %></option>
                                    <% }); %>
                                </select>
                            </div>

                            <!-- Brand -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Brand</label>
                                <select name="brand" class="form-control" required>
                                    <option value="">Select Brand</option>
                                    <option value="kingfisher">Kingfisher</option>
                                    <option value="heineken">Heineken</option>
                                    <option value="budweiser">Budweiser</option>
                                    <option value="corona">Corona</option>
                                    <option value="carlsberg">Carlsberg</option>
                                </select>
                            </div>

                            <!-- Description -->
                            <div class="col-12 mb-3">
                                <label class="form-label">Description</label>
                                <textarea name="description" class="form-control" rows="3" required></textarea>
                            </div>
                        </div>

                        <!-- Product Images -->
                        <div class="row mb-4">
                            <h6 class="mb-3">Product Images</h6>
                            <div class="col-md-4">
                                <label class="form-label">Image 1</label>
                                <input type="file" name="image1" class="form-control" accept="image/*" required>
                                <div class="image-preview mt-2"></div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Image 2</label>
                                <input type="file" name="image2" class="form-control" accept="image/*">
                                <div class="image-preview mt-2"></div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Image 3</label>
                                <input type="file" name="image3" class="form-control" accept="image/*">
                                <div class="image-preview mt-2"></div>
                            </div>
                        </div>

                        <!-- Variants -->
                        <div class="row mb-4">
                            <h6 class="mb-3">Product Variants</h6>
                            <!-- 500ml Variant -->
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-body">
                                        <h6>500ml Variant</h6>
                                        <div class="mb-3">
                                            <label class="form-label">Price (₹)</label>
                                            <input type="number" name="price500ml" class="form-control" required>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Stock</label>
                                            <input type="number" name="stock500ml" class="form-control" required>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- 650ml Variant -->
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-body">
                                        <h6>650ml Variant</h6>
                                        <div class="mb-3">
                                            <label class="form-label">Price (₹)</label>
                                            <input type="number" name="price650ml" class="form-control" required>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Stock</label>
                                            <input type="number" name="stock650ml" class="form-control" required>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Add Product</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Product Modal -->
    <div class="modal fade" id="editProductModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editProductForm" enctype="multipart/form-data">
                        <input type="hidden" name="productId">
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Product Name</label>
                                    <input type="text" name="name" class="form-control" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Category</label>
                                    <select name="category" class="form-control" required>
                                        <option value="">Select Category</option>
                                        <% if (categories && categories.length > 0) { %>
                                            <% categories.forEach(function(category) { %>
                                                <option value="<%= category._id %>"><%= category.name %></option>
                                            <% }); %>
                                        <% } else { %>
                                            <option value="" disabled>No categories available</option>
                                        <% } %>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Brand</label>
                                    <select name="brand" class="form-control" required>
                                        <option value="">Select Brand</option>
                                        <option value="kingfisher">Kingfisher</option>
                                        <option value="heineken">Heineken</option>
                                        <option value="budweiser">Budweiser</option>
                                        <option value="corona">Corona</option>
                                        <option value="carlsberg">Carlsberg</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea name="description" class="form-control" rows="5" required></textarea>
                                </div>
                            </div>
                        </div>

                        <!-- Product Images -->
                        <div class="row mb-4">
                            <h6>Product Images</h6>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Main Image</label>
                                    <input type="file" name="image1" class="form-control" accept="image/*">
                                    <div class="image-preview" id="preview1Edit">
                                        <i class="fas fa-image"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Second Image</label>
                                    <input type="file" name="image2" class="form-control" accept="image/*">
                                    <div class="image-preview" id="preview2Edit">
                                        <i class="fas fa-image"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Third Image</label>
                                    <input type="file" name="image3" class="form-control" accept="image/*">
                                    <div class="image-preview" id="preview3Edit">
                                        <i class="fas fa-image"></i>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Variants -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="variant-section">
                                    <h6>500ml Variant</h6>
                                    <div class="mb-3">
                                        <label class="form-label">Price (₹)</label>
                                        <input type="number" name="price500ml" step="0.01" class="form-control" required>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Stock</label>
                                        <input type="number" name="stock500ml" class="form-control" required>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="variant-section">
                                    <h6>650ml Variant</h6>
                                    <div class="mb-3">
                                        <label class="form-label">Price (₹)</label>
                                        <input type="number" name="price650ml" step="0.01" class="form-control" required>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Stock</label>
                                        <input type="number" name="stock650ml" class="form-control" required>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Setup validation for both forms
            setupFormValidation('addProductForm');
            setupFormValidation('editProductForm');
            
            // Setup image previews
            setupImagePreviews();
        });
        
        // Setup validation for a specific form
        function setupFormValidation(formId) {
            const form = document.getElementById(formId);
            if (!form) return;
            
            // Remove HTML5 validation attributes
            form.querySelectorAll('input, select, textarea').forEach(field => {
                field.removeAttribute('required');
                field.removeAttribute('min');
                field.removeAttribute('minlength');
            });
            
            // Add submit event listener
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Clear previous validation errors
                clearAllErrors(form);
                
                // Validate form
                if (validateForm(form)) {
                    // If validation passes, submit the form
                    const isAddForm = formId === 'addProductForm';
                    submitProductForm(form, isAddForm ? 'add' : 'edit');
                }
            });
            
            // Add blur event listeners for real-time validation
            form.querySelectorAll('input, select, textarea').forEach(field => {
                field.addEventListener('blur', function() {
                    // Only validate if the field has been interacted with
                    if (this.value.trim() !== '') {
                        validateField(this, form);
                    }
                });
                
                // Clear error when user starts typing
                field.addEventListener('input', function() {
                    clearFieldError(this);
                });
            });
        }
        
        // Validate entire form
        function validateForm(form) {
            let isValid = true;
            
            // Validate product name
            const nameField = form.querySelector('[name="name"]');
            if (!nameField.value.trim()) {
                showError(nameField, 'Please enter a product name');
                isValid = false;
            } else if (nameField.value.trim().length < 3) {
                showError(nameField, 'Product name must be at least 3 characters');
                isValid = false;
            }
            
            // Validate category
            const categoryField = form.querySelector('[name="category"]');
            if (!categoryField.value) {
                showError(categoryField, 'Please select a category');
                isValid = false;
            }
            
            // Validate brand
            const brandField = form.querySelector('[name="brand"]');
            if (!brandField.value) {
                showError(brandField, 'Please select a brand');
                isValid = false;
            }
            
            // Validate description
            const descField = form.querySelector('[name="description"]');
            if (!descField.value.trim()) {
                showError(descField, 'Please enter a product description');
                isValid = false;
            } else if (descField.value.trim().length < 10) {
                showError(descField, 'Description must be at least 10 characters');
                isValid = false;
            }
            
            // Validate 500ml variant
            const price500Field = form.querySelector('[name="price500ml"]');
            const stock500Field = form.querySelector('[name="stock500ml"]');
            
            if (!price500Field.value.trim()) {
                showError(price500Field, 'Please enter a price for 500ml variant');
                isValid = false;
            } else if (isNaN(parseFloat(price500Field.value)) || parseFloat(price500Field.value) <= 0) {
                showError(price500Field, 'Please enter a valid price (greater than 0)');
                isValid = false;
            }
            
            if (!stock500Field.value.trim()) {
                showError(stock500Field, 'Please enter stock quantity for 500ml variant');
                isValid = false;
            } else if (isNaN(parseInt(stock500Field.value)) || parseInt(stock500Field.value) < 0) {
                showError(stock500Field, 'Stock must be a non-negative number');
                isValid = false;
            }
            
            // Validate 650ml variant
            const price650Field = form.querySelector('[name="price650ml"]');
            const stock650Field = form.querySelector('[name="stock650ml"]');
            
            if (!price650Field.value.trim()) {
                showError(price650Field, 'Please enter a price for 650ml variant');
                isValid = false;
            } else if (isNaN(parseFloat(price650Field.value)) || parseFloat(price650Field.value) <= 0) {
                showError(price650Field, 'Please enter a valid price (greater than 0)');
                isValid = false;
            }
            
            if (!stock650Field.value.trim()) {
                showError(stock650Field, 'Please enter stock quantity for 650ml variant');
                isValid = false;
            } else if (isNaN(parseInt(stock650Field.value)) || parseInt(stock650Field.value) < 0) {
                showError(stock650Field, 'Stock must be a non-negative number');
                isValid = false;
            }
            
            // Validate image1 for new products only
            if (form.id === 'addProductForm') {
                const image1Field = form.querySelector('[name="image1"]');
                if (!image1Field.files || !image1Field.files[0]) {
                    showError(image1Field, 'Please upload a main product image');
                    isValid = false;
                }
            }
            
            // Focus the first invalid field
            if (!isValid) {
                const firstInvalid = form.querySelector('.is-invalid');
                if (firstInvalid) {
                    firstInvalid.focus();
                }
            }
            
            return isValid;
        }
        
        // Validate a single field
        function validateField(field, form) {
            const name = field.getAttribute('name');
            let isValid = true;
            
            switch (name) {
                case 'name':
                    if (!field.value.trim()) {
                        showError(field, 'Please enter a product name');
                        isValid = false;
                    } else if (field.value.trim().length < 3) {
                        showError(field, 'Product name must be at least 3 characters');
                        isValid = false;
                    }
                    break;
                    
                case 'category':
                    if (!field.value) {
                        showError(field, 'Please select a category');
                        isValid = false;
                    }
                    break;
                    
                case 'brand':
                    if (!field.value) {
                        showError(field, 'Please select a brand');
                        isValid = false;
                    }
                    break;
                    
                case 'description':
                    if (!field.value.trim()) {
                        showError(field, 'Please enter a product description');
                        isValid = false;
                    } else if (field.value.trim().length < 10) {
                        showError(field, 'Description must be at least 10 characters');
                        isValid = false;
                    }
                    break;
                    
                case 'price500ml':
                    if (!field.value.trim()) {
                        showError(field, 'Please enter a price for 500ml variant');
                        isValid = false;
                    } else if (isNaN(parseFloat(field.value)) || parseFloat(field.value) <= 0) {
                        showError(field, 'Please enter a valid price (greater than 0)');
                        isValid = false;
                    }
                    break;
                    
                case 'price650ml':
                    if (!field.value.trim()) {
                        showError(field, 'Please enter a price for 650ml variant');
                        isValid = false;
                    } else if (isNaN(parseFloat(field.value)) || parseFloat(field.value) <= 0) {
                        showError(field, 'Please enter a valid price (greater than 0)');
                        isValid = false;
                    }
                    break;
                    
                case 'stock500ml':
                    if (!field.value.trim()) {
                        showError(field, 'Please enter stock quantity for 500ml variant');
                        isValid = false;
                    } else if (isNaN(parseInt(field.value)) || parseInt(field.value) < 0) {
                        showError(field, 'Stock must be a non-negative number');
                        isValid = false;
                    }
                    break;
                    
                case 'stock650ml':
                    if (!field.value.trim()) {
                        showError(field, 'Please enter stock quantity for 650ml variant');
                        isValid = false;
                    } else if (isNaN(parseInt(field.value)) || parseInt(field.value) < 0) {
                        showError(field, 'Stock must be a non-negative number');
                        isValid = false;
                    }
                    break;
                    
                case 'image1':
                    if (form.id === 'addProductForm' && (!field.files || !field.files[0])) {
                        showError(field, 'Please upload a main product image');
                        isValid = false;
                    }
                    break;
            }
            
            return isValid;
        }
        
        // Show error message for a field
        function showError(field, message) {
            // Add error class to the field
            field.classList.add('is-invalid');
            
            // Create error message element if it doesn't exist
            let errorElement = field.nextElementSibling;
            if (!errorElement || !errorElement.classList.contains('invalid-feedback')) {
                errorElement = document.createElement('div');
                errorElement.className = 'invalid-feedback';
                field.parentNode.insertBefore(errorElement, field.nextSibling);
            }
            
            // Set error message
            errorElement.textContent = message;
        }
        
        // Clear error for a specific field
        function clearFieldError(field) {
            field.classList.remove('is-invalid');
            const errorElement = field.nextElementSibling;
            if (errorElement && errorElement.classList.contains('invalid-feedback')) {
                errorElement.remove();
            }
        }
        
        // Clear all errors in a form
        function clearAllErrors(form) {
            form.querySelectorAll('.is-invalid').forEach(field => {
                clearFieldError(field);
            });
        }
        
        // Submit the form with proper data formatting
        function submitProductForm(form, action) {
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            
            // Show loading state
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ' + (action === 'add' ? 'Adding...' : 'Saving...');
            submitBtn.disabled = true;
            
            // Prepare variants data
            const variants = {
                '500ml': {
                    price: parseFloat(form.querySelector('[name="price500ml"]').value),
                    stock: parseInt(form.querySelector('[name="stock500ml"]').value),
                    mrp: parseFloat(form.querySelector('[name="mrp500ml"]')?.value || form.querySelector('[name="price500ml"]').value)
                },
                '650ml': {
                    price: parseFloat(form.querySelector('[name="price650ml"]').value),
                    stock: parseInt(form.querySelector('[name="stock650ml"]').value),
                    mrp: parseFloat(form.querySelector('[name="mrp650ml"]')?.value || form.querySelector('[name="price650ml"]').value)
                }
            };
            
            // Create FormData object
            const formData = new FormData(form);
            formData.set('variants', JSON.stringify(variants));
            
            // Determine the URL based on action
            let url = '/admin/products/add';
            if (action === 'edit') {
                const productId = form.querySelector('[name="productId"]').value;
                url = `/admin/products/edit/${productId}`;
            }
            
            // Submit the form
            fetch(url, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                // Reset button
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                
                if (data.success) {
                    // Close the modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById(action === 'add' ? 'addProductModal' : 'editProductModal'));
                    if (modal) {
                        modal.hide();
                    }
                    
                    // Show SweetAlert for both add and edit success
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: data.message || `Product ${action === 'add' ? 'added' : 'updated'} successfully`,
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    // Show error message with SweetAlert for both add and edit
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.error || `Failed to ${action} product`
                    });
                }
            })
            .catch(error => {
                // Reset button
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                
                console.error(`Error ${action}ing product:`, error);
                
                // Show error message with SweetAlert
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong. Please try again.'
                });
            });
        }

        // Edit Product function
        async function editProduct(id) {
            try {
                console.log('Fetching product data for ID:', id);
                const response = await fetch(`/admin/products/${id}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                // Check if response is JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    throw new Error('Server did not return JSON');
                }

                const product = await response.json();
                
                if (!response.ok) {
                    throw new Error(product.error || 'Failed to fetch product details');
                }

                console.log('Product data:', product);

                // Fill the edit form
                const form = document.getElementById('editProductForm');
                
                // Basic fields
                form.querySelector('input[name="productId"]').value = product._id;
                form.querySelector('input[name="name"]').value = product.name || '';
                form.querySelector('select[name="category"]').value = product.category?._id || '';
                form.querySelector('select[name="brand"]').value = product.brand || '';
                form.querySelector('textarea[name="description"]').value = product.description || '';

                // Fill variant details
                if (product.variants) {
                    if (product.variants['500ml']) {
                        form.querySelector('input[name="price500ml"]').value = product.variants['500ml'].price || '';
                        form.querySelector('input[name="stock500ml"]').value = product.variants['500ml'].stock || '';
                    }
                    
                    if (product.variants['650ml']) {
                        form.querySelector('input[name="price650ml"]').value = product.variants['650ml'].price || '';
                        form.querySelector('input[name="stock650ml"]').value = product.variants['650ml'].stock || '';
                    }
                }
                
                // Show image previews
                if (product.images) {
                    if (product.images.image1) {
                        const preview1 = document.getElementById('preview1Edit');
                        preview1.style.backgroundImage = `url(${product.images.image1})`;
                        preview1.classList.add('has-image');
                    }
                    
                    if (product.images.image2) {
                        const preview2 = document.getElementById('preview2Edit');
                        preview2.style.backgroundImage = `url(${product.images.image2})`;
                        preview2.classList.add('has-image');
                    }
                    
                    if (product.images.image3) {
                        const preview3 = document.getElementById('preview3Edit');
                        preview3.style.backgroundImage = `url(${product.images.image3})`;
                        preview3.classList.add('has-image');
                    }
                }
                
                // Show the modal
                const modal = new bootstrap.Modal(document.getElementById('editProductModal'));
                modal.show();
            } catch (error) {
                console.error('Error fetching product details:', error);
                alert('Error: ' + error.message);
            }
        }

        // Image preview functionality
        function setupImagePreviews() {
            document.querySelectorAll('input[type="file"]').forEach(input => {
                input.addEventListener('change', function(e) {
                    const preview = this.parentElement.querySelector('.image-preview');
                    if (preview && this.files && this.files[0]) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            preview.style.backgroundImage = `url(${e.target.result})`;
                            preview.classList.add('has-image');
                        }
                        reader.readAsDataURL(this.files[0]);
                    }
                });
            });
        }

        // Function to confirm visibility toggle with SweetAlert
        function confirmToggleVisibility(productId, productName, isCurrentlyVisible) {
            const action = isCurrentlyVisible ? 'hide' : 'show';
            const statusChange = isCurrentlyVisible ? 'inactive' : 'active';
            
            Swal.fire({
                title: `${isCurrentlyVisible ? 'Hide' : 'Show'} Product?`,
                html: `Are you sure you want to <strong>${action}</strong> "${productName}"?<br>
                       This will make the product <strong>${statusChange}</strong> for customers.`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: isCurrentlyVisible ? '#dc3545' : '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: `Yes, ${action} it!`,
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Submit the form programmatically
                    fetch(`/admin/products/toggle-visibility/${productId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => {
                        if (response.ok) {
                            Swal.fire({
                                title: 'Success!',
                                text: `Product "${productName}" is now ${isCurrentlyVisible ? 'hidden' : 'visible'}.`,
                                icon: 'success',
                                showConfirmButton: false,
                                timer: 1500
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            throw new Error('Failed to update product visibility');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to update product visibility.',
                            icon: 'error'
                        });
                    });
                }
            });
        }
        
        // Function to delete product with confirmation
        function deleteProduct(productId, productName) {
            Swal.fire({
                title: 'Delete Product?',
                html: `Are you sure you want to delete "<strong>${productName}</strong>"?<br>
                       This action cannot be undone.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show loading state
                    Swal.fire({
                        title: 'Deleting...',
                        text: 'Please wait while we delete the product.',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        showConfirmButton: false,
                        willOpen: () => {
                            Swal.showLoading();
                        }
                    });
                    
                    // Send delete request
                    fetch(`/admin/products/delete/${productId}`, {
                        method: 'DELETE',
                        headers: {
                            'Accept': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Deleted!',
                                text: data.message || `Product "${productName}" has been deleted.`,
                                icon: 'success',
                                showConfirmButton: false,
                                timer: 1500
                            }).then(() => {
                                // Remove the product row from the table
                                const productRow = document.querySelector(`tr[data-product-id="${productId}"]`);
                                if (productRow) {
                                    productRow.remove();
                                } else {
                                    // If we can't find the row, just reload the page
                                    window.location.reload();
                                }
                            });
                        } else {
                            throw new Error(data.error || 'Failed to delete product');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: error.message || 'Failed to delete product.',
                            icon: 'error'
                        });
                    });
                }
            });
        }
    </script>
</body>
</html> 