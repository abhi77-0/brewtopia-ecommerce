<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Brewtopia Admin</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #FF9800;
            --primary-dark: #F57C00;
            --secondary: #5D4037;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --border: #dee2e6;
            --card-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --sidebar-width: 260px;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            color: var(--dark);
        }
        
        /* Admin layout */
        .admin-layout {
            display: flex;
            min-height: 100vh;
        }
        
        /* Main Content Styles */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            padding: 2rem;
            transition: all 0.3s;
        }
        
        /* Page Header */
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding: 1rem 0;
        }
        
        .page-title {
            font-size: 1.75rem;
            font-weight: 600;
            color: var(--secondary);
            margin: 0;
        }
        
        /* Table Container */
        .table-container {
            background: white;
            border-radius: 12px;
            box-shadow: var(--card-shadow);
            overflow: hidden;
        }
        
        /* Table Styles */
        .table {
            margin-bottom: 0;
        }
        
        .table thead th {
            background: var(--secondary);
            color: white;
            font-weight: 500;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
            padding: 1rem;
            border: none;
        }
        
        .table tbody tr {
            transition: all 0.3s ease;
        }
        
        .table tbody tr:hover {
            background-color: rgba(255, 152, 0, 0.05);
        }
        
        .table td {
            padding: 1rem;
            vertical-align: middle;
            border-bottom: 1px solid var(--border);
        }
        
        /* Status Badge Styles */
        .badge {
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 500;
            font-size: 0.85rem;
        }
        
        .bg-success {
            background: #10B981 !important;
        }
        
        .bg-danger {
            background: #EF4444 !important;
        }
        
        .bg-info {
            background: #3B82F6 !important;
        }
        
        .bg-secondary {
            background: #6B7280 !important;
        }
        
        /* Action Buttons */
        .btn-action {
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .btn-action:hover {
            transform: translateY(-2px);
        }
        
        .btn-outline-primary {
            border-color: var(--primary);
            color: var(--primary);
        }
        
        .btn-outline-primary:hover {
            background: var(--primary);
            color: white;
        }
        
        .btn-outline-danger {
            border-color: #EF4444;
            color: #EF4444;
        }
        
        .btn-outline-danger:hover {
            background: #EF4444;
            color: white;
        }
        
        /* Modal Styles */
        .modal-content {
            border-radius: 12px;
            border: none;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }
        
        .modal-header {
            background: var(--secondary);
            color: white;
            border-bottom: none;
            padding: 1.5rem;
        }
        
        .modal-title {
            font-weight: 600;
        }
        
        .btn-close {
            filter: brightness(0) invert(1);
        }
        
        .modal-body {
            padding: 2rem;
        }
        
        .form-label {
            font-weight: 500;
            color: var(--secondary);
            margin-bottom: 0.5rem;
        }
        
        .form-control, .form-select {
            border-radius: 8px;
            padding: 0.75rem 1rem;
            border: 1px solid var(--border);
            font-size: 0.95rem;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(255, 152, 0, 0.1);
        }
        
        .modal-footer {
            border-top: 1px solid var(--border);
            padding: 1.5rem;
        }
        
        /* Add New Button */
        .btn-add-new {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }
        
        .btn-add-new:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            color: white;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 1rem;
            }
            
            .page-header {
                flex-direction: column;
                gap: 1rem;
            }
            
            .table-container {
                border-radius: 8px;
            }
            
            .btn-action {
                padding: 0.4rem 0.8rem;
            }
        }
    </style>
</head>
<body>
    <div class="admin-layout">
        <%- include('./partials/sidebar') %>

        <div class="main-content">
            <div class="page-header">
                <h1 class="page-title">Offer Management</h1>
                <button class="btn-add-new" data-bs-toggle="modal" data-bs-target="#offerModal" onclick="resetOfferForm()">
                    <i class="fas fa-plus"></i>
                    Add New Offer
                </button>
            </div>

            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Discount</th>
                            <th>Valid From</th>
                            <th>Valid Until</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (offers && offers.length > 0) { %>
                            <% offers.forEach(offer => { %>
                                <tr data-offer-id="<%= offer._id %>">
                                    <td><strong><%= offer.name %></strong></td>
                                    <td><%= offer.description %></td>
                                    <td><span class="badge bg-info"><%= offer.discountPercentage %>%</span></td>
                                    <td><%= new Date(offer.startDate).toLocaleDateString() %></td>
                                    <td><%= new Date(offer.endDate).toLocaleDateString() %></td>
                                    <td>
                                        <% const now = new Date(); %>
                                        <span class="badge bg-<%= 
                                            !offer.isActive ? 'secondary' :
                                            now < new Date(offer.startDate) ? 'info' :
                                            now > new Date(offer.endDate) ? 'danger' :
                                            'success'
                                        %>">
                                            <%= 
                                                !offer.isActive ? 'Inactive' :
                                                now < new Date(offer.startDate) ? 'Scheduled' :
                                                now > new Date(offer.endDate) ? 'Expired' :
                                                'Active'
                                            %>
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-action btn-outline-primary me-2" onclick="editOffer('<%= offer._id %>')">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                        <button class="btn btn-action btn-outline-danger" onclick="deleteOffer('<%= offer._id %>')">
                                            <i class="fas fa-trash-alt"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="7" class="text-center py-5">
                                    <i class="fas fa-gift fa-3x mb-3 text-muted"></i>
                                    <p class="text-muted mt-2">No offers found. Create your first offer!</p>
                                </td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
                
                <!-- Pagination Controls -->
                <% if (pagination && pagination.totalPages > 1) { %>
                    <nav aria-label="Offer pagination" class="mt-4">
                        <ul class="pagination justify-content-center">
                            <!-- Previous button -->
                            <li class="page-item <%= pagination.page === 1 ? 'disabled' : '' %>">
                                <a class="page-link" href="?page=<%= pagination.page - 1 %>" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                            
                            <!-- Page numbers -->
                            <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                                <li class="page-item <%= pagination.page === i ? 'active' : '' %>">
                                    <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                                </li>
                            <% } %>
                            
                            <!-- Next button -->
                            <li class="page-item <%= pagination.page === pagination.totalPages ? 'disabled' : '' %>">
                                <a class="page-link" href="?page=<%= pagination.page + 1 %>" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        </ul>
                    </nav>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Add Offer Modal -->
    <div class="modal fade" id="offerModal" tabindex="-1" aria-labelledby="offerModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="offerModalLabel">Add New Offer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="offerForm">
                        <input type="hidden" name="offerId" value="">
                        
                        <!-- Offer Name -->
                        <div class="mb-3">
                            <label for="name" class="form-label">Offer Name</label>
                            <input type="text" class="form-control" id="name" name="name">
                            <div class="invalid-feedback">Please enter a valid offer name (3-50 characters)</div>
                            <div class="valid-feedback">Name is available</div>
                        </div>

                        <!-- Description -->
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description"></textarea>
                            <div class="invalid-feedback">Please enter a description (10-500 characters)</div>
                        </div>

                        <!-- Type and Applicable To -->
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="type" class="form-label">Offer Type</label>
                                <select class="form-select" id="type" name="type" onchange="handleTypeChange(this.value)">
                                    <option value="">Select Type</option>
                                    <option value="product">Product Offer</option>
                                    <option value="category">Category Offer</option>
                                </select>
                                <div class="invalid-feedback">Please select an offer type</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="applicableToId" class="form-label">Applicable To</label>
                                <select class="form-select" id="applicableToId" name="applicableToId">
                                    <option value="">Select...</option>
                                </select>
                                <div class="invalid-feedback">Please select a product or category</div>
                            </div>
                        </div>

                        <!-- Discount Amount with Percentage Symbol -->
                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <label for="discountPercentage" class="form-label">Discount Percentage</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" id="discountPercentage" name="discountPercentage" min="0" max="100" step="0.01">
                                    <span class="input-group-text">%</span>
                                </div>
                                <div class="invalid-feedback">Please enter a valid discount percentage (0-100%)</div>
                            </div>
                        </div>

                        <!-- Dates -->
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="startDate" class="form-label">Start Date</label>
                                <input type="datetime-local" class="form-control" id="startDate" name="startDate">
                                <div class="invalid-feedback">Please select a valid start date</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="endDate" class="form-label">End Date</label>
                                <input type="datetime-local" class="form-control" id="endDate" name="endDate">
                                <div class="invalid-feedback">Please select a valid end date</div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save Offer</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // Store data globally
        const products = <%- JSON.stringify(products) %>;
        const categories = <%- JSON.stringify(categories) %>;

        // Function to handle type change
        function handleTypeChange(selectedType) {
            console.log('Selected type:', selectedType);
            const applicableToSelect = document.getElementById('applicableToId');
            
            // Clear existing options
            applicableToSelect.innerHTML = '<option value="">Select...</option>';
            
            if (selectedType === 'product') {
                products.forEach(product => {
                    applicableToSelect.innerHTML += `
                        <option value="${product._id}">${product.name}</option>
                    `;
                });
            } else if (selectedType === 'category') {
                categories.forEach(category => {
                    applicableToSelect.innerHTML += `
                        <option value="${category._id}">${category.name}</option>
                    `;
                });
            }
        }

        // Initialize form with current date and tomorrow as default dates
        document.addEventListener('DOMContentLoaded', function() {
            const now = new Date();
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            document.getElementById('startDate').value = now.toISOString().slice(0, 16);
            document.getElementById('endDate').value = tomorrow.toISOString().slice(0, 16);
        });

        // Form validation function
        function validateOfferForm(formData) {
            let isValid = true;

            // Reset all invalid states
            document.querySelectorAll('.is-invalid').forEach(element => {
                element.classList.remove('is-invalid');
            });

            // Validate offer name
            const name = formData.get('name');
            if (!name || name.trim().length < 3 || name.trim().length > 50) {
                document.getElementById('name').classList.add('is-invalid');
                isValid = false;
            }

            // Validate description
            const description = formData.get('description');
            if (!description || description.trim().length < 10 || description.trim().length > 500) {
                document.getElementById('description').classList.add('is-invalid');
                isValid = false;
            }

            // Validate offer type
            const type = formData.get('type');
            if (!type) {
                document.getElementById('type').classList.add('is-invalid');
                isValid = false;
            }

            // Validate applicable to
            const applicableToId = formData.get('applicableToId');
            if (!applicableToId) {
                document.getElementById('applicableToId').classList.add('is-invalid');
                isValid = false;
            }

            // Validate discount percentage
            const discountPercentage = parseFloat(formData.get('discountPercentage'));
            if (isNaN(discountPercentage) || discountPercentage < 0 || discountPercentage > 100) {
                document.getElementById('discountPercentage').classList.add('is-invalid');
                isValid = false;
            }

            // Validate dates
            const startDate = new Date(formData.get('startDate'));
            const endDate = new Date(formData.get('endDate'));
            const now = new Date();

            if (!formData.get('startDate') || isNaN(startDate.getTime())) {
                document.getElementById('startDate').classList.add('is-invalid');
                isValid = false;
            } else if (startDate < now) {
                document.getElementById('startDate').classList.add('is-invalid');
                document.getElementById('startDate').nextElementSibling.textContent = 'Start date cannot be in the past';
                isValid = false;
            }

            if (!formData.get('endDate') || isNaN(endDate.getTime())) {
                document.getElementById('endDate').classList.add('is-invalid');
                isValid = false;
            } else if (endDate <= startDate) {
                document.getElementById('endDate').classList.add('is-invalid');
                document.getElementById('endDate').nextElementSibling.textContent = 'End date must be after start date';
                isValid = false;
            }

            return isValid;
        }

        // Form submission handler
        document.getElementById('offerForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const isValid = validateOfferForm(formData);

            if (!isValid) {
                const firstInvalid = document.querySelector('.is-invalid');
                if (firstInvalid) {
                    firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
                return;
            }

            try {
                const offerId = formData.get('offerId');
                const url = offerId ? `/admin/offers/edit/${offerId}` : '/admin/offers/add';
                
                const formDataObj = {};
                formData.forEach((value, key) => {
                    formDataObj[key] = value;
                });
                
                const response = await fetch(url, {
                    method: offerId ? 'PUT' : 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formDataObj)
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.message || 'Failed to save offer');
                }

                // Show success message
                await Swal.fire({
                    title: 'Success!',
                    text: offerId ? 'Offer updated successfully' : 'Offer created successfully',
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false
                });

                // Update the UI
                const offer = data.offer;
                const tbody = document.querySelector('table tbody');
                
                if (offerId) {
                    // Update existing offer row
                    const row = document.querySelector(`tr[data-offer-id="${offerId}"]`);
                    if (row) {
                        row.innerHTML = `
                            <td><strong>${offer.name}</strong></td>
                            <td>${offer.description}</td>
                            <td><span class="badge bg-info">${offer.discountPercentage}%</span></td>
                            <td>${new Date(offer.startDate).toLocaleDateString()}</td>
                            <td>${new Date(offer.endDate).toLocaleDateString()}</td>
                            <td>
                                <span class="badge bg-${
                                    !offer.isActive ? 'secondary' :
                                    new Date() < new Date(offer.startDate) ? 'info' :
                                    new Date() > new Date(offer.endDate) ? 'danger' :
                                    'success'
                                }">
                                    ${
                                        !offer.isActive ? 'Inactive' :
                                        new Date() < new Date(offer.startDate) ? 'Scheduled' :
                                        new Date() > new Date(offer.endDate) ? 'Expired' :
                                        'Active'
                                    }
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-action btn-outline-primary me-2" onclick="editOffer('${offer._id}')">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-action btn-outline-danger" onclick="deleteOffer('${offer._id}')">
                                    <i class="fas fa-trash-alt"></i> Delete
                                </button>
                            </td>
                        `;
                    }
                } else {
                    // Add new offer row
                    const newRow = document.createElement('tr');
                    newRow.setAttribute('data-offer-id', offer._id);
                    newRow.innerHTML = `
                        <td><strong>${offer.name}</strong></td>
                        <td>${offer.description}</td>
                        <td><span class="badge bg-info">${offer.discountPercentage}%</span></td>
                        <td>${new Date(offer.startDate).toLocaleDateString()}</td>
                        <td>${new Date(offer.endDate).toLocaleDateString()}</td>
                        <td>
                            <span class="badge bg-${
                                !offer.isActive ? 'secondary' :
                                new Date() < new Date(offer.startDate) ? 'info' :
                                new Date() > new Date(offer.endDate) ? 'danger' :
                                'success'
                            }">
                                ${
                                    !offer.isActive ? 'Inactive' :
                                    new Date() < new Date(offer.startDate) ? 'Scheduled' :
                                    new Date() > new Date(offer.endDate) ? 'Expired' :
                                    'Active'
                                }
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-action btn-outline-primary me-2" onclick="editOffer('${offer._id}')">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn btn-action btn-outline-danger" onclick="deleteOffer('${offer._id}')">
                                <i class="fas fa-trash-alt"></i> Delete
                            </button>
                        </td>
                    `;
                    tbody.insertBefore(newRow, tbody.firstChild);
                }

                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('offerModal'));
                modal.hide();
            } catch (error) {
                console.error('Error saving offer:', error);
                Swal.fire({
                    title: 'Error!',
                    text: error.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        });

        // Edit offer
        async function editOffer(id) {
            try {
                console.log('Fetching offer with ID:', id);
                const response = await fetch(`/admin/offers/${id}`);
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to fetch offer');
                }
                
                const offer = await response.json();
                console.log('Offer data received:', offer);
                
                // Fill the form
                const form = document.getElementById('offerForm');
                
                // Set the offer ID
                form.elements['offerId'].value = offer._id;
                
                // Set basic fields
                form.elements['name'].value = offer.name || '';
                form.elements['description'].value = offer.description || '';
                form.elements['discountPercentage'].value = offer.discountPercentage || '';
                
                // Set dates
                if (offer.startDate) {
                    form.elements['startDate'].value = new Date(offer.startDate).toISOString().slice(0, 16);
                }
                if (offer.endDate) {
                    form.elements['endDate'].value = new Date(offer.endDate).toISOString().slice(0, 16);
                }
                
                // Set isActive status - make sure you have this field in your form
                if (form.elements['isActive']) {
                    form.elements['isActive'].checked = offer.isActive;
                } else {
                    // If there's no checkbox, add a hidden field
                    const isActiveField = document.createElement('input');
                    isActiveField.type = 'hidden';
                    isActiveField.name = 'isActive';
                    isActiveField.value = offer.isActive ? 'true' : 'false';
                    form.appendChild(isActiveField);
                }
                
                // Set type and handle dropdown population
                if (offer.type) {
                    form.elements['type'].value = offer.type;
                    handleTypeChange(offer.type);
                    
                    // Set the applicableTo value after populating the dropdown
                    setTimeout(() => {
                        if (offer.applicableTo && offer.applicableTo._id) {
                            form.elements['applicableToId'].value = offer.applicableTo._id;
                        }
                    }, 300);
                }
                
                // Update modal title
                document.querySelector('#offerModalLabel').textContent = 'Edit Offer';
                
                // Show the modal using vanilla JavaScript
                const modalElement = document.getElementById('offerModal');
                const bsModal = new bootstrap.Modal(modalElement);
                bsModal.show();
            } catch (error) {
                console.error('Error editing offer:', error);
                Swal.fire({
                    title: 'Error!',
                    text: error.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }

        // Delete offer
        async function deleteOffer(id) {
            try {
                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "This action cannot be undone!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!'
                });

                if (result.isConfirmed) {
                    // Show loading state
                    Swal.fire({
                        title: 'Deleting...',
                        text: 'Please wait while we delete the offer.',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    const response = await fetch(`/admin/offers/delete/${id}`, {
                        method: 'DELETE'
                    });
                    
                    const data = await response.json();
                    
                    if (!response.ok) throw new Error(data.message || 'Failed to delete offer');
                    
                    // Remove the offer row from the table
                    const offerRow = document.querySelector(`tr[data-offer-id="${id}"]`);
                    if (offerRow) {
                        offerRow.remove();
                        
                        // Check if there are no more offers
                        const tbody = document.querySelector('table tbody');
                        const remainingRows = tbody.querySelectorAll('tr[data-offer-id]');
                        
                        if (remainingRows.length === 0) {
                            tbody.innerHTML = `
                                <tr>
                                    <td colspan="7" class="text-center py-5">
                                        <i class="fas fa-gift fa-3x mb-3 text-muted"></i>
                                        <p class="text-muted mt-2">No offers found. Create your first offer!</p>
                                    </td>
                                </tr>
                            `;
                        }
                    }

                    // Show success message
                    await Swal.fire({
                        title: 'Deleted!',
                        text: 'The offer has been deleted successfully.',
                        icon: 'success',
                        timer: 1500,
                        showConfirmButton: false
                    });
                }
            } catch (error) {
                console.error('Error deleting offer:', error);
                await Swal.fire({
                    title: 'Error!',
                    text: error.message || 'Failed to delete the offer.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }

        // Function to reset the form when adding a new offer
        function resetOfferForm() {
            document.getElementById('offerForm').reset();
            document.querySelector('.modal-title').textContent = 'Add New Offer';
            document.querySelector('input[name="offerId"]').value = '';
            
            // Reset the applicable to dropdown
            const applicableToSelect = document.querySelector('select[name="applicableToId"]');
            applicableToSelect.innerHTML = '<option value="">Select...</option>';
            
            // Set default dates
            const now = new Date();
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            const startDateInput = document.querySelector('input[name="startDate"]');
            const endDateInput = document.querySelector('input[name="endDate"]');
            
            startDateInput.value = now.toISOString().slice(0, 16);
            endDateInput.value = tomorrow.toISOString().slice(0, 16);
        }

        // Real-time validation
        function setupRealTimeValidation() {
            const form = document.getElementById('offerForm');
            
            // Name validation with debounce
            let nameTimeout;
            form.querySelector('#name').addEventListener('input', function() {
                clearTimeout(nameTimeout);
                const name = this.value.trim();
                
                if (name.length < 3 || name.length > 50) {
                    this.classList.add('is-invalid');
                    this.classList.remove('is-valid');
                    return;
                }
                
                // Check for duplicate names after a delay
                nameTimeout = setTimeout(async () => {
                    try {
                        const response = await fetch('/admin/offers/check-name', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                name: name,
                                offerId: form.querySelector('input[name="offerId"]').value
                            })
                        });
                        
                        const data = await response.json();
                        
                        if (data.exists) {
                            this.classList.add('is-invalid');
                            this.classList.remove('is-valid');
                            this.nextElementSibling.textContent = 'An offer with this name already exists';
                        } else {
                            this.classList.remove('is-invalid');
                            this.classList.add('is-valid');
                        }
                    } catch (error) {
                        console.error('Error checking offer name:', error);
                    }
                }, 500);
            });

            // Description validation
            form.querySelector('#description').addEventListener('input', function() {
                if (this.value.trim().length < 10 || this.value.trim().length > 500) {
                    this.classList.add('is-invalid');
                } else {
                    this.classList.remove('is-invalid');
                }
            });

            // Type validation
            form.querySelector('#type').addEventListener('change', function() {
                if (!this.value) {
                    this.classList.add('is-invalid');
                } else {
                    this.classList.remove('is-invalid');
                }
            });

            // Applicable to validation
            form.querySelector('#applicableToId').addEventListener('change', function() {
                if (!this.value) {
                    this.classList.add('is-invalid');
                } else {
                    this.classList.remove('is-invalid');
                }
            });

            // Discount percentage validation
            form.querySelector('#discountPercentage').addEventListener('input', function() {
                const value = parseFloat(this.value);
                if (isNaN(value) || value < 0 || value > 100) {
                    this.classList.add('is-invalid');
                } else {
                    this.classList.remove('is-invalid');
                }
            });

            // Date validation
            form.querySelector('#startDate').addEventListener('change', function() {
                const startDate = new Date(this.value);
                const now = new Date();
                if (!this.value || isNaN(startDate.getTime()) || startDate < now) {
                    this.classList.add('is-invalid');
                } else {
                    this.classList.remove('is-invalid');
                }
            });

            form.querySelector('#endDate').addEventListener('change', function() {
                const endDate = new Date(this.value);
                const startDate = new Date(form.querySelector('#startDate').value);
                if (!this.value || isNaN(endDate.getTime()) || endDate <= startDate) {
                    this.classList.add('is-invalid');
                } else {
                    this.classList.remove('is-invalid');
                }
            });
        }

        // Initialize real-time validation
        document.addEventListener('DOMContentLoaded', function() {
            setupRealTimeValidation();
        });
    </script>
</body>
</html> 