<%- include('../partials/header') %>

<style>
    body {
        font-family: 'Inter', sans-serif;
        background: linear-gradient(135deg, #F8F9FA 0%, #E9ECEF 100%);
        min-height: 100vh;
        color: #333;
    }

    .shop-container {
        padding: 2rem 0;
    }

    .filter-sidebar {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        position: sticky;
        top: 2rem;
    }

    .filter-section {
        margin-bottom: 2rem;
    }

    .filter-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #FF9800;
    }

    .product-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s;
        height: 100%;
        border: none;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }

    .product-carousel {
        position: relative;
        width: 100%;
        padding-top: 100%;
    }

    .carousel {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    .carousel-inner {
        width: 100%;
        height: 100%;
    }

    .carousel-item {
        position: relative;
        width: 100%;
        height: 100%;
    }

    .carousel-item img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: contain;
        background-color: #f8f9fa;
    }

    .variant-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-radius: 8px;
        background: #f8f9fa;
        margin-bottom: 0.5rem;
        transition: background-color 0.3s;
    }

    .variant-item:hover {
        background: #FF980020;
    }

    .price {
        font-weight: 600;
        color: #FF9800;
        font-size: 1.1rem;
    }

    .btn-primary {
        background-color: #FF9800;
        border-color: #FF9800;
        padding: 0.6rem 1.5rem;
        font-weight: 500;
        transition: all 0.3s;
    }

    .btn-primary:hover {
        background-color: #F57C00;
        border-color: #F57C00;
        transform: translateY(-2px);
    }

    .form-range::-webkit-slider-thumb {
        background: #FF9800;
    }

    .form-select {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 0.75rem;
        font-size: 0.95rem;
        color: #2c3e50;
        transition: all 0.3s;
    }

    .form-select:focus {
        border-color: #FF9800;
        box-shadow: 0 0 0 0.2rem rgba(255, 152, 0, 0.25);
    }

    .category-filter label {
        display: block;
        padding: 0.75rem;
        cursor: pointer;
        transition: all 0.3s;
        border-radius: 8px;
    }

    .category-filter label:hover {
        background: #FF980010;
        color: #FF9800;
    }

    .category-filter input[type="radio"]:checked + span {
        color: #FF9800;
        font-weight: 500;
    }

    .products-header {
        display: none;
    }

    .products-found {
        display: none;
    }

    .sort-select {
        display: none;
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }

    .card-text {
        color: #6c757d;
    }

    .brand-badge {
        position: absolute;
        top: 10px;
        left: 10px;
        background: rgba(255, 152, 0, 0.9);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
        z-index: 1;
    }

    .carousel-control-prev,
    .carousel-control-next {
        width: 40px;
        height: 40px;
        background: rgba(0, 0, 0, 0.5);
        border-radius: 50%;
        top: 50%;
        transform: translateY(-50%);
        opacity: 0.8;
    }

    .carousel-control-prev {
        left: 10px;
    }

    .carousel-control-next {
        right: 10px;
    }

    .carousel-control-prev:hover,
    .carousel-control-next:hover {
        background: rgba(0, 0, 0, 0.7);
        opacity: 1;
    }

    .carousel-control-prev-icon,
    .carousel-control-next-icon {
        width: 20px;
        height: 20px;
    }

    .no-products {
        text-align: center;
        padding: 3rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .no-products i {
        color: #FF9800;
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    /* Add navbar styles from home page */
    .navbar {
        background: #ffffff;
        padding: 1rem 0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .navbar-brand {
        font-size: 1.8rem;
        font-weight: 700;
        color: #FF9800 !important;
    }

    .search-bar {
        max-width: 500px;
        width: 100%;
    }

    .search-input {
        border-radius: 20px;
        padding-left: 1rem;
        padding-right: 3rem;
        border: 1px solid #ddd;
    }

    .search-btn {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #666;
    }

    .nav-icon {
        color: #666;
        font-size: 1.2rem;
        padding: 0.5rem;
        border-radius: 50%;
        transition: all 0.3s ease;
        position: relative;
    }

    .nav-icon:hover {
        color: #FF9800;
        background: rgba(255, 152, 0, 0.1);
    }

    .badge-notification {
        position: absolute;
        top: -5px;
        right: -5px;
        background-color: #FF9800;
        color: white;
        border-radius: 50%;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
        color: #666;
        padding: 0.5rem;
        border-radius: 20px;
        transition: all 0.3s ease;
    }

    .user-profile:hover {
        background: rgba(255, 152, 0, 0.1);
        color: #FF9800;
    }

    .user-profile img {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
    }

    .dropdown-menu {
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        border: none;
        padding: 0.5rem;
    }

    .dropdown-item {
        border-radius: 8px;
        padding: 0.5rem 1rem;
    }

    .dropdown-item:hover {
        background: rgba(255, 152, 0, 0.1);
        color: #FF9800;
    }

    /* Footer Styles */
    .footer {
        margin-top: auto;
        background: #343a40;
        color: white;
    }

    .footer h5 {
        color: #fff;
        font-weight: 600;
    }

    .footer a {
        text-decoration: none;
        transition: color 0.3s ease;
    }

    .footer a:hover {
        color: #FF9800 !important;
    }

    .social-links a {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 35px;
        height: 35px;
        border-radius: 50%;
        background: rgba(255,255,255,0.1);
        transition: all 0.3s ease;
    }

    .social-links a:hover {
        background: #FF9800;
        transform: translateY(-3px);
    }

    .newsletter-form .form-control {
        background: rgba(255,255,255,0.1);
        border: none;
        color: #fff;
        padding: 0.75rem;
    }

    .newsletter-form .form-control::placeholder {
        color: rgba(255,255,255,0.5);
    }

    .bg-darker {
        background: #1a1a1a;
    }

    .payment-methods {
        max-height: 30px;
        opacity: 0.7;
    }

    .out-of-stock-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.2rem;
        font-weight: 600;
        z-index: 2;
    }

    .variant-item.out-of-stock {
        opacity: 0.6;
        background: #f8f9fa;
    }

    .stock-status {
        color: #dc3545;
        font-size: 0.8rem;
        margin-left: 0.5rem;
    }

    .btn-secondary:disabled {
        background-color: #6c757d;
        border-color: #6c757d;
        opacity: 0.65;
        cursor: not-allowed;
    }

    .breadcrumb {
        background: none;
        padding: 0;
    }

    .breadcrumb-item + .breadcrumb-item::before {
        content: ">";
        padding: 0 5px;
    }

    .star-rating {
        color: #FF9800;
    }

    .star-rating i {
        font-size: 1.2rem;
    }

    .rating-text {
        margin-left: 5px;
        font-size: 1rem;
    }

    /* Pagination styles */
    .pagination {
        margin-top: 2rem;
    }
    
    .page-link {
        color: #FF9800;
        border-color: #dee2e6;
        padding: 0.5rem 1rem;
        margin: 0 0.2rem;
        border-radius: 8px;
    }
    
    .page-item.active .page-link {
        background-color: #FF9800;
        border-color: #FF9800;
        color: white;
    }
    
    .page-link:hover {
        color: #F57C00;
        background-color: rgba(255, 152, 0, 0.1);
        border-color: #dee2e6;
    }
    
    .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
        background-color: #fff;
        border-color: #dee2e6;
    }

    .variant-bubbles {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .variant-bubble {
        background-color: #f8f9fa;
        color: #666;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.75rem;
        border: 1px solid #dee2e6;
    }

    .price-section {
        font-size: 1.25rem;
        font-weight: 600;
        color: #FF9800;
    }

    .price {
        display: inline-block;
    }

    /* Wishlist button styles */
    .wishlist-btn {
        background: none;
        border: none;
        padding: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .wishlist-btn i {
        color: #FF9800;
        font-size: 1.5rem;
        transition: all 0.3s ease;
    }

    .wishlist-btn.active i {
        color: #FF9800;
        transform: scale(1.1);
    }

    .wishlist-btn:hover i {
        transform: scale(1.1);
    }

    /* Animation for heart click */
    @keyframes heartPop {
        0% { transform: scale(1); }
        50% { transform: scale(1.2); }
        100% { transform: scale(1); }
    }

    .heart-pop {
        animation: heartPop 0.3s ease;
    }

    /* Rating styles */
    .product-rating {
        display: flex;
        align-items: center;
    }
    
    .stars {
        display: flex;
        align-items: center;
    }
    
    .rating-value {
        font-weight: 600;
        font-size: 0.9rem;
        color: #FF9800;
    }
    
    .rating-count {
        font-size: 0.8rem;
        margin-left: 3px;
    }
    
    /* Add to Cart button styles */
    .add-to-cart-btn {
        border-color: #FF9800;
        color: #FF9800;
        transition: all 0.3s;
    }
    
    .add-to-cart-btn:hover:not(:disabled) {
        background-color: #FF9800;
        color: white;
    }
    
    .add-to-cart-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .offer-badge {
        position: absolute;
        top: 10px;
        left: 10px;
        background-color: #FF9800;
        color: white;
        padding: 5px 10px;
        border-radius: 3px;
        font-weight: bold;
        z-index: 10;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    
    .original-price {
        text-decoration: line-through;
        color: #999;
        margin-right: 5px;
        font-size: 0.9em;
    }
    
    .final-price {
        color: #FF9800;
        font-weight: bold;
        font-size: 1.1em;
    }

    /* Add these styles for the variant options */
    .variant-option {
        padding: 15px 25px;
        border-radius: 10px;
        border: 2px solid #dee2e6;
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: center;
        min-width: 120px;
    }
    
    .variant-option:hover:not(.disabled) {
        border-color: #FF9800;
        background-color: #FFF8E1;
    }
    
    .variant-option.disabled {
        opacity: 0.7;
        cursor: not-allowed;
        background-color: #f8f9fa;
    }
    
    /* Modal animation */
    .modal.fade .modal-dialog {
        transition: transform 0.3s ease-out;
        transform: scale(0.95);
    }
    
    .modal.show .modal-dialog {
        transform: scale(1);
    }
</style>

<div class="shop-container">
    <div class="container">
        <div class="row">
            
            <!-- Filter Sidebar -->
            <div class="col-lg-3 mb-4">
                <div class="filter-sidebar">
                    <!-- Category Filter -->
                    <div class="filter-section">
                        <h5 class="filter-title">Categories</h5>
                        <div class="category-filter">
                            <label class="d-flex align-items-center">
                                <input type="radio" name="category" value="" class="me-2" 
                                       <%= !selectedCategory ? 'checked' : '' %>>
                                All Categories
                            </label>
                            <% if (categories && categories.length > 0) { %>
                                <% categories.forEach(function(category) { %>
                                    <label class="d-flex align-items-center">
                                        <input type="radio" name="category" value="<%= category._id %>" 
                                               class="me-2"
                                               <%= selectedCategory === category._id.toString() ? 'checked' : '' %>>
                                        <%= category.name %>
                                    </label>
                                <% }); %>
                            <% } %>
                        </div>
                    </div>

                    <!-- Brand Filter -->
                    <div class="filter-section">
                        <h5 class="filter-title">Brands</h5>
                        <div class="brand-filter">
                            <select class="form-select" id="brandSelect" onchange="applyFilters()">
                                <option value="">All Brands</option>
                                <% if (brands && brands.length > 0) { %>
                                    <% brands.forEach(function(brand) { %>
                                        <option value="<%= brand %>" 
                                                <%= selectedBrand === brand ? 'selected' : '' %>>
                                            <%= brand.charAt(0).toUpperCase() + brand.slice(1) %>
                                        </option>
                                    <% }); %>
                                <% } %>
                            </select>
                        </div>
                    </div>

                    <!-- Sort By Filter -->
                    <div class="filter-section">
                        <h5 class="filter-title">Sort By</h5>
                        <select class="form-select" id="sortSelect" onchange="applyFilters()">
                            <option value="">Default</option>
                            <option value="price-low" <%= sort === 'price-low' ? 'selected' : '' %>>Price: Low to High</option>
                            <option value="price-high" <%= sort === 'price-high' ? 'selected' : '' %>>Price: High to Low</option>
                            <option value="name-asc" <%= sort === 'name-asc' ? 'selected' : '' %>>A - Z</option>
                            <option value="name-desc" <%= sort === 'name-desc' ? 'selected' : '' %>>Z - A</option>
                        </select>
                    </div>

                    <!-- Price Filter -->
                    <div class="filter-section">
                        <h5 class="filter-title">Price Range</h5>
                        <div class="price-range">
                            <input type="range" class="price-slider form-range" id="minPrice" 
                                   min="100" max="500" step="50" 
                                   value="<%= minPrice || 100 %>">
                            <div class="d-flex justify-content-between mt-2">
                                <span class="price-value">₹<span id="priceValue"><%= minPrice || 100 %></span></span>
                                <span>₹500</span>
                            </div>
                            <div class="mt-3">
                                <button class="btn btn-primary btn-sm w-100" onclick="applyPriceFilter()">
                                    Apply Filter
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Products Grid -->
            <div class="col-lg-9">
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                    <% if (products && products.length > 0) { %>
                        <% products.forEach(function(product) { %>
                            <div class="col">
                                <div class="card product-card" data-product-id="<%= product._id %>">
                                    <% 
                                    // Check if product is out of stock - MOVED THIS UP
                                    let isOutOfStock = true;
                                    if (product.variants) {
                                        Object.keys(product.variants).forEach(size => {
                                            if (product.variants[size].stock > 0) {
                                                isOutOfStock = false;
                                            }
                                        });
                                    }
                                    
                                    // Check if product has a discount
                                    let hasDiscount = false;
                                    let discountPercent = 0;
                                    if (product.variants && Object.keys(product.variants).length > 0) {
                                        const firstVariant = product.variants[Object.keys(product.variants)[0]];
                                        if (firstVariant.mrp && firstVariant.price && firstVariant.mrp > firstVariant.price) {
                                            hasDiscount = true;
                                            discountPercent = Math.round((firstVariant.mrp - firstVariant.price) / firstVariant.mrp * 100);
                                        }
                                    }
                                    %>
                                    <div class="product-carousel">
                                        <div id="carousel-<%= product._id %>" class="carousel slide" data-bs-ride="carousel">
                                            <div class="carousel-inner">
                                                <% if (product.images && product.images.image1) { %>
                                                    <div class="carousel-item active">
                                                        <img src="<%= product.images.image1 %>" 
                                                             alt="<%= product.name %>" 
                                                             class="d-block w-100">
                                                    </div>
                                                <% } else { %>
                                                    <div class="carousel-item active">
                                                        <img src="https://via.placeholder.com/300x300?text=No+Image" 
                                                             alt="No Image Available" 
                                                             class="d-block w-100">
                                                    </div>
                                                <% } %>
                                                <% if (product.images && product.images.image2) { %>
                                                    <div class="carousel-item">
                                                        <img src="<%= product.images.image2 %>" 
                                                             alt="<%= product.name %>" 
                                                             class="d-block w-100">
                                                    </div>
                                                <% } %>
                                                <% if (product.images && product.images.image3) { %>
                                                    <div class="carousel-item">
                                                        <img src="<%= product.images.image3 %>" 
                                                             alt="<%= product.name %>" 
                                                             class="d-block w-100">
                                                    </div>
                                                <% } %>
                                            </div>
                                            <% if (product.images && Object.keys(product.images).filter(key => product.images[key]).length > 1) { %>
                                                <button class="carousel-control-prev" type="button" 
                                                        data-bs-target="#carousel-<%= product._id %>" data-bs-slide="prev">
                                                    <span class="carousel-control-prev-icon"></span>
                                                </button>
                                                <button class="carousel-control-next" type="button" 
                                                        data-bs-target="#carousel-<%= product._id %>" data-bs-slide="next">
                                                    <span class="carousel-control-next-icon"></span>
                                                </button>
                                            <% } %>
                                        </div>
                                        
                                        <% if (isOutOfStock) { %>
                                            <div class="out-of-stock-overlay">
                                                <span>Out of Stock</span>
                                            </div>
                                        <% } %>
                                    </div>
                                    
                                    <div class="card-body">
                                        <h5 class="card-title"><%= product.name %></h5>
                                        <% if (product.category) { %>
                                            <p class="card-text text-muted mb-2">
                                                <small><%= product.category.name %></small>
                                            </p>
                                        <% } %>
                                        
                                        <!-- Add dummy ratings here -->
                                        <div class="product-rating mb-2">
                                            <% 
                                            // Generate a random rating between 3.5 and 5
                                            const rating = (Math.random() * 1.5 + 3.5).toFixed(1);
                                            const fullStars = Math.floor(rating);
                                            const hasHalfStar = rating % 1 >= 0.5;
                                            const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
                                            %>
                                            
                                            <div class="stars">
                                                <% for(let i = 0; i < fullStars; i++) { %>
                                                    <i class="fas fa-star text-warning"></i>
                                                <% } %>
                                                
                                                <% if(hasHalfStar) { %>
                                                    <i class="fas fa-star-half-alt text-warning"></i>
                                                <% } %>
                                                
                                                <% for(let i = 0; i < emptyStars; i++) { %>
                                                    <i class="far fa-star text-warning"></i>
                                                <% } %>
                                                
                                                <span class="rating-value ms-1"><%= rating %></span>
                                                <span class="rating-count text-muted">(<%= Math.floor(Math.random() * 100) + 10 %>)</span>
                                            </div>
                                        </div>
                                        
                                        <div class="variant-bubbles mb-3">
                                            <% if (product.variants) { %>
                                                <% Object.keys(product.variants).forEach(size => { %>
                                                    <span class="variant-bubble"><%= size %></span>
                                                <% }); %>
                                            <% } %>
                                        </div>

                                        <div class="price-section mb-3">
                                            <% if (product.bestOffer) { %>
                                                <span class="original-price">₹<%= product.variants['500ml'].price.toFixed(2) %></span>
                                                <span class="final-price">₹<%= product.finalPrice.toFixed(2) %></span>
                                            <% } else { %>
                                                <span class="final-price">₹<%= product.variants['500ml'].price.toFixed(2) %></span>
                                            <% } %>
                                        </div>

                                        <div class="d-flex justify-content-between mb-3">
                                            <button class="wishlist-btn" onclick="toggleWishlist('<%= product._id %>', this, event)">
                                                <i class="far fa-heart"></i>
                                            </button>
                                            
                                            <!-- Add to Cart Button -->
                                            <button class="btn btn-sm btn-outline-primary add-to-cart-btn" 
                                                    <%= isOutOfStock ? 'disabled' : '' %>>
                                                <i class="fas fa-shopping-cart me-1"></i> Add to Cart
                                            </button>
                                        </div>

                                        <a href="/shop/products/<%= product._id %>" 
                                           class="btn <%= isOutOfStock ? 'btn-secondary' : 'btn-primary' %> w-100"
                                           <%= isOutOfStock ? 'disabled' : '' %>>
                                            <%= isOutOfStock ? 'Out of Stock' : 'View Details' %>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="col-12 text-center py-5">
                            <h3 class="text-muted">No products found</h3>
                            <p class="text-muted">Try adjusting your filters</p>
                        </div>
                    <% } %>
                </div>
                
                <!-- Pagination -->
                <% if (locals.pagination && pagination.totalPages > 1) { %>
                    <nav aria-label="Product pagination" class="mt-4">
                        <ul class="pagination justify-content-center">
                            <li class="page-item <%= !pagination.hasPrevPage ? 'disabled' : '' %>">
                                <a class="page-link" href="?page=<%= pagination.prevPage %>&category=<%= selectedCategory %>&brand=<%= selectedBrand %>&minPrice=<%= minPrice %>" <%= !pagination.hasPrevPage ? 'tabindex="-1" aria-disabled="true"' : '' %>>
                                    Previous
                                </a>
                            </li>
                            
                            <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                                <li class="page-item <%= pagination.page === i ? 'active' : '' %>">
                                    <a class="page-link" href="?page=<%= i %>&category=<%= selectedCategory %>&brand=<%= selectedBrand %>&minPrice=<%= minPrice %>">
                                        <%= i %>
                                    </a>
                                </li>
                            <% } %>
                            
                            <li class="page-item <%= !pagination.hasNextPage ? 'disabled' : '' %>">
                                <a class="page-link" href="?page=<%= pagination.nextPage %>&category=<%= selectedCategory %>&brand=<%= selectedBrand %>&minPrice=<%= minPrice %>" <%= !pagination.hasNextPage ? 'tabindex="-1" aria-disabled="true"' : '' %>>
                                    Next
                                </a>
                            </li>
                        </ul>
                    </nav>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- Update the modal with a stylish UI -->
<div class="modal fade" id="variantSelectModal" tabindex="-1" aria-labelledby="variantSelectModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-0 shadow">
      <div class="modal-header bg-light">
        <h5 class="modal-title" id="variantSelectModalLabel">
          <i class="fas fa-wine-bottle me-2 text-primary"></i>Select Size
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body p-4">
        <div class="text-center mb-4">
          <p class="text-muted">Choose your preferred size variant</p>
        </div>
        
        <div class="variant-selection">
          <div class="d-flex flex-wrap justify-content-center gap-3 mb-4" id="variantButtonsContainer">
            <!-- Variant buttons will be added here dynamically -->
          </div>
          <div id="stockInfo" class="text-center text-muted mb-3">
            <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            Loading available sizes...
          </div>
        </div>
      </div>
      <div class="modal-footer border-0 pt-0">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary px-4" id="addToCartBtn" disabled>
          <i class="fas fa-shopping-cart me-2"></i>Add to Cart
        </button>
      </div>
    </div>
  </div>
</div>

<script>
    // Price slider value display
    const priceSlider = document.getElementById('minPrice');
    const priceValue = document.getElementById('priceValue');
    
    priceSlider.addEventListener('input', function() {
        priceValue.textContent = this.value;
    });

    // Updated Filter functionality
    function applyFilters() {
        const categoryId = document.querySelector('input[name="category"]:checked')?.value || '';
        const minPrice = document.getElementById('minPrice').value;
        const brand = document.getElementById('brandSelect').value;
        const sort = document.getElementById('sortSelect').value;
        
        let url = '/shop/products?';
        if (categoryId) url += `category=${categoryId}&`;
        if (minPrice && minPrice > 100) url += `minPrice=${minPrice}&`;
        if (brand) url += `brand=${brand}&`;
        if (sort) url += `sort=${sort}&`;
        // Reset to page 1 when filters change
        url += 'page=1';
        
        window.location.href = url;
    }

    // Add event listeners
    document.querySelectorAll('input[name="category"]').forEach(radio => {
        radio.addEventListener('change', applyFilters);
    });

    function applyPriceFilter() {
        applyFilters();
    }


    // Function to update product stock display
    function updateProductStock(productId, variantSize, newStock) {
        const productCard = document.querySelector(`[data-product-id="${productId}"]`);
        if (!productCard) return;

        console.log('Updating stock for product:', productId, 'variant:', variantSize, 'new stock:', newStock);

        const variantElement = productCard.querySelector(`[data-variant-size="${variantSize}"]`);
        if (variantElement) {
            if (newStock <= 0) {
                console.log('Setting variant to out of stock');
                variantElement.classList.add('out-of-stock');
                const variantInfo = variantElement.querySelector('.variant-info');
                if (variantInfo) {
                    const price = variantElement.dataset.price;
                    variantInfo.innerHTML = `
                        <span class="price">₹${price}</span>
                        <small class="stock-status">(Out of Stock)</small>
                    `;
                }
            } else {
                console.log('Setting variant to in stock');
                variantElement.classList.remove('out-of-stock');
                const variantInfo = variantElement.querySelector('.variant-info');
                if (variantInfo) {
                    const price = variantElement.dataset.price;
                    variantInfo.innerHTML = `<span class="price">₹${price}</span>`;
                }
            }
        }

        // Check if all variants are out of stock
        const variants = productCard.querySelectorAll('.variant-item');
        const allVariantsOutOfStock = Array.from(variants)
            .every(v => v.classList.contains('out-of-stock'));

        console.log('All variants out of stock:', allVariantsOutOfStock);

        // Update product card appearance
        const carousel = productCard.querySelector('.product-carousel');
        let outOfStockOverlay = productCard.querySelector('.out-of-stock-overlay');
        const viewDetailsBtn = productCard.querySelector('.btn');

        if (allVariantsOutOfStock) {
            console.log('Showing out of stock overlay');
            if (!outOfStockOverlay) {
                outOfStockOverlay = document.createElement('div');
                outOfStockOverlay.className = 'out-of-stock-overlay';
                outOfStockOverlay.innerHTML = '<span>Out of Stock</span>';
                carousel.appendChild(outOfStockOverlay);
            }
            viewDetailsBtn.className = 'btn btn-secondary w-100';
            viewDetailsBtn.disabled = true;
            viewDetailsBtn.textContent = 'Out of Stock';
        } else {
            console.log('Removing out of stock overlay');
            if (outOfStockOverlay) {
                outOfStockOverlay.remove();
            }
            viewDetailsBtn.className = 'btn btn-primary w-100';
            viewDetailsBtn.disabled = false;
            viewDetailsBtn.textContent = 'View Details';
        }
    }

    // Function to construct pagination URLs
    function constructPageUrl(page) {
        const url = new URL(window.location.href);
        url.searchParams.set('page', page);
        return url.toString();
    }

    // Add wishlist functionality
    function toggleWishlist(productId, button, event) {
        // Prevent any parent click events
        event.preventDefault();
        event.stopPropagation();

        const icon = button.querySelector('i');
        const isAdding = icon.classList.contains('far');
        
        // Add animation class
        icon.classList.add('heart-pop');
        
        // Remove animation class after animation ends
        setTimeout(() => {
            icon.classList.remove('heart-pop');
        }, 300);

        fetch(`/users/wishlist/${isAdding ? 'add' : 'remove'}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Toggle icon
                icon.classList.toggle('far');
                icon.classList.toggle('fas');
                button.classList.toggle('active');

                // Show success toast
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 2000,
                    icon: 'success',
                    title: isAdding ? 'Added to wishlist' : 'Removed from wishlist'
                });
            } else {
                throw new Error(data.message || 'Failed to update wishlist');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            // Show error message
            Swal.fire({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                icon: 'error',
                title: 'Error updating wishlist'
            });
        });
    }

    // Check wishlist status on page load
    document.addEventListener('DOMContentLoaded', async function() {
        try {
            const response = await fetch('/users/wishlist/items');
            const data = await response.json();
            if (data.success) {
                const wishlistItems = new Set(data.items);
                document.querySelectorAll('.product-card').forEach(card => {
                    const productId = card.dataset.productId;
                    const wishlistBtn = card.querySelector('.wishlist-btn');
                    const icon = wishlistBtn.querySelector('i');
                    
                    if (wishlistItems.has(productId)) {
                        icon.classList.remove('far');
                        icon.classList.add('fas');
                        wishlistBtn.classList.add('active');
                    }
                });
            }
        } catch (error) {
            console.error('Error checking wishlist status:', error);
        }
    });

    // Global variables
    let currentProductId;
    let selectedVariant = '';
    
    document.addEventListener('DOMContentLoaded', function() {
        let currentProductId;
        let selectedVariant = '';
        
        // Get modal elements
        const modal = document.getElementById('variantSelectModal');
        const variantButtonsContainer = document.getElementById('variantButtonsContainer');
        const stockInfo = document.getElementById('stockInfo');
        const addToCartBtn = document.getElementById('addToCartBtn');
        
        // Add click event to all add to cart buttons
        document.querySelectorAll('.add-to-cart-btn').forEach(button => {
            button.addEventListener('click', function(event) {
                event.preventDefault();
                event.stopPropagation();
                
                // Get product ID from the parent card
                const card = this.closest('.product-card') || this.closest('.card');
                currentProductId = card.dataset.productId;
                console.log('Opening modal for product ID:', currentProductId);
                
                // Reset selected variant
                selectedVariant = '';
                
                // Clear previous variant buttons
                variantButtonsContainer.innerHTML = '';
                
                // Reset stock info
                stockInfo.innerHTML = `
                    <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
<%- include('../partials/header') %>

<style>
    body {
        font-family: 'Inter', sans-serif;
        background: linear-gradient(135deg, #F8F9FA 0%, #E9ECEF 100%);
        min-height: 100vh;
        color: #333;
    }

    .shop-container {
        padding: 2rem 0;
    }

    .filter-sidebar {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        position: sticky;
        top: 2rem;
    }

    .filter-section {
        margin-bottom: 2rem;
    }

    .filter-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #FF9800;
    }

    .product-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s;
        height: 100%;
        border: none;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }

    .product-carousel {
        position: relative;
        width: 100%;
        padding-top: 100%;
    }

    .carousel {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    .carousel-inner {
        width: 100%;
        height: 100%;
    }

    .carousel-item {
        position: relative;
        width: 100%;
        height: 100%;
    }

    .carousel-item img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: contain;
        background-color: #f8f9fa;
    }

    .variant-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        border-radius: 8px;
        background: #f8f9fa;
        margin-bottom: 0.5rem;
        transition: background-color 0.3s;
    }

    .variant-item:hover {
        background: #FF980020;
    }

    .price {
        font-weight: 600;
        color: #FF9800;
        font-size: 1.1rem;
    }

    .btn-primary {
        background-color: #FF9800;
        border-color: #FF9800;
        padding: 0.6rem 1.5rem;
        font-weight: 500;
        transition: all 0.3s;
    }

    .btn-primary:hover {
        background-color: #F57C00;
        border-color: #F57C00;
        transform: translateY(-2px);
    }

    .form-range::-webkit-slider-thumb {
        background: #FF9800;
    }

    .form-select {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 0.75rem;
        font-size: 0.95rem;
        color: #2c3e50;
        transition: all 0.3s;
    }

    .form-select:focus {
        border-color: #FF9800;
        box-shadow: 0 0 0 0.2rem rgba(255, 152, 0, 0.25);
    }

    .category-filter label {
        display: block;
        padding: 0.75rem;
        cursor: pointer;
        transition: all 0.3s;
        border-radius: 8px;
    }

    .category-filter label:hover {
        background: #FF980010;
        color: #FF9800;
    }

    .category-filter input[type="radio"]:checked + span {
        color: #FF9800;
        font-weight: 500;
    }

    .products-header {
        display: none;
    }

    .products-found {
        display: none;
    }

    .sort-select {
        display: none;
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }

    .card-text {
        color: #6c757d;
    }

    .brand-badge {
        position: absolute;
        top: 10px;
        left: 10px;
        background: rgba(255, 152, 0, 0.9);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
        z-index: 1;
    }

    .carousel-control-prev,
    .carousel-control-next {
        width: 40px;
        height: 40px;
        background: rgba(0, 0, 0, 0.5);
        border-radius: 50%;
        top: 50%;
        transform: translateY(-50%);
        opacity: 0.8;
    }

    .carousel-control-prev {
        left: 10px;
    }

    .carousel-control-next {
        right: 10px;
    }

    .carousel-control-prev:hover,
    .carousel-control-next:hover {
        background: rgba(0, 0, 0, 0.7);
        opacity: 1;
    }

    .carousel-control-prev-icon,
    .carousel-control-next-icon {
        width: 20px;
        height: 20px;
    }

    .no-products {
        text-align: center;
        padding: 3rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .no-products i {
        color: #FF9800;
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    /* Add navbar styles from home page */
    .navbar {
        background: #ffffff;
        padding: 1rem 0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .navbar-brand {
        font-size: 1.8rem;
        font-weight: 700;
        color: #FF9800 !important;
    }

    .search-bar {
        max-width: 500px;
        width: 100%;
    }

    .search-input {
        border-radius: 20px;
        padding-left: 1rem;
        padding-right: 3rem;
        border: 1px solid #ddd;
    }

    .search-btn {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #666;
    }

    .nav-icon {
        color: #666;
        font-size: 1.2rem;
        padding: 0.5rem;
        border-radius: 50%;
        transition: all 0.3s ease;
        position: relative;
    }

    .nav-icon:hover {
        color: #FF9800;
        background: rgba(255, 152, 0, 0.1);
    }

    .badge-notification {
        position: absolute;
        top: -5px;
        right: -5px;
        background-color: #FF9800;
        color: white;
        border-radius: 50%;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
        color: #666;
        padding: 0.5rem;
        border-radius: 20px;
        transition: all 0.3s ease;
    }

    .user-profile:hover {
        background: rgba(255, 152, 0, 0.1);
        color: #FF9800;
    }

    .user-profile img {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
    }

    .dropdown-menu {
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        border: none;
        padding: 0.5rem;
    }

    .dropdown-item {
        border-radius: 8px;
        padding: 0.5rem 1rem;
    }

    .dropdown-item:hover {
        background: rgba(255, 152, 0, 0.1);
        color: #FF9800;
    }

    /* Footer Styles */
    .footer {
        margin-top: auto;
        background: #343a40;
        color: white;
    }

    .footer h5 {
        color: #fff;
        font-weight: 600;
    }

    .footer a {
        text-decoration: none;
        transition: color 0.3s ease;
    }

    .footer a:hover {
        color: #FF9800 !important;
    }

    .social-links a {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 35px;
        height: 35px;
        border-radius: 50%;
        background: rgba(255,255,255,0.1);
        transition: all 0.3s ease;
    }

    .social-links a:hover {
        background: #FF9800;
        transform: translateY(-3px);
    }

    .newsletter-form .form-control {
        background: rgba(255,255,255,0.1);
        border: none;
        color: #fff;
        padding: 0.75rem;
    }

    .newsletter-form .form-control::placeholder {
        color: rgba(255,255,255,0.5);
    }

    .bg-darker {
        background: #1a1a1a;
    }

    .payment-methods {
        max-height: 30px;
        opacity: 0.7;
    }

    .out-of-stock-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.2rem;
        font-weight: 600;
        z-index: 2;
    }

    .variant-item.out-of-stock {
        opacity: 0.6;
        background: #f8f9fa;
    }

    .stock-status {
        color: #dc3545;
        font-size: 0.8rem;
        margin-left: 0.5rem;
    }

    .btn-secondary:disabled {
        background-color: #6c757d;
        border-color: #6c757d;
        opacity: 0.65;
        cursor: not-allowed;
    }

    .breadcrumb {
        background: none;
        padding: 0;
    }

    .breadcrumb-item + .breadcrumb-item::before {
        content: ">";
        padding: 0 5px;
    }

    .star-rating {
        color: #FF9800;
    }

    .star-rating i {
        font-size: 1.2rem;
    }

    .rating-text {
        margin-left: 5px;
        font-size: 1rem;
    }

    /* Pagination styles */
    .pagination {
        margin-top: 2rem;
    }
    
    .page-link {
        color: #FF9800;
        border-color: #dee2e6;
        padding: 0.5rem 1rem;
        margin: 0 0.2rem;
        border-radius: 8px;
    }
    
    .page-item.active .page-link {
        background-color: #FF9800;
        border-color: #FF9800;
        color: white;
    }
    
    .page-link:hover {
        color: #F57C00;
        background-color: rgba(255, 152, 0, 0.1);
        border-color: #dee2e6;
    }
    
    .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
        background-color: #fff;
        border-color: #dee2e6;
    }

    .variant-bubbles {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .variant-bubble {
        background-color: #f8f9fa;
        color: #666;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.75rem;
        border: 1px solid #dee2e6;
    }

    .price-section {
        font-size: 1.25rem;
        font-weight: 600;
        color: #FF9800;
    }

    .price {
        display: inline-block;
    }

    /* Wishlist button styles */
    .wishlist-btn {
        background: none;
        border: none;
        padding: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .wishlist-btn i {
        color: #FF9800;
        font-size: 1.5rem;
        transition: all 0.3s ease;
    }

    .wishlist-btn.active i {
        color: #FF9800;
        transform: scale(1.1);
    }

    .wishlist-btn:hover i {
        transform: scale(1.1);
    }

    /* Animation for heart click */
    @keyframes heartPop {
        0% { transform: scale(1); }
        50% { transform: scale(1.2); }
        100% { transform: scale(1); }
    }

    .heart-pop {
        animation: heartPop 0.3s ease;
    }

    /* Rating styles */
    .product-rating {
        display: flex;
        align-items: center;
    }
    
    .stars {
        display: flex;
        align-items: center;
    }
    
    .rating-value {
        font-weight: 600;
        font-size: 0.9rem;
        color: #FF9800;
    }
    
    .rating-count {
        font-size: 0.8rem;
        margin-left: 3px;
    }
    
    /* Add to Cart button styles */
    .add-to-cart-btn {
        border-color: #FF9800;
        color: #FF9800;
        transition: all 0.3s;
    }
    
    .add-to-cart-btn:hover:not(:disabled) {
        background-color: #FF9800;
        color: white;
    }
    
    .add-to-cart-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .offer-badge {
        position: absolute;
        top: 10px;
        left: 10px;
        background-color: #FF9800;
        color: white;
        padding: 5px 10px;
        border-radius: 3px;
        font-weight: bold;
        z-index: 10;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    
    .original-price {
        text-decoration: line-through;
        color: #999;
        margin-right: 5px;
        font-size: 0.9em;
    }
    
    .final-price {
        color: #FF9800;
        font-weight: bold;
        font-size: 1.1em;
    }

    /* Add these styles for the variant options */
    .variant-option {
        padding: 15px 25px;
        border-radius: 10px;
        border: 2px solid #dee2e6;
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: center;
        min-width: 120px;
    }
    
    .variant-option:hover:not(.disabled) {
        border-color: #FF9800;
        background-color: #FFF8E1;
    }
    
    .variant-option.disabled {
        opacity: 0.7;
        cursor: not-allowed;
        background-color: #f8f9fa;
    }
    
    /* Modal animation */
    .modal.fade .modal-dialog {
        transition: transform 0.3s ease-out;
        transform: scale(0.95);
    }
    
    .modal.show .modal-dialog {
        transform: scale(1);
    }
</style>

<div class="shop-container">
    <div class="container">
        <div class="row">
            
            <!-- Filter Sidebar -->
            <div class="col-lg-3 mb-4">
                <div class="filter-sidebar">
                    <!-- Category Filter -->
                    <div class="filter-section">
                        <h5 class="filter-title">Categories</h5>
                        <div class="category-filter">
                            <label class="d-flex align-items-center">
                                <input type="radio" name="category" value="" class="me-2" 
                                       <%= !selectedCategory ? 'checked' : '' %>>
                                All Categories
                            </label>
                            <% if (categories && categories.length > 0) { %>
                                <% categories.forEach(function(category) { %>
                                    <label class="d-flex align-items-center">
                                        <input type="radio" name="category" value="<%= category._id %>" 
                                               class="me-2"
                                               <%= selectedCategory === category._id.toString() ? 'checked' : '' %>>
                                        <%= category.name %>
                                    </label>
                                <% }); %>
                            <% } %>
                        </div>
                    </div>

                    <!-- Brand Filter -->
                    <div class="filter-section">
                        <h5 class="filter-title">Brands</h5>
                        <div class="brand-filter">
                            <select class="form-select" id="brandSelect" onchange="applyFilters()">
                                <option value="">All Brands</option>
                                <% if (brands && brands.length > 0) { %>
                                    <% brands.forEach(function(brand) { %>
                                        <option value="<%= brand %>" 
                                                <%= selectedBrand === brand ? 'selected' : '' %>>
                                            <%= brand.charAt(0).toUpperCase() + brand.slice(1) %>
                                        </option>
                                    <% }); %>
                                <% } %>
                            </select>
                        </div>
                    </div>

                    <!-- Sort By Filter -->
                    <div class="filter-section">
                        <h5 class="filter-title">Sort By</h5>
                        <select class="form-select" id="sortSelect" onchange="applyFilters()">
                            <option value="">Default</option>
                            <option value="price-low" <%= sort === 'price-low' ? 'selected' : '' %>>Price: Low to High</option>
                            <option value="price-high" <%= sort === 'price-high' ? 'selected' : '' %>>Price: High to Low</option>
                            <option value="name-asc" <%= sort === 'name-asc' ? 'selected' : '' %>>A - Z</option>
                            <option value="name-desc" <%= sort === 'name-desc' ? 'selected' : '' %>>Z - A</option>
                        </select>
                    </div>

                    <!-- Price Filter -->
                    <div class="filter-section">
                        <h5 class="filter-title">Price Range</h5>
                        <div class="price-range">
                            <input type="range" class="price-slider form-range" id="minPrice" 
                                   min="100" max="500" step="50" 
                                   value="<%= minPrice || 100 %>">
                            <div class="d-flex justify-content-between mt-2">
                                <span class="price-value">₹<span id="priceValue"><%= minPrice || 100 %></span></span>
                                <span>₹500</span>
                            </div>
                            <div class="mt-3">
                                <button class="btn btn-primary btn-sm w-100" onclick="applyPriceFilter()">
                                    Apply Filter
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Products Grid -->
            <div class="col-lg-9">
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                    <% if (products && products.length > 0) { %>
                        <% products.forEach(function(product) { %>
                            <div class="col">
                                <div class="card product-card" data-product-id="<%= product._id %>">
                                    <% 
                                    // Check if product is out of stock - MOVED THIS UP
                                    let isOutOfStock = true;
                                    if (product.variants) {
                                        Object.keys(product.variants).forEach(size => {
                                            if (product.variants[size].stock > 0) {
                                                isOutOfStock = false;
                                            }
                                        });
                                    }
                                    
                                    // Check if product has a discount
                                    let hasDiscount = false;
                                    let discountPercent = 0;
                                    if (product.variants && Object.keys(product.variants).length > 0) {
                                        const firstVariant = product.variants[Object.keys(product.variants)[0]];
                                        if (firstVariant.mrp && firstVariant.price && firstVariant.mrp > firstVariant.price) {
                                            hasDiscount = true;
                                            discountPercent = Math.round((firstVariant.mrp - firstVariant.price) / firstVariant.mrp * 100);
                                        }
                                    }
                                    %>
                                    <div class="product-carousel">
                                        <div id="carousel-<%= product._id %>" class="carousel slide" data-bs-ride="carousel">
                                            <div class="carousel-inner">
                                                <% if (product.images && product.images.image1) { %>
                                                    <div class="carousel-item active">
                                                        <img src="<%= product.images.image1 %>" 
                                                             alt="<%= product.name %>" 
                                                             class="d-block w-100">
                                                    </div>
                                                <% } else { %>
                                                    <div class="carousel-item active">
                                                        <img src="https://via.placeholder.com/300x300?text=No+Image" 
                                                             alt="No Image Available" 
                                                             class="d-block w-100">
                                                    </div>
                                                <% } %>
                                                <% if (product.images && product.images.image2) { %>
                                                    <div class="carousel-item">
                                                        <img src="<%= product.images.image2 %>" 
                                                             alt="<%= product.name %>" 
                                                             class="d-block w-100">
                                                    </div>
                                                <% } %>
                                                <% if (product.images && product.images.image3) { %>
                                                    <div class="carousel-item">
                                                        <img src="<%= product.images.image3 %>" 
                                                             alt="<%= product.name %>" 
                                                             class="d-block w-100">
                                                    </div>
                                                <% } %>
                                            </div>
                                            <% if (product.images && Object.keys(product.images).filter(key => product.images[key]).length > 1) { %>
                                                <button class="carousel-control-prev" type="button" 
                                                        data-bs-target="#carousel-<%= product._id %>" data-bs-slide="prev">
                                                    <span class="carousel-control-prev-icon"></span>
                                                </button>
                                                <button class="carousel-control-next" type="button" 
                                                        data-bs-target="#carousel-<%= product._id %>" data-bs-slide="next">
                                                    <span class="carousel-control-next-icon"></span>
                                                </button>
                                            <% } %>
                                        </div>
                                        
                                        <% if (isOutOfStock) { %>
                                            <div class="out-of-stock-overlay">
                                                <span>Out of Stock</span>
                                            </div>
                                        <% } %>
                                    </div>
                                    
                                    <div class="card-body">
                                        <h5 class="card-title"><%= product.name %></h5>
                                        <% if (product.category) { %>
                                            <p class="card-text text-muted mb-2">
                                                <small><%= product.category.name %></small>
                                            </p>
                                        <% } %>
                                        
                                        <!-- Add dummy ratings here -->
                                        <div class="product-rating mb-2">
                                            <% 
                                            // Generate a random rating between 3.5 and 5
                                            const rating = (Math.random() * 1.5 + 3.5).toFixed(1);
                                            const fullStars = Math.floor(rating);
                                            const hasHalfStar = rating % 1 >= 0.5;
                                            const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
                                            %>
                                            
                                            <div class="stars">
                                                <% for(let i = 0; i < fullStars; i++) { %>
                                                    <i class="fas fa-star text-warning"></i>
                                                <% } %>
                                                
                                                <% if(hasHalfStar) { %>
                                                    <i class="fas fa-star-half-alt text-warning"></i>
                                                <% } %>
                                                
                                                <% for(let i = 0; i < emptyStars; i++) { %>
                                                    <i class="far fa-star text-warning"></i>
                                                <% } %>
                                                
                                                <span class="rating-value ms-1"><%= rating %></span>
                                                <span class="rating-count text-muted">(<%= Math.floor(Math.random() * 100) + 10 %>)</span>
                                            </div>
                                        </div>
                                        
                                        <div class="variant-bubbles mb-3">
                                            <% if (product.variants) { %>
                                                <% Object.keys(product.variants).forEach(size => { %>
                                                    <span class="variant-bubble"><%= size %></span>
                                                <% }); %>
                                            <% } %>
                                        </div>

                                        <div class="price-section mb-3">
                                            <% if (product.bestOffer) { %>
                                                <span class="original-price">₹<%= product.variants['500ml'].price.toFixed(2) %></span>
                                                <span class="final-price">₹<%= product.finalPrice.toFixed(2) %></span>
                                            <% } else { %>
                                                <span class="final-price">₹<%= product.variants['500ml'].price.toFixed(2) %></span>
                                            <% } %>
                                        </div>

                                        <div class="d-flex justify-content-between mb-3">
                                            <button class="wishlist-btn" onclick="toggleWishlist('<%= product._id %>', this, event)">
                                                <i class="far fa-heart"></i>
                                            </button>
                                            
                                            <!-- Add to Cart Button -->
                                            <button class="btn btn-sm btn-outline-primary add-to-cart-btn" 
                                                    <%= isOutOfStock ? 'disabled' : '' %>>
                                                <i class="fas fa-shopping-cart me-1"></i> Add to Cart
                                            </button>
                                        </div>

                                        <a href="/shop/products/<%= product._id %>" 
                                           class="btn <%= isOutOfStock ? 'btn-secondary' : 'btn-primary' %> w-100"
                                           <%= isOutOfStock ? 'disabled' : '' %>>
                                            <%= isOutOfStock ? 'Out of Stock' : 'View Details' %>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="col-12 text-center py-5">
                            <h3 class="text-muted">No products found</h3>
                            <p class="text-muted">Try adjusting your filters</p>
                        </div>
                    <% } %>
                </div>
                
                <!-- Pagination -->
                <% if (locals.pagination && pagination.totalPages > 1) { %>
                    <nav aria-label="Product pagination" class="mt-4">
                        <ul class="pagination justify-content-center">
                            <li class="page-item <%= !pagination.hasPrevPage ? 'disabled' : '' %>">
                                <a class="page-link" href="?page=<%= pagination.prevPage %>&category=<%= selectedCategory %>&brand=<%= selectedBrand %>&minPrice=<%= minPrice %>" <%= !pagination.hasPrevPage ? 'tabindex="-1" aria-disabled="true"' : '' %>>
                                    Previous
                                </a>
                            </li>
                            
                            <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                                <li class="page-item <%= pagination.page === i ? 'active' : '' %>">
                                    <a class="page-link" href="?page=<%= i %>&category=<%= selectedCategory %>&brand=<%= selectedBrand %>&minPrice=<%= minPrice %>">
                                        <%= i %>
                                    </a>
                                </li>
                            <% } %>
                            
                            <li class="page-item <%= !pagination.hasNextPage ? 'disabled' : '' %>">
                                <a class="page-link" href="?page=<%= pagination.nextPage %>&category=<%= selectedCategory %>&brand=<%= selectedBrand %>&minPrice=<%= minPrice %>" <%= !pagination.hasNextPage ? 'tabindex="-1" aria-disabled="true"' : '' %>>
                                    Next
                                </a>
                            </li>
                        </ul>
                    </nav>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- Update the modal with a stylish UI -->
<div class="modal fade" id="variantSelectModal" tabindex="-1" aria-labelledby="variantSelectModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-0 shadow">
      <div class="modal-header bg-light">
        <h5 class="modal-title" id="variantSelectModalLabel">
          <i class="fas fa-wine-bottle me-2 text-primary"></i>Select Size
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body p-4">
        <div class="text-center mb-4">
          <p class="text-muted">Choose your preferred size variant</p>
        </div>
        
        <div class="variant-selection">
          <div class="d-flex flex-wrap justify-content-center gap-3 mb-4" id="variantButtonsContainer">
            <!-- Variant buttons will be added here dynamically -->
          </div>
          <div id="stockInfo" class="text-center text-muted mb-3">
            <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            Loading available sizes...
          </div>
        </div>
      </div>
      <div class="modal-footer border-0 pt-0">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary px-4" id="addToCartBtn" disabled>
          <i class="fas fa-shopping-cart me-2"></i>Add to Cart
        </button>
      </div>
    </div>
  </div>
</div>

<script>
    // Price slider value display
    const priceSlider = document.getElementById('minPrice');
    const priceValue = document.getElementById('priceValue');
    
    priceSlider.addEventListener('input', function() {
        priceValue.textContent = this.value;
    });

    // Updated Filter functionality
    function applyFilters() {
        const categoryId = document.querySelector('input[name="category"]:checked')?.value || '';
        const minPrice = document.getElementById('minPrice').value;
        const brand = document.getElementById('brandSelect').value;
        const sort = document.getElementById('sortSelect').value;
        
        let url = '/shop/products?';
        if (categoryId) url += `category=${categoryId}&`;
        if (minPrice && minPrice > 100) url += `minPrice=${minPrice}&`;
        if (brand) url += `brand=${brand}&`;
        if (sort) url += `sort=${sort}&`;
        // Reset to page 1 when filters change
        url += 'page=1';
        
        window.location.href = url;
    }

    // Add event listeners
    document.querySelectorAll('input[name="category"]').forEach(radio => {
        radio.addEventListener('change', applyFilters);
    });

    function applyPriceFilter() {
        applyFilters();
    }


    // Function to update product stock display
    function updateProductStock(productId, variantSize, newStock) {
        const productCard = document.querySelector(`[data-product-id="${productId}"]`);
        if (!productCard) return;

        console.log('Updating stock for product:', productId, 'variant:', variantSize, 'new stock:', newStock);

        const variantElement = productCard.querySelector(`[data-variant-size="${variantSize}"]`);
        if (variantElement) {
            if (newStock <= 0) {
                console.log('Setting variant to out of stock');
                variantElement.classList.add('out-of-stock');
                const variantInfo = variantElement.querySelector('.variant-info');
                if (variantInfo) {
                    const price = variantElement.dataset.price;
                    variantInfo.innerHTML = `
                        <span class="price">₹${price}</span>
                        <small class="stock-status">(Out of Stock)</small>
                    `;
                }
            } else {
                console.log('Setting variant to in stock');
                variantElement.classList.remove('out-of-stock');
                const variantInfo = variantElement.querySelector('.variant-info');
                if (variantInfo) {
                    const price = variantElement.dataset.price;
                    variantInfo.innerHTML = `<span class="price">₹${price}</span>`;
                }
            }
        }

        // Check if all variants are out of stock
        const variants = productCard.querySelectorAll('.variant-item');
        const allVariantsOutOfStock = Array.from(variants)
            .every(v => v.classList.contains('out-of-stock'));

        console.log('All variants out of stock:', allVariantsOutOfStock);

        // Update product card appearance
        const carousel = productCard.querySelector('.product-carousel');
        let outOfStockOverlay = productCard.querySelector('.out-of-stock-overlay');
        const viewDetailsBtn = productCard.querySelector('.btn');

        if (allVariantsOutOfStock) {
            console.log('Showing out of stock overlay');
            if (!outOfStockOverlay) {
                outOfStockOverlay = document.createElement('div');
                outOfStockOverlay.className = 'out-of-stock-overlay';
                outOfStockOverlay.innerHTML = '<span>Out of Stock</span>';
                carousel.appendChild(outOfStockOverlay);
            }
            viewDetailsBtn.className = 'btn btn-secondary w-100';
            viewDetailsBtn.disabled = true;
            viewDetailsBtn.textContent = 'Out of Stock';
        } else {
            console.log('Removing out of stock overlay');
            if (outOfStockOverlay) {
                outOfStockOverlay.remove();
            }
            viewDetailsBtn.className = 'btn btn-primary w-100';
            viewDetailsBtn.disabled = false;
            viewDetailsBtn.textContent = 'View Details';
        }
    }

    // Function to construct pagination URLs
    function constructPageUrl(page) {
        const url = new URL(window.location.href);
        url.searchParams.set('page', page);
        return url.toString();
    }

    // Add wishlist functionality
    function toggleWishlist(productId, button, event) {
        // Prevent any parent click events
        event.preventDefault();
        event.stopPropagation();

        const icon = button.querySelector('i');
        const isAdding = icon.classList.contains('far');
        
        // Add animation class
        icon.classList.add('heart-pop');
        
        // Remove animation class after animation ends
        setTimeout(() => {
            icon.classList.remove('heart-pop');
        }, 300);

        fetch(`/users/wishlist/${isAdding ? 'add' : 'remove'}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Toggle icon
                icon.classList.toggle('far');
                icon.classList.toggle('fas');
                button.classList.toggle('active');

                // Show success toast
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 2000,
                    icon: 'success',
                    title: isAdding ? 'Added to wishlist' : 'Removed from wishlist'
                });
            } else {
                throw new Error(data.message || 'Failed to update wishlist');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            // Show error message
            Swal.fire({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                icon: 'error',
                title: 'Error updating wishlist'
            });
        });
    }

    // Check wishlist status on page load
    document.addEventListener('DOMContentLoaded', async function() {
        try {
            const response = await fetch('/users/wishlist/items');
            const data = await response.json();
            if (data.success) {
                const wishlistItems = new Set(data.items);
                document.querySelectorAll('.product-card').forEach(card => {
                    const productId = card.dataset.productId;
                    const wishlistBtn = card.querySelector('.wishlist-btn');
                    const icon = wishlistBtn.querySelector('i');
                    
                    if (wishlistItems.has(productId)) {
                        icon.classList.remove('far');
                        icon.classList.add('fas');
                        wishlistBtn.classList.add('active');
                    }
                });
            }
        } catch (error) {
            console.error('Error checking wishlist status:', error);
        }
    });

    // Global variables
    let currentProductId;
    let selectedVariant = '';
    
    document.addEventListener('DOMContentLoaded', function() {
        let currentProductId;
        let selectedVariant = '';
        
        // Get modal elements
        const modal = document.getElementById('variantSelectModal');
        const variantButtonsContainer = document.getElementById('variantButtonsContainer');
        const stockInfo = document.getElementById('stockInfo');
        const addToCartBtn = document.getElementById('addToCartBtn');
        
        // Add click event to all add to cart buttons
        document.querySelectorAll('.add-to-cart-btn').forEach(button => {
            button.addEventListener('click', function(event) {
                event.preventDefault();
                event.stopPropagation();
                
                // Get product ID from the parent card
                const card = this.closest('.product-card');
                currentProductId = card.dataset.productId;
                
                // Reset selected variant
                selectedVariant = '';
                
                // Clear previous variant buttons
                variantButtonsContainer.innerHTML = '';
                
                // Reset stock info with loading spinner
                stockInfo.innerHTML = `
                    <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    Loading available sizes...
                `;
                stockInfo.className = 'text-center text-muted mb-3';
                
                // Disable add to cart button until variant is selected
                addToCartBtn.disabled = true;
                
                // Show the modal
                const modalInstance = new bootstrap.Modal(modal);
                modalInstance.show();
                
                // Fetch product variants and stock information
                fetch(`/shop/product/${currentProductId}/variants`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to fetch product variants');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success && data.variants) {
                            // Clear container
                            variantButtonsContainer.innerHTML = '';
                            
                            // Check if we have any variants
                            if (Object.keys(data.variants).length === 0) {
                                stockInfo.innerHTML = '<i class="fas fa-exclamation-circle me-2"></i>No variants available';
                                stockInfo.className = 'text-center text-danger mb-3';
                                return;
                            }
                            
                            // Create variant buttons
                            Object.keys(data.variants).forEach(variant => {
                                const variantInfo = data.variants[variant];
                                const stock = variantInfo.stock || 0;
                                
                                // Create button element
                                const button = document.createElement('div');
                                button.className = `variant-option ${stock <= 0 ? 'disabled' : ''}`;
                                button.dataset.variant = variant;
                                button.dataset.stock = stock;
                                
                                // Style the button
                                button.style.padding = '15px 25px';
                                button.style.borderRadius = '10px';
                                button.style.border = '2px solid #dee2e6';
                                button.style.cursor = stock > 0 ? 'pointer' : 'not-allowed';
                                button.style.transition = 'all 0.2s ease';
                                button.style.textAlign = 'center';
                                
                                // Set button content with stock information
                                button.innerHTML = `
                                    <div class="fw-bold fs-5">${variant}</div>
                                    <div class="${stock > 0 ? 'text-success' : 'text-danger'} mt-1">
                                        ${stock > 0 ? 
                                            `<i class="fas fa-check-circle me-1"></i>${stock} in stock` : 
                                            '<i class="fas fa-times-circle me-1"></i>Out of stock'}
                                    </div>
                                `;
                                
                                // Add click event if in stock
                                if (stock > 0) {
                                    button.addEventListener('click', function() {
                                        // Remove active class from all buttons
                                        document.querySelectorAll('.variant-option').forEach(btn => {
                                            btn.style.borderColor = '#dee2e6';
                                            btn.style.backgroundColor = 'white';
                                        });
                                        
                                        // Add active style to clicked button
                                        this.style.borderColor = '#FF9800';
                                        this.style.backgroundColor = '#FFF3E0';
                                        
                                        // Store selected variant
                                        selectedVariant = this.dataset.variant;
                                        
                                        // Update stock info
                                        const variantStock = parseInt(this.dataset.stock);
                                        stockInfo.innerHTML = `
                                            <i class="fas fa-info-circle me-2 text-primary"></i>
                                            <span class="fw-bold">${variantStock}</span> items available in stock
                                        `;
                                        stockInfo.className = 'text-center text-primary mb-3';
                                        
                                        // Enable add to cart button
                                        addToCartBtn.disabled = false;
                                    });
                                }
                                
                                // Add button to container
                                variantButtonsContainer.appendChild(button);
                            });
                            
                            // Update stock info
                            stockInfo.innerHTML = '<i class="fas fa-hand-pointer me-2"></i>Select a size to continue';
                            stockInfo.className = 'text-center text-muted mb-3';
                        } else {
                            stockInfo.innerHTML = '<i class="fas fa-exclamation-triangle me-2"></i>Failed to load variants';
                            stockInfo.className = 'text-center text-danger mb-3';
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching variants:', error);
                        stockInfo.innerHTML = '<i class="fas fa-exclamation-triangle me-2"></i>Error loading stock information';
                        stockInfo.className = 'text-center text-danger mb-3';
                    });
            });
        });
        
        // Add to cart button click event
        addToCartBtn.addEventListener('click', function() {
            if (!selectedVariant) {
                Swal.fire({
                    title: 'Select a Size',
                    text: 'Please select a size variant first',
                    icon: 'warning',
                    confirmButtonColor: '#FF9800'
                });
                return;
            }
            
            // Show loading state
            const originalText = this.innerHTML;
            this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Adding...';
            this.disabled = true;
            
            // Add to cart (quantity fixed to 1)
            fetch('/cart/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    productId: currentProductId,
                    variant: selectedVariant,
                    quantity: 1 // Fixed quantity
                })
            })
            .then(response => response.json())
            .then(data => {
                // Reset button
                this.innerHTML = originalText;
                this.disabled = false;
                
                if (data.success) {
                    // Close modal
                    bootstrap.Modal.getInstance(modal).hide();
                    
                    // Show success message
                    Swal.fire({
                        title: 'Added to Cart!',
                        text: 'Product has been added to your cart',
                        icon: 'success',
                        confirmButtonColor: '#FF9800',
                        showCancelButton: true,
                        cancelButtonText: 'Continue Shopping',
                        confirmButtonText: 'View Cart'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/cart';
                        }
                    });
                    
                    // Update cart count in navbar if it exists
                    const cartBadge = document.querySelector('.cart-badge');
                    if (cartBadge) {
                        const currentCount = parseInt(cartBadge.textContent || '0');
                        cartBadge.textContent = currentCount + 1;
                    }
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to add to cart',
                        icon: 'error',
                        confirmButtonColor: '#FF9800'
                    });
                }
            })
            .catch(error => {
                // Reset button
                this.innerHTML = originalText;
                this.disabled = false;
                
                console.error('Error adding to cart:', error);
                
                Swal.fire({
                    title: 'Error!',
                    text: 'Something went wrong. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#FF9800'
                });
            });
        });
    });
</script>

<%- include('../partials/footer') %>
